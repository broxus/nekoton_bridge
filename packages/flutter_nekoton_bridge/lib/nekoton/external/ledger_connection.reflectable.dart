// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.
import 'dart:core';
import 'ledger_connection.dart' as prefix1;
import 'package:flutter_nekoton_bridge/nekoton/core/generic_contract/generic_contract.dart'
    as prefix6;
import 'package:flutter_nekoton_bridge/nekoton/core/jetton_wallet/jetton_wallet.dart'
    as prefix8;
import 'package:flutter_nekoton_bridge/nekoton/core/token_wallet/token_wallet.dart'
    as prefix7;
import 'package:flutter_nekoton_bridge/nekoton/core/ton_wallet/ton_wallet.dart'
    as prefix9;
import 'package:flutter_nekoton_bridge/nekoton/external/gql_connection.dart'
    as prefix2;
import 'package:flutter_nekoton_bridge/nekoton/external/jrpc_connection.dart'
    as prefix4;
import 'package:flutter_nekoton_bridge/nekoton/external/proto_connection.dart'
    as prefix3;
import 'package:flutter_nekoton_bridge/nekoton/external/storage.dart'
    as prefix5;
import 'package:flutter_nekoton_bridge/rust_to_dart/reflector.dart' as prefix0;

// ignore_for_file: camel_case_types
// ignore_for_file: implementation_imports
// ignore_for_file: prefer_adjacent_string_concatenation
// ignore_for_file: prefer_collection_literals
// ignore_for_file: unnecessary_const
// ignore_for_file: unused_import
// ignore_for_file: sdk_version_since

import 'package:reflectable/mirrors.dart' as m;
import 'package:reflectable/src/reflectable_builder_based.dart' as r;
import 'package:reflectable/reflectable.dart' as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{
  const prefix0.Reflector(): r.ReflectorData(
    <m.TypeMirror>[
      r.NonGenericClassMirrorImpl(
        r'LedgerConnection',
        r'.LedgerConnection',
        134217735,
        0,
        const prefix0.Reflector(),
        const <int>[-1],
        null,
        null,
        -1,
        {r'create': () => prefix1.LedgerConnection.create},
        {},
        {},
        -1,
        -1,
        const <int>[-1],
        null,
        {
          r'==': 0,
          r'toString': 3,
          r'noSuchMethod': 0,
          r'hashCode': 3,
          r'runtimeType': 3,
          r'init': 3,
          r'dispose': 3,
          r'instanceHash': 3,
          r'avoidCall': 3,
          r'getPublicKey': 0,
          r'sign': 1,
          r'signTransaction': 2,
          r'initializeMirror': 3,
          r'connection': 3,
          r'connection=': 0,
          r'create': 0,
        },
      ),
      r.NonGenericClassMirrorImpl(
        r'GqlConnection',
        r'.GqlConnection',
        134217735,
        1,
        const prefix0.Reflector(),
        const <int>[-1],
        null,
        null,
        -1,
        {r'create': () => prefix2.GqlConnection.create},
        {},
        {},
        -1,
        -1,
        const <int>[-1],
        null,
        {
          r'==': 0,
          r'toString': 3,
          r'noSuchMethod': 0,
          r'hashCode': 3,
          r'runtimeType': 3,
          r'init': 3,
          r'dispose': 3,
          r'instanceHash': 3,
          r'avoidCall': 3,
          r'post': 0,
          r'initializeMirror': 3,
          r'connection': 3,
          r'connection=': 0,
          r'settings': 3,
          r'type': 3,
          r'name': 3,
          r'group': 3,
          r'create': 4,
        },
      ),
      r.NonGenericClassMirrorImpl(
        r'ProtoConnection',
        r'.ProtoConnection',
        134217735,
        2,
        const prefix0.Reflector(),
        const <int>[-1],
        null,
        null,
        -1,
        {r'create': () => prefix3.ProtoConnection.create},
        {},
        {},
        -1,
        -1,
        const <int>[-1],
        null,
        {
          r'==': 0,
          r'toString': 3,
          r'noSuchMethod': 0,
          r'hashCode': 3,
          r'runtimeType': 3,
          r'init': 3,
          r'dispose': 3,
          r'instanceHash': 3,
          r'avoidCall': 3,
          r'post': 0,
          r'initializeMirror': 3,
          r'connection': 3,
          r'connection=': 0,
          r'settings': 3,
          r'type': 3,
          r'name': 3,
          r'group': 3,
          r'create': 4,
        },
      ),
      r.NonGenericClassMirrorImpl(
        r'JrpcConnection',
        r'.JrpcConnection',
        134217735,
        3,
        const prefix0.Reflector(),
        const <int>[-1],
        null,
        null,
        -1,
        {r'create': () => prefix4.JrpcConnection.create},
        {},
        {},
        -1,
        -1,
        const <int>[-1],
        null,
        {
          r'==': 0,
          r'toString': 3,
          r'noSuchMethod': 0,
          r'hashCode': 3,
          r'runtimeType': 3,
          r'init': 3,
          r'dispose': 3,
          r'instanceHash': 3,
          r'avoidCall': 3,
          r'post': 0,
          r'initializeMirror': 3,
          r'connection': 3,
          r'connection=': 0,
          r'settings': 3,
          r'type': 3,
          r'name': 3,
          r'group': 3,
          r'create': 4,
        },
      ),
      r.NonGenericClassMirrorImpl(
        r'Storage',
        r'.Storage',
        134217735,
        4,
        const prefix0.Reflector(),
        const <int>[-1],
        null,
        null,
        -1,
        {r'create': () => prefix5.Storage.create},
        {},
        {},
        -1,
        -1,
        const <int>[-1],
        null,
        {
          r'==': 0,
          r'toString': 3,
          r'noSuchMethod': 0,
          r'hashCode': 3,
          r'runtimeType': 3,
          r'init': 3,
          r'dispose': 3,
          r'instanceHash': 3,
          r'avoidCall': 3,
          r'get': 0,
          r'set': 6,
          r'setUnchecked': 6,
          r'remove': 6,
          r'removeUnchecked': 6,
          r'initializeMirror': 3,
          r'storage': 3,
          r'storage=': 0,
          r'create': 5,
        },
      ),
      r.NonGenericClassMirrorImpl(
        r'GenericContract',
        r'.GenericContract',
        134217735,
        5,
        const prefix0.Reflector(),
        const <int>[-1],
        null,
        null,
        -1,
        {r'subscribe': () => prefix6.GenericContract.subscribe},
        {},
        {},
        -1,
        -1,
        const <int>[-1],
        null,
        {
          r'==': 0,
          r'toString': 3,
          r'noSuchMethod': 0,
          r'hashCode': 3,
          r'runtimeType': 3,
          r'init': 3,
          r'dispose': 3,
          r'instanceHash': 3,
          r'avoidCall': 3,
          r'getContractState': 3,
          r'getPendingTransactions': 3,
          r'getPollingMethod': 3,
          r'executeTransactionLocally': 8,
          r'estimateFees': 8,
          r'send': 8,
          r'refresh': 3,
          r'preloadTransactions': 9,
          r'handleBlock': 10,
          r'onMessageSent': 0,
          r'onMessageExpired': 0,
          r'onStateChanged': 0,
          r'onTransactionsFound': 0,
          r'initializeMirror': 3,
          r'contract': 3,
          r'contract=': 0,
          r'transport': 3,
          r'address': 3,
          r'address=': 0,
          r'contractState': 3,
          r'pendingTransactions': 3,
          r'pollingMethod': 3,
          r'fieldUpdatesStream': 3,
          r'onMessageSentStream': 3,
          r'onMessageExpiredStream': 3,
          r'onStateChangedStream': 3,
          r'onTransactionsFoundStream': 3,
          r'refreshDescription': 3,
          r'subscribe': 7,
        },
      ),
      r.NonGenericClassMirrorImpl(
        r'TokenWallet',
        r'.TokenWallet',
        134217735,
        6,
        const prefix0.Reflector(),
        const <int>[-1],
        null,
        null,
        -1,
        {
          r'subscribe': () => prefix7.TokenWallet.subscribe,
          r'getTokenWalletDetails': () =>
              prefix7.TokenWallet.getTokenWalletDetails,
          r'getTokenRootDetailsFromTokenWallet': () =>
              prefix7.TokenWallet.getTokenRootDetailsFromTokenWallet,
          r'getTokenRootDetails': () => prefix7.TokenWallet.getTokenRootDetails,
        },
        {},
        {},
        -1,
        -1,
        const <int>[-1],
        null,
        {
          r'==': 0,
          r'toString': 3,
          r'noSuchMethod': 0,
          r'hashCode': 3,
          r'runtimeType': 3,
          r'init': 3,
          r'dispose': 3,
          r'instanceHash': 3,
          r'avoidCall': 3,
          r'getContractState': 3,
          r'estimateMinAttachedAmount': 12,
          r'prepareTransfer': 13,
          r'refresh': 3,
          r'preloadTransactions': 14,
          r'handleBlock': 10,
          r'onBalanceChanged': 0,
          r'onTransactionsFound': 0,
          r'initializeMirror': 3,
          r'wallet': 3,
          r'wallet=': 0,
          r'transport': 3,
          r'balance': 3,
          r'balance=': 0,
          r'rootTokenContract': 3,
          r'tokenAddress': 3,
          r'tokenAddress=': 0,
          r'owner': 3,
          r'owner=': 0,
          r'symbol': 3,
          r'symbol=': 0,
          r'currency': 3,
          r'currency=': 0,
          r'version': 3,
          r'version=': 0,
          r'moneyBalance': 3,
          r'isTransactionsPreloaded': 3,
          r'contractState': 3,
          r'fieldUpdatesStream': 3,
          r'onBalanceChangedStream': 3,
          r'onMoneyBalanceChangedStream': 3,
          r'onTransactionsFoundStream': 3,
          r'refreshDescription': 3,
          r'subscribe': 11,
          r'getTokenWalletDetails': 7,
          r'getTokenRootDetailsFromTokenWallet': 7,
          r'getTokenRootDetails': 15,
        },
      ),
      r.NonGenericClassMirrorImpl(
        r'JettonWallet',
        r'.JettonWallet',
        134217735,
        7,
        const prefix0.Reflector(),
        const <int>[-1],
        null,
        null,
        -1,
        {
          r'subscribe': () => prefix8.JettonWallet.subscribe,
          r'getJettonWalletDetails': () =>
              prefix8.JettonWallet.getJettonWalletDetails,
          r'getJettonRootDetailsFromJettonWallet': () =>
              prefix8.JettonWallet.getJettonRootDetailsFromJettonWallet,
          r'getJettonRootDetails': () =>
              prefix8.JettonWallet.getJettonRootDetails,
        },
        {},
        {},
        -1,
        -1,
        const <int>[-1],
        null,
        {
          r'==': 0,
          r'toString': 3,
          r'noSuchMethod': 0,
          r'hashCode': 3,
          r'runtimeType': 3,
          r'init': 3,
          r'dispose': 3,
          r'instanceHash': 3,
          r'avoidCall': 3,
          r'getContractState': 3,
          r'estimateMinAttachedAmount': 12,
          r'prepareTransfer': 16,
          r'refresh': 3,
          r'preloadTransactions': 14,
          r'handleBlock': 10,
          r'onBalanceChanged': 0,
          r'onTransactionsFound': 0,
          r'initializeMirror': 3,
          r'wallet': 3,
          r'wallet=': 0,
          r'transport': 3,
          r'balance': 3,
          r'balance=': 0,
          r'rootTokenContract': 3,
          r'tokenAddress': 3,
          r'tokenAddress=': 0,
          r'owner': 3,
          r'owner=': 0,
          r'isTransactionsPreloaded': 3,
          r'contractState': 3,
          r'fieldUpdatesStream': 3,
          r'onBalanceChangedStream': 3,
          r'onTransactionsFoundStream': 3,
          r'refreshDescription': 3,
          r'subscribe': 11,
          r'getJettonWalletDetails': 7,
          r'getJettonRootDetailsFromJettonWallet': 7,
          r'getJettonRootDetails': 15,
        },
      ),
      r.NonGenericClassMirrorImpl(
        r'TonWallet',
        r'.TonWallet',
        134217735,
        8,
        const prefix0.Reflector(),
        const <int>[-1],
        null,
        null,
        -1,
        {
          r'subscribe': () => prefix9.TonWallet.subscribe,
          r'subscribeByAddress': () => prefix9.TonWallet.subscribeByAddress,
          r'subscribeByExistingWallet': () =>
              prefix9.TonWallet.subscribeByExistingWallet,
          r'appendSignatureToWalletV5R1Payload': () =>
              prefix9.TonWallet.appendSignatureToWalletV5R1Payload,
          r'findExistingWallets': () => prefix9.TonWallet.findExistingWallets,
          r'getExistingWalletInfo': () =>
              prefix9.TonWallet.getExistingWalletInfo,
          r'getWalletCustodians': () => prefix9.TonWallet.getWalletCustodians,
        },
        {},
        {},
        -1,
        -1,
        const <int>[-1],
        null,
        {
          r'==': 0,
          r'toString': 3,
          r'noSuchMethod': 0,
          r'hashCode': 3,
          r'runtimeType': 3,
          r'init': 3,
          r'dispose': 3,
          r'instanceHash': 3,
          r'avoidCall': 3,
          r'getContractState': 3,
          r'getPendingTransactions': 3,
          r'getPollingMethod': 3,
          r'getUnconfirmedTransactions': 3,
          r'getCustodians': 3,
          r'prepareDeploy': 20,
          r'prepareDeployWithMultipleOwners': 21,
          r'prepareTransfer': 22,
          r'prepareWalletV5R1MessageBody': 23,
          r'prepareNonexistWalletV5R1MessageBody': 23,
          r'prepareConfirmTransaction': 24,
          r'estimateFees': 25,
          r'send': 8,
          r'refresh': 3,
          r'preloadTransactions': 9,
          r'handleBlock': 10,
          r'makeStateInit': 3,
          r'getWalletV5R1Seqno': 22,
          r'onMessageSent': 0,
          r'onMessageExpired': 0,
          r'onStateChanged': 0,
          r'onTransactionsFound': 0,
          r'onDetailsChanged': 0,
          r'onCustodiansChanged': 0,
          r'onUnconfirmedTransactionsChanged': 0,
          r'initializeMirror': 3,
          r'wallet': 3,
          r'wallet=': 0,
          r'transport': 3,
          r'publicKey': 3,
          r'publicKey=': 0,
          r'address': 3,
          r'address=': 0,
          r'walletType': 3,
          r'walletType=': 0,
          r'workchain': 3,
          r'workchain=': 0,
          r'custodians': 3,
          r'details': 3,
          r'contractState': 3,
          r'pendingTransactions': 3,
          r'pollingMethod': 3,
          r'unconfirmedTransactions': 3,
          r'fieldUpdatesStream': 3,
          r'onMessageSentStream': 3,
          r'onMessageExpiredStream': 3,
          r'onStateChangedStream': 3,
          r'onTransactionsFoundStream': 3,
          r'refreshDescription': 3,
          r'subscribe': 17,
          r'subscribeByAddress': 7,
          r'subscribeByExistingWallet': 18,
          r'appendSignatureToWalletV5R1Payload': 19,
          r'findExistingWallets': 26,
          r'getExistingWalletInfo': 7,
          r'getWalletCustodians': 7,
        },
      ),
    ],
    null,
    null,
    <Type>[
      prefix1.LedgerConnection,
      prefix2.GqlConnection,
      prefix3.ProtoConnection,
      prefix4.JrpcConnection,
      prefix5.Storage,
      prefix6.GenericContract,
      prefix7.TokenWallet,
      prefix8.JettonWallet,
      prefix9.TonWallet,
    ],
    9,
    {
      r'==': (dynamic instance) => (x) => instance == x,
      r'toString': (dynamic instance) => instance.toString,
      r'noSuchMethod': (dynamic instance) => instance.noSuchMethod,
      r'hashCode': (dynamic instance) => instance.hashCode,
      r'runtimeType': (dynamic instance) => instance.runtimeType,
      r'init': (dynamic instance) => instance.init,
      r'dispose': (dynamic instance) => instance.dispose,
      r'instanceHash': (dynamic instance) => instance.instanceHash,
      r'avoidCall': (dynamic instance) => instance.avoidCall,
      r'getPublicKey': (dynamic instance) => instance.getPublicKey,
      r'sign': (dynamic instance) => instance.sign,
      r'signTransaction': (dynamic instance) => instance.signTransaction,
      r'initializeMirror': (dynamic instance) => instance.initializeMirror,
      r'connection': (dynamic instance) => instance.connection,
      r'post': (dynamic instance) => instance.post,
      r'settings': (dynamic instance) => instance.settings,
      r'type': (dynamic instance) => instance.type,
      r'name': (dynamic instance) => instance.name,
      r'group': (dynamic instance) => instance.group,
      r'get': (dynamic instance) => instance.get,
      r'set': (dynamic instance) => instance.set,
      r'setUnchecked': (dynamic instance) => instance.setUnchecked,
      r'remove': (dynamic instance) => instance.remove,
      r'removeUnchecked': (dynamic instance) => instance.removeUnchecked,
      r'storage': (dynamic instance) => instance.storage,
      r'getContractState': (dynamic instance) => instance.getContractState,
      r'getPendingTransactions': (dynamic instance) =>
          instance.getPendingTransactions,
      r'getPollingMethod': (dynamic instance) => instance.getPollingMethod,
      r'executeTransactionLocally': (dynamic instance) =>
          instance.executeTransactionLocally,
      r'estimateFees': (dynamic instance) => instance.estimateFees,
      r'send': (dynamic instance) => instance.send,
      r'refresh': (dynamic instance) => instance.refresh,
      r'preloadTransactions': (dynamic instance) =>
          instance.preloadTransactions,
      r'handleBlock': (dynamic instance) => instance.handleBlock,
      r'onMessageSent': (dynamic instance) => instance.onMessageSent,
      r'onMessageExpired': (dynamic instance) => instance.onMessageExpired,
      r'onStateChanged': (dynamic instance) => instance.onStateChanged,
      r'onTransactionsFound': (dynamic instance) =>
          instance.onTransactionsFound,
      r'contract': (dynamic instance) => instance.contract,
      r'transport': (dynamic instance) => instance.transport,
      r'address': (dynamic instance) => instance.address,
      r'contractState': (dynamic instance) => instance.contractState,
      r'pendingTransactions': (dynamic instance) =>
          instance.pendingTransactions,
      r'pollingMethod': (dynamic instance) => instance.pollingMethod,
      r'fieldUpdatesStream': (dynamic instance) => instance.fieldUpdatesStream,
      r'onMessageSentStream': (dynamic instance) =>
          instance.onMessageSentStream,
      r'onMessageExpiredStream': (dynamic instance) =>
          instance.onMessageExpiredStream,
      r'onStateChangedStream': (dynamic instance) =>
          instance.onStateChangedStream,
      r'onTransactionsFoundStream': (dynamic instance) =>
          instance.onTransactionsFoundStream,
      r'refreshDescription': (dynamic instance) => instance.refreshDescription,
      r'estimateMinAttachedAmount': (dynamic instance) =>
          instance.estimateMinAttachedAmount,
      r'prepareTransfer': (dynamic instance) => instance.prepareTransfer,
      r'onBalanceChanged': (dynamic instance) => instance.onBalanceChanged,
      r'wallet': (dynamic instance) => instance.wallet,
      r'balance': (dynamic instance) => instance.balance,
      r'rootTokenContract': (dynamic instance) => instance.rootTokenContract,
      r'tokenAddress': (dynamic instance) => instance.tokenAddress,
      r'owner': (dynamic instance) => instance.owner,
      r'symbol': (dynamic instance) => instance.symbol,
      r'currency': (dynamic instance) => instance.currency,
      r'version': (dynamic instance) => instance.version,
      r'moneyBalance': (dynamic instance) => instance.moneyBalance,
      r'isTransactionsPreloaded': (dynamic instance) =>
          instance.isTransactionsPreloaded,
      r'onBalanceChangedStream': (dynamic instance) =>
          instance.onBalanceChangedStream,
      r'onMoneyBalanceChangedStream': (dynamic instance) =>
          instance.onMoneyBalanceChangedStream,
      r'getUnconfirmedTransactions': (dynamic instance) =>
          instance.getUnconfirmedTransactions,
      r'getCustodians': (dynamic instance) => instance.getCustodians,
      r'prepareDeploy': (dynamic instance) => instance.prepareDeploy,
      r'prepareDeployWithMultipleOwners': (dynamic instance) =>
          instance.prepareDeployWithMultipleOwners,
      r'prepareWalletV5R1MessageBody': (dynamic instance) =>
          instance.prepareWalletV5R1MessageBody,
      r'prepareNonexistWalletV5R1MessageBody': (dynamic instance) =>
          instance.prepareNonexistWalletV5R1MessageBody,
      r'prepareConfirmTransaction': (dynamic instance) =>
          instance.prepareConfirmTransaction,
      r'makeStateInit': (dynamic instance) => instance.makeStateInit,
      r'getWalletV5R1Seqno': (dynamic instance) => instance.getWalletV5R1Seqno,
      r'onDetailsChanged': (dynamic instance) => instance.onDetailsChanged,
      r'onCustodiansChanged': (dynamic instance) =>
          instance.onCustodiansChanged,
      r'onUnconfirmedTransactionsChanged': (dynamic instance) =>
          instance.onUnconfirmedTransactionsChanged,
      r'publicKey': (dynamic instance) => instance.publicKey,
      r'walletType': (dynamic instance) => instance.walletType,
      r'workchain': (dynamic instance) => instance.workchain,
      r'custodians': (dynamic instance) => instance.custodians,
      r'details': (dynamic instance) => instance.details,
      r'unconfirmedTransactions': (dynamic instance) =>
          instance.unconfirmedTransactions,
    },
    {
      r'connection=': (dynamic instance, value) => instance.connection = value,
      r'storage=': (dynamic instance, value) => instance.storage = value,
      r'contract=': (dynamic instance, value) => instance.contract = value,
      r'address=': (dynamic instance, value) => instance.address = value,
      r'wallet=': (dynamic instance, value) => instance.wallet = value,
      r'balance=': (dynamic instance, value) => instance.balance = value,
      r'tokenAddress=': (dynamic instance, value) =>
          instance.tokenAddress = value,
      r'owner=': (dynamic instance, value) => instance.owner = value,
      r'symbol=': (dynamic instance, value) => instance.symbol = value,
      r'currency=': (dynamic instance, value) => instance.currency = value,
      r'version=': (dynamic instance, value) => instance.version = value,
      r'publicKey=': (dynamic instance, value) => instance.publicKey = value,
      r'walletType=': (dynamic instance, value) => instance.walletType = value,
      r'workchain=': (dynamic instance, value) => instance.workchain = value,
    },
    null,
    [
      const [1, 0, null],
      const [3, 0, null],
      const [5, 0, null],
      const [0, 0, null],
      const [
        0,
        0,
        const [#client, #settings, #name, #group],
      ],
      const [
        0,
        0,
        const [#get, #set, #setUnchecked, #remove, #removeUnchecked],
      ],
      const [
        0,
        0,
        const [#key, #value],
      ],
      const [
        0,
        0,
        const [#transport, #address, #preloadTransactions],
      ],
      const [
        0,
        0,
        const [#signedMessage, #options],
      ],
      const [
        0,
        0,
        const [#fromLt],
      ],
      const [
        0,
        0,
        const [#block],
      ],
      const [
        0,
        0,
        const [#transport, #owner, #rootTokenContract, #preloadTransactions],
      ],
      const [
        0,
        0,
        const [#destination, #amount, #notifyReceiver, #payload],
      ],
      const [
        0,
        0,
        const [
          #destination,
          #amount,
          #notifyReceiver,
          #attachedAmount,
          #payload,
          #remainingGasTo,
        ],
      ],
      const [1, 1, null],
      const [
        0,
        0,
        const [#transport, #tokenRoot],
      ],
      const [
        0,
        0,
        const [
          #amount,
          #destination,
          #remainingGasTo,
          #callbackValue,
          #customPayload,
          #callbackPayload,
          #attachedAmount,
        ],
      ],
      const [
        0,
        0,
        const [#transport, #workchainId, #publicKey, #walletType],
      ],
      const [
        0,
        0,
        const [#transport, #existingWallet],
      ],
      const [
        0,
        0,
        const [#payload, #base64Signature],
      ],
      const [
        0,
        0,
        const [#expiration],
      ],
      const [
        0,
        0,
        const [#expiration, #custodians, #reqConfirms, #expirationTime],
      ],
      const [
        0,
        0,
        const [#contractState, #publicKey, #expiration, #params],
      ],
      const [
        0,
        0,
        const [
          #contractState,
          #publicKey,
          #expiration,
          #params,
          #isInternalFlow,
        ],
      ],
      const [
        0,
        0,
        const [#contractState, #publicKey, #transactionId, #expiration],
      ],
      const [
        0,
        0,
        const [#signedMessage, #executionOptions],
      ],
      const [
        0,
        0,
        const [#transport, #workchainId, #publicKey, #walletTypes],
      ],
    ],
  ),
};

final _memberSymbolMap = null;

void initializeReflectable() {
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
