// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.64.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:ffi' as ffi;

abstract class Api {
  /// Init logger
  Future<void> initLogger({required LogLevel level, required bool mobileLogger, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitLoggerConstMeta;

  /// Create log stream
  Stream<LogEntry> createLogStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta;

  Future<void> simpleLog({required String string, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleLogConstMeta;

  Future<void> simplePanic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimplePanicConstMeta;

  int simpleAdderSync({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleAdderSyncConstMeta;

  Future<int> simpleAdder({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleAdderConstMeta;

  Future<MyClass> newStaticMethodMyClass({required int a, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodMyClassConstMeta;

  Future<String> myFormatMethodMyClass({required MyClass that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMyFormatMethodMyClassConstMeta;
}

/// Log entry
class LogEntry {
  final int timeMillis;
  final LogLevel level;
  final String tag;
  final String msg;

  LogEntry({
    required this.timeMillis,
    required this.level,
    required this.tag,
    required this.msg,
  });
}

enum LogLevel {
  Trace,
  Debug,
  Info,
  Warn,
  Error,
}

class MyClass {
  final Api bridge;
  final int val;

  MyClass({
    required this.bridge,
    required this.val,
  });

  static Future<MyClass> newMyClass({required Api bridge, required int a, dynamic hint}) => bridge.newStaticMethodMyClass(a: a, hint: hint);

  Future<String> myFormat({dynamic hint}) => bridge.myFormatMethodMyClass(
        that: this,
      );
}

class ApiImpl implements Api {
  final ApiPlatform _platform;
  factory ApiImpl(ExternalLibrary dylib) => ApiImpl.raw(ApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory ApiImpl.wasm(FutureOr<WasmModule> module) => ApiImpl(module as ExternalLibrary);
  ApiImpl.raw(this._platform);
  Future<void> initLogger({required LogLevel level, required bool mobileLogger, dynamic hint}) {
    var arg0 = api2wire_log_level(level);
    var arg1 = mobileLogger;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_logger(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitLoggerConstMeta,
      argValues: [
        level,
        mobileLogger
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitLoggerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "init_logger",
        argNames: [
          "level",
          "mobileLogger"
        ],
      );

  Stream<LogEntry> createLogStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_log_stream(port_),
      parseSuccessData: _wire2api_log_entry,
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  Future<void> simpleLog({required String string, dynamic hint}) {
    var arg0 = _platform.api2wire_String(string);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_log(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimpleLogConstMeta,
      argValues: [
        string
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleLogConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_log",
        argNames: [
          "string"
        ],
      );

  Future<void> simplePanic({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_panic(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimplePanicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimplePanicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_panic",
        argNames: [],
      );

  int simpleAdderSync({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_simple_adder_sync(arg0, arg1),
      parseSuccessData: _wire2api_i32,
      constMeta: kSimpleAdderSyncConstMeta,
      argValues: [
        a,
        b
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleAdderSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_adder_sync",
        argNames: [
          "a",
          "b"
        ],
      );

  Future<int> simpleAdder({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_adder(port_, arg0, arg1),
      parseSuccessData: _wire2api_i32,
      constMeta: kSimpleAdderConstMeta,
      argValues: [
        a,
        b
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleAdderConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_adder",
        argNames: [
          "a",
          "b"
        ],
      );

  Future<MyClass> newStaticMethodMyClass({required int a, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new__static_method__MyClass(port_, arg0),
      parseSuccessData: (d) => _wire2api_my_class(d),
      constMeta: kNewStaticMethodMyClassConstMeta,
      argValues: [
        a
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodMyClassConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__MyClass",
        argNames: [
          "a"
        ],
      );

  Future<String> myFormatMethodMyClass({required MyClass that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_class(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_my_format__method__MyClass(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMyFormatMethodMyClassConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMyFormatMethodMyClassConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "my_format__method__MyClass",
        argNames: [
          "that"
        ],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  LogEntry _wire2api_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: _wire2api_i64(arr[0]),
      level: _wire2api_log_level(arr[1]),
      tag: _wire2api_String(arr[2]),
      msg: _wire2api_String(arr[3]),
    );
  }

  LogLevel _wire2api_log_level(dynamic raw) {
    return LogLevel.values[raw];
  }

  MyClass _wire2api_my_class(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyClass(
      bridge: this,
      val: _wire2api_i32(arr[0]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_log_level(LogLevel raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class ApiPlatform extends FlutterRustBridgeBase<ApiWire> {
  ApiPlatform(ffi.DynamicLibrary dylib) : super(ApiWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_MyClass> api2wire_box_autoadd_my_class(MyClass raw) {
    final ptr = inner.new_box_autoadd_my_class_0();
    _api_fill_to_wire_my_class(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_my_class(MyClass apiObj, ffi.Pointer<wire_MyClass> wireObj) {
    _api_fill_to_wire_my_class(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_my_class(MyClass apiObj, wire_MyClass wireObj) {
    wireObj.val = api2wire_i32(apiObj.val);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class ApiWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ApiWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ApiWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr = _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init_logger(
    int port_,
    int level,
    bool mobile_logger,
  ) {
    return _wire_init_logger(
      port_,
      level,
      mobile_logger,
    );
  }

  late final _wire_init_loggerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Bool)>>('wire_init_logger');
  late final _wire_init_logger = _wire_init_loggerPtr.asFunction<void Function(int, int, bool)>();

  void wire_create_log_stream(
    int port_,
  ) {
    return _wire_create_log_stream(
      port_,
    );
  }

  late final _wire_create_log_streamPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_log_stream');
  late final _wire_create_log_stream = _wire_create_log_streamPtr.asFunction<void Function(int)>();

  void wire_simple_log(
    int port_,
    ffi.Pointer<wire_uint_8_list> string,
  ) {
    return _wire_simple_log(
      port_,
      string,
    );
  }

  late final _wire_simple_logPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_simple_log');
  late final _wire_simple_log = _wire_simple_logPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_simple_panic(
    int port_,
  ) {
    return _wire_simple_panic(
      port_,
    );
  }

  late final _wire_simple_panicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_simple_panic');
  late final _wire_simple_panic = _wire_simple_panicPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_simple_adder_sync(
    int a,
    int b,
  ) {
    return _wire_simple_adder_sync(
      a,
      b,
    );
  }

  late final _wire_simple_adder_syncPtr = _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Int32, ffi.Int32)>>('wire_simple_adder_sync');
  late final _wire_simple_adder_sync = _wire_simple_adder_syncPtr.asFunction<WireSyncReturn Function(int, int)>();

  void wire_simple_adder(
    int port_,
    int a,
    int b,
  ) {
    return _wire_simple_adder(
      port_,
      a,
      b,
    );
  }

  late final _wire_simple_adderPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int32)>>('wire_simple_adder');
  late final _wire_simple_adder = _wire_simple_adderPtr.asFunction<void Function(int, int, int)>();

  void wire_new__static_method__MyClass(
    int port_,
    int a,
  ) {
    return _wire_new__static_method__MyClass(
      port_,
      a,
    );
  }

  late final _wire_new__static_method__MyClassPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_new__static_method__MyClass');
  late final _wire_new__static_method__MyClass = _wire_new__static_method__MyClassPtr.asFunction<void Function(int, int)>();

  void wire_my_format__method__MyClass(
    int port_,
    ffi.Pointer<wire_MyClass> that,
  ) {
    return _wire_my_format__method__MyClass(
      port_,
      that,
    );
  }

  late final _wire_my_format__method__MyClassPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_MyClass>)>>('wire_my_format__method__MyClass');
  late final _wire_my_format__method__MyClass = _wire_my_format__method__MyClassPtr.asFunction<void Function(int, ffi.Pointer<wire_MyClass>)>();

  ffi.Pointer<wire_MyClass> new_box_autoadd_my_class_0() {
    return _new_box_autoadd_my_class_0();
  }

  late final _new_box_autoadd_my_class_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_MyClass> Function()>>('new_box_autoadd_my_class_0');
  late final _new_box_autoadd_my_class_0 = _new_box_autoadd_my_class_0Ptr.asFunction<ffi.Pointer<wire_MyClass> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr = _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_MyClass extends ffi.Struct {
  @ffi.Int32()
  external int val;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
