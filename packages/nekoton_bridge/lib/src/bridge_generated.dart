// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.68.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

part 'bridge_generated.freezed.dart';

abstract class NekotonBridge {
  ///----------------------------
  /// CONTENT OF src/nekoton_wrapper/crypto/crypto_api.rs
  ///----------------------------
  /// Check signature by publicKey and data hash
  Future<bool> verifySignature(
      {required String publicKey,
      required String dataHash,
      required String signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifySignatureConstMeta;

  ///----------------------------
  /// CONTENT OF src/nekoton_wrapper/crypto/mnemonic/mnemonic_api.rs
  ///----------------------------
  /// Generate seed phrase by specified mnemonic type
  Future<GeneratedKeyG> ntGenerateKey(
      {required MnemonicType accountType, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNtGenerateKeyConstMeta;

  /// Get hints for input part of word of seed phrase to get possible words
  /// input: acco
  /// returns [account, accommodate, ...]
  Future<List<String>> ntGetHints({required String input, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNtGetHintsConstMeta;

  /// Generate public and secret keys from seed phrase and mnemonic type
  /// Returns json {'public': '...', 'secret': '...'}
  /// or throws Exception
  Future<String> ntDeriveFromPhrase(
      {required String phrase,
      required MnemonicType mnemonicType,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNtDeriveFromPhraseConstMeta;

  ///----------------------------
  /// CONTENT OF src/nekoton_wrapper/helpers/abi_api.rs
  ///----------------------------
  /// Check if public key is correct.
  /// If no - throws error, if ok - return true
  Future<bool> checkPublicKey({required String publicKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCheckPublicKeyConstMeta;

  /// Run contract local.
  /// Return json-encoded ExecutionOutput or throws error.
  ///
  /// input - is json-encoded AbiToken
  Future<String> runLocal(
      {required String accountStuffBoc,
      required String contractAbi,
      required String method,
      required String input,
      required bool responsible,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunLocalConstMeta;

  /// Get address of tvc and contract_abi.
  /// Returns list of [address, state_init] or throws error
  Future<List<String>> getExpectedAddress(
      {required String tvc,
      required String contractAbi,
      required int workchainId,
      String? publicKey,
      required String initData,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetExpectedAddressConstMeta;

  /// Returns base64-encoded body that was encoded or throws error
  Future<String> encodeInternalInput(
      {required String contractAbi,
      required String method,
      required String input,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncodeInternalInputConstMeta;

  /// Returns json-encoded SignedMessage from nekoton or throws error
  Future<String> createExternalMessageWithoutSignature(
      {required String dst,
      required String contractAbi,
      required String method,
      String? stateInit,
      required String input,
      required int timeout,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCreateExternalMessageWithoutSignatureConstMeta;

  /// Create external unsigned message that can be listened and handled or throws error
  Future<UnsignedMessageImpl> createExternalMessage(
      {required String dst,
      required String contractAbi,
      required String method,
      String? stateInit,
      required String input,
      required String publicKey,
      required int timeout,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateExternalMessageConstMeta;

  /// Parse payload and return json-encoded KnownPayload or throws error
  Future<String> parseKnownPayload({required String payload, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseKnownPayloadConstMeta;

  /// Decode input data and return json-encoded DecodedInput or throws error
  Future<String> decodeInput(
      {required String messageBody,
      required String contractAbi,
      String? method,
      required bool internal,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeInputConstMeta;

  /// Decode input data and return json-encoded DecodedEvent or throws error
  Future<String> decodeEvent(
      {required String messageBody,
      required String contractAbi,
      String? event,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeEventConstMeta;

  /// Decode output data and return json-encoded DecodedOutput or throws error
  Future<String> decodeOutput(
      {required String messageBody,
      required String contractAbi,
      String? method,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeOutputConstMeta;

  /// Decode transaction and return json-encoded DecodedTransaction or throws error
  Future<String> decodeTransaction(
      {required String transaction,
      required String contractAbi,
      String? method,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeTransactionConstMeta;

  /// Decode events of transaction and return json-encoded DecodedEvent or throws error
  Future<String> decodeTransactionEvents(
      {required String transaction, required String contractAbi, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeTransactionEventsConstMeta;

  /// Returns hash of decoded boc or throws error
  Future<String> getBocHash({required String boc, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBocHashConstMeta;

  /// Return base64 encoded bytes of tokens or throws error
  Future<String> packIntoCell(
      {required String params, required String tokens, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPackIntoCellConstMeta;

  /// Parse list of params and return json-encoded Tokens or throws error
  Future<String> unpackFromCell(
      {required String params,
      required String boc,
      required bool allowPartial,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUnpackFromCellConstMeta;

  ///----------------------------
  /// CONTENT OF src/utils/api.rs
  ///----------------------------
  /// Init utils
  Future<void> initLogger(
      {required LogLevel level, required bool mobileLogger, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitLoggerConstMeta;

  /// Create log stream
  Stream<LogEntry> createLogStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta;

  /// Init caller
  Stream<DartCallStubRegistred> initCaller({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitCallerConstMeta;

  /// Callback functions for returning Dart method result
  Future<void> callSendResult(
      {required String id, required DynamicValue value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCallSendResultConstMeta;

  Future<void> simpleLog({required String string, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleLogConstMeta;

  Future<void> simplePanic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimplePanicConstMeta;

  int simpleAdderSync({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleAdderSyncConstMeta;

  Future<int> simpleAdder({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleAdderConstMeta;

  Future<DynamicValue> stubDv({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStubDvConstMeta;

  Future<DartCallStub> stubDcs({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStubDcsConstMeta;

  Future<void> simpleCallDart({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleCallDartConstMeta;

  Future<void> stubCallDart({required DartCallStub stub, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStubCallDartConstMeta;

  Future<void> simpleCallFunc0({required bool needResult, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc0ConstMeta;

  Future<void> simpleCallFunc1({required bool needResult, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc1ConstMeta;

  Future<void> simpleCallFunc2({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc2ConstMeta;

  Future<void> refreshTimeoutMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRefreshTimeoutMethodUnsignedMessageImplConstMeta;

  /// Return current expiration timestamp of UnsignedMessage
  Future<int> expireAtMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kExpireAtMethodUnsignedMessageImplConstMeta;

  /// Returns base64 encoded hash string of UnsignedMessage
  Future<String> hashMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHashMethodUnsignedMessageImplConstMeta;

  Future<String> signMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that,
      required String signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignMethodUnsignedMessageImplConstMeta;

  Future<JrpcConnectionImpl> newStaticMethodJrpcConnectionImpl(
      {required String instanceHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodJrpcConnectionImplConstMeta;

  Future<GqlConnectionImpl> newStaticMethodGqlConnectionImpl(
      {required bool isLocal, required String instanceHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodGqlConnectionImplConstMeta;

  Future<LedgerConnectionImpl> newStaticMethodLedgerConnectionImpl(
      {required String instanceHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodLedgerConnectionImplConstMeta;

  Future<StorageImpl> newStaticMethodStorageImpl(
      {required String instanceHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodStorageImplConstMeta;

  Future<MyClass> newStaticMethodMyClass({required int a, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodMyClassConstMeta;

  Future<String> myFormatMethodMyClass({required MyClass that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMyFormatMethodMyClassConstMeta;

  Future<CallerTestClass> newStaticMethodCallerTestClass(
      {required String instanceHash, required int value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodCallerTestClassConstMeta;

  Future<void> callSomeFuncMethodCallerTestClass(
      {required CallerTestClass that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallSomeFuncMethodCallerTestClassConstMeta;

  DropFnType get dropOpaqueBoxUnsignedMessageBoxTrait;
  ShareFnType get shareOpaqueBoxUnsignedMessageBoxTrait;
  OpaqueTypeFinalizer get BoxUnsignedMessageBoxTraitFinalizer;
}

@sealed
class BoxUnsignedMessageBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  BoxUnsignedMessageBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueBoxUnsignedMessageBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueBoxUnsignedMessageBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.BoxUnsignedMessageBoxTraitFinalizer;
}

class CallerTestClass {
  final NekotonBridge bridge;
  final String instanceHash;
  final int value;

  const CallerTestClass({
    required this.bridge,
    required this.instanceHash,
    required this.value,
  });

  static Future<CallerTestClass> newCallerTestClass(
          {required NekotonBridge bridge,
          required String instanceHash,
          required int value,
          dynamic hint}) =>
      bridge.newStaticMethodCallerTestClass(
          instanceHash: instanceHash, value: value, hint: hint);

  Future<void> callSomeFunc({dynamic hint}) =>
      bridge.callSomeFuncMethodCallerTestClass(
        that: this,
      );
}

/// Instruction for dart side that should call some method of some class instance.
class DartCallStub {
  /// Hash is unique id for any instance of any class, used to identify where to call method
  final String instanceHash;

  /// name of function that should be called
  final String fnName;

  /// List of positional arguments in function
  final List<DynamicValue> args;

  /// List of named arguments of function, empty if no such arguments
  final List<DynamicNamedValue> namedArgs;

  const DartCallStub({
    required this.instanceHash,
    required this.fnName,
    required this.args,
    required this.namedArgs,
  });
}

/// Registered call of dart function that is tracked in rust side
class DartCallStubRegistred {
  /// Unique identifier of call of some method
  final String? id;

  /// Call itself
  final DartCallStub stub;

  const DartCallStubRegistred({
    this.id,
    required this.stub,
  });
}

/// Value of function call that should be placed in dart as named parameter.
/// EX: void funcCall({int? valueName}) -> DynamicNamedValue(name: "valueName", value: DynamicValue::U32(10))
class DynamicNamedValue {
  final String name;
  final DynamicValue? value;

  const DynamicNamedValue({
    required this.name,
    this.value,
  });
}

@freezed
class DynamicValue with _$DynamicValue {
  const factory DynamicValue.u16(
    int field0,
  ) = DynamicValue_U16;
  const factory DynamicValue.u32(
    int field0,
  ) = DynamicValue_U32;
  const factory DynamicValue.i32(
    int field0,
  ) = DynamicValue_I32;
  const factory DynamicValue.u64(
    int field0,
  ) = DynamicValue_U64;
  const factory DynamicValue.i64(
    int field0,
  ) = DynamicValue_I64;
  const factory DynamicValue.f32(
    double field0,
  ) = DynamicValue_F32;
  const factory DynamicValue.f64(
    double field0,
  ) = DynamicValue_F64;
  const factory DynamicValue.string(
    String field0,
  ) = DynamicValue_String;
  const factory DynamicValue.megaStruct(
    String field0,
  ) = DynamicValue_MegaStruct;
  const factory DynamicValue.error(
    ErrorCode field0,
  ) = DynamicValue_Error;
  const factory DynamicValue.none() = DynamicValue_None;
}

enum ErrorCode {
  Ok,
  Network,
  Generic,
  InvokeException,
}

/// Wrapper struct above GeneratedKey with suitable type for generation
class GeneratedKeyG {
  final List<String> words;
  final MnemonicType accountType;

  const GeneratedKeyG({
    required this.words,
    required this.accountType,
  });
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/external/gql_connection_api.rs
///----------------------------
/// Implementation of nekoton's GqlConnection
class GqlConnectionImpl {
  final NekotonBridge bridge;
  final bool isLocal;
  final String instanceHash;

  const GqlConnectionImpl({
    required this.bridge,
    required this.isLocal,
    required this.instanceHash,
  });

  static Future<GqlConnectionImpl> newGqlConnectionImpl(
          {required NekotonBridge bridge,
          required bool isLocal,
          required String instanceHash,
          dynamic hint}) =>
      bridge.newStaticMethodGqlConnectionImpl(
          isLocal: isLocal, instanceHash: instanceHash, hint: hint);
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/external/jrpc_connection_api.rs
///----------------------------
/// Implementation of nekoton's JrpcConnection
class JrpcConnectionImpl {
  final NekotonBridge bridge;
  final String instanceHash;

  const JrpcConnectionImpl({
    required this.bridge,
    required this.instanceHash,
  });

  static Future<JrpcConnectionImpl> newJrpcConnectionImpl(
          {required NekotonBridge bridge,
          required String instanceHash,
          dynamic hint}) =>
      bridge.newStaticMethodJrpcConnectionImpl(
          instanceHash: instanceHash, hint: hint);
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/external/ledger_connection_api.rs
///----------------------------
/// Implementation of nekoton's LedgerConnection
class LedgerConnectionImpl {
  final NekotonBridge bridge;
  final String instanceHash;

  const LedgerConnectionImpl({
    required this.bridge,
    required this.instanceHash,
  });

  static Future<LedgerConnectionImpl> newLedgerConnectionImpl(
          {required NekotonBridge bridge,
          required String instanceHash,
          dynamic hint}) =>
      bridge.newStaticMethodLedgerConnectionImpl(
          instanceHash: instanceHash, hint: hint);
}

/// Log entry
class LogEntry {
  final int timeMillis;
  final LogLevel level;
  final String tag;
  final String msg;

  const LogEntry({
    required this.timeMillis,
    required this.level,
    required this.tag,
    required this.msg,
  });
}

enum LogLevel {
  Trace,
  Debug,
  Info,
  Warn,
  Error,
}

@freezed
class MnemonicType with _$MnemonicType {
  const factory MnemonicType.legacy() = MnemonicType_Legacy;
  const factory MnemonicType.labs(
    int field0,
  ) = MnemonicType_Labs;
}

class MyClass {
  final NekotonBridge bridge;
  final int val;

  const MyClass({
    required this.bridge,
    required this.val,
  });

  static Future<MyClass> newMyClass(
          {required NekotonBridge bridge, required int a, dynamic hint}) =>
      bridge.newStaticMethodMyClass(a: a, hint: hint);

  Future<String> myFormat({dynamic hint}) => bridge.myFormatMethodMyClass(
        that: this,
      );
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/external/storage_api.rs
///----------------------------
/// Implementation of nekoton's Storage
class StorageImpl {
  final NekotonBridge bridge;
  final String instanceHash;

  const StorageImpl({
    required this.bridge,
    required this.instanceHash,
  });

  static Future<StorageImpl> newStorageImpl(
          {required NekotonBridge bridge,
          required String instanceHash,
          dynamic hint}) =>
      bridge.newStaticMethodStorageImpl(instanceHash: instanceHash, hint: hint);
}

/// This struct creates only in rust side and describes UnsignedMessage
class UnsignedMessageImpl {
  final NekotonBridge bridge;
  final BoxUnsignedMessageBoxTrait innerMessage;

  const UnsignedMessageImpl({
    required this.bridge,
    required this.innerMessage,
  });

  Future<void> refreshTimeout({dynamic hint}) =>
      bridge.refreshTimeoutMethodUnsignedMessageImpl(
        that: this,
      );

  /// Return current expiration timestamp of UnsignedMessage
  Future<int> expireAt({dynamic hint}) =>
      bridge.expireAtMethodUnsignedMessageImpl(
        that: this,
      );

  /// Returns base64 encoded hash string of UnsignedMessage
  Future<String> hash({dynamic hint}) => bridge.hashMethodUnsignedMessageImpl(
        that: this,
      );

  Future<String> sign({required String signature, dynamic hint}) =>
      bridge.signMethodUnsignedMessageImpl(
        that: this,
        signature: signature,
      );
}

class NekotonBridgeImpl implements NekotonBridge {
  final NekotonBridgePlatform _platform;
  factory NekotonBridgeImpl(ExternalLibrary dylib) =>
      NekotonBridgeImpl.raw(NekotonBridgePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NekotonBridgeImpl.wasm(FutureOr<WasmModule> module) =>
      NekotonBridgeImpl(module as ExternalLibrary);
  NekotonBridgeImpl.raw(this._platform);
  Future<bool> verifySignature(
      {required String publicKey,
      required String dataHash,
      required String signature,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(publicKey);
    var arg1 = _platform.api2wire_String(dataHash);
    var arg2 = _platform.api2wire_String(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_verify_signature(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      constMeta: kVerifySignatureConstMeta,
      argValues: [publicKey, dataHash, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVerifySignatureConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "verify_signature",
        argNames: ["publicKey", "dataHash", "signature"],
      );

  Future<GeneratedKeyG> ntGenerateKey(
      {required MnemonicType accountType, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mnemonic_type(accountType);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_nt_generate_key(port_, arg0),
      parseSuccessData: _wire2api_generated_key_g,
      constMeta: kNtGenerateKeyConstMeta,
      argValues: [accountType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNtGenerateKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "nt_generate_key",
        argNames: ["accountType"],
      );

  Future<List<String>> ntGetHints({required String input, dynamic hint}) {
    var arg0 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_nt_get_hints(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kNtGetHintsConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNtGetHintsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "nt_get_hints",
        argNames: ["input"],
      );

  Future<String> ntDeriveFromPhrase(
      {required String phrase,
      required MnemonicType mnemonicType,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(phrase);
    var arg1 = _platform.api2wire_box_autoadd_mnemonic_type(mnemonicType);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_nt_derive_from_phrase(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kNtDeriveFromPhraseConstMeta,
      argValues: [phrase, mnemonicType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNtDeriveFromPhraseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "nt_derive_from_phrase",
        argNames: ["phrase", "mnemonicType"],
      );

  Future<bool> checkPublicKey({required String publicKey, dynamic hint}) {
    var arg0 = _platform.api2wire_String(publicKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_check_public_key(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kCheckPublicKeyConstMeta,
      argValues: [publicKey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCheckPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "check_public_key",
        argNames: ["publicKey"],
      );

  Future<String> runLocal(
      {required String accountStuffBoc,
      required String contractAbi,
      required String method,
      required String input,
      required bool responsible,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(accountStuffBoc);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_String(method);
    var arg3 = _platform.api2wire_String(input);
    var arg4 = responsible;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_run_local(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_String,
      constMeta: kRunLocalConstMeta,
      argValues: [accountStuffBoc, contractAbi, method, input, responsible],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunLocalConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "run_local",
        argNames: [
          "accountStuffBoc",
          "contractAbi",
          "method",
          "input",
          "responsible"
        ],
      );

  Future<List<String>> getExpectedAddress(
      {required String tvc,
      required String contractAbi,
      required int workchainId,
      String? publicKey,
      required String initData,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(tvc);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = api2wire_i8(workchainId);
    var arg3 = _platform.api2wire_opt_String(publicKey);
    var arg4 = _platform.api2wire_String(initData);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_expected_address(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetExpectedAddressConstMeta,
      argValues: [tvc, contractAbi, workchainId, publicKey, initData],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetExpectedAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_expected_address",
        argNames: [
          "tvc",
          "contractAbi",
          "workchainId",
          "publicKey",
          "initData"
        ],
      );

  Future<String> encodeInternalInput(
      {required String contractAbi,
      required String method,
      required String input,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(contractAbi);
    var arg1 = _platform.api2wire_String(method);
    var arg2 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_encode_internal_input(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kEncodeInternalInputConstMeta,
      argValues: [contractAbi, method, input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEncodeInternalInputConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encode_internal_input",
        argNames: ["contractAbi", "method", "input"],
      );

  Future<String> createExternalMessageWithoutSignature(
      {required String dst,
      required String contractAbi,
      required String method,
      String? stateInit,
      required String input,
      required int timeout,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(dst);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_String(method);
    var arg3 = _platform.api2wire_opt_String(stateInit);
    var arg4 = _platform.api2wire_String(input);
    var arg5 = api2wire_u32(timeout);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_create_external_message_without_signature(
              port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_String,
      constMeta: kCreateExternalMessageWithoutSignatureConstMeta,
      argValues: [dst, contractAbi, method, stateInit, input, timeout],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateExternalMessageWithoutSignatureConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_external_message_without_signature",
            argNames: [
              "dst",
              "contractAbi",
              "method",
              "stateInit",
              "input",
              "timeout"
            ],
          );

  Future<UnsignedMessageImpl> createExternalMessage(
      {required String dst,
      required String contractAbi,
      required String method,
      String? stateInit,
      required String input,
      required String publicKey,
      required int timeout,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(dst);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_String(method);
    var arg3 = _platform.api2wire_opt_String(stateInit);
    var arg4 = _platform.api2wire_String(input);
    var arg5 = _platform.api2wire_String(publicKey);
    var arg6 = api2wire_u32(timeout);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_external_message(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: (d) => _wire2api_unsigned_message_impl(d),
      constMeta: kCreateExternalMessageConstMeta,
      argValues: [
        dst,
        contractAbi,
        method,
        stateInit,
        input,
        publicKey,
        timeout
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateExternalMessageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_external_message",
        argNames: [
          "dst",
          "contractAbi",
          "method",
          "stateInit",
          "input",
          "publicKey",
          "timeout"
        ],
      );

  Future<String> parseKnownPayload({required String payload, dynamic hint}) {
    var arg0 = _platform.api2wire_String(payload);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_parse_known_payload(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kParseKnownPayloadConstMeta,
      argValues: [payload],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseKnownPayloadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_known_payload",
        argNames: ["payload"],
      );

  Future<String> decodeInput(
      {required String messageBody,
      required String contractAbi,
      String? method,
      required bool internal,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(messageBody);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_opt_String(method);
    var arg3 = internal;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_decode_input(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kDecodeInputConstMeta,
      argValues: [messageBody, contractAbi, method, internal],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeInputConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_input",
        argNames: ["messageBody", "contractAbi", "method", "internal"],
      );

  Future<String> decodeEvent(
      {required String messageBody,
      required String contractAbi,
      String? event,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(messageBody);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_opt_String(event);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_decode_event(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kDecodeEventConstMeta,
      argValues: [messageBody, contractAbi, event],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeEventConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_event",
        argNames: ["messageBody", "contractAbi", "event"],
      );

  Future<String> decodeOutput(
      {required String messageBody,
      required String contractAbi,
      String? method,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(messageBody);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_opt_String(method);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_decode_output(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kDecodeOutputConstMeta,
      argValues: [messageBody, contractAbi, method],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeOutputConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_output",
        argNames: ["messageBody", "contractAbi", "method"],
      );

  Future<String> decodeTransaction(
      {required String transaction,
      required String contractAbi,
      String? method,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(transaction);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_opt_String(method);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_decode_transaction(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kDecodeTransactionConstMeta,
      argValues: [transaction, contractAbi, method],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeTransactionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_transaction",
        argNames: ["transaction", "contractAbi", "method"],
      );

  Future<String> decodeTransactionEvents(
      {required String transaction,
      required String contractAbi,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(transaction);
    var arg1 = _platform.api2wire_String(contractAbi);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_decode_transaction_events(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kDecodeTransactionEventsConstMeta,
      argValues: [transaction, contractAbi],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeTransactionEventsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_transaction_events",
        argNames: ["transaction", "contractAbi"],
      );

  Future<String> getBocHash({required String boc, dynamic hint}) {
    var arg0 = _platform.api2wire_String(boc);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_boc_hash(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGetBocHashConstMeta,
      argValues: [boc],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBocHashConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_boc_hash",
        argNames: ["boc"],
      );

  Future<String> packIntoCell(
      {required String params, required String tokens, dynamic hint}) {
    var arg0 = _platform.api2wire_String(params);
    var arg1 = _platform.api2wire_String(tokens);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_pack_into_cell(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kPackIntoCellConstMeta,
      argValues: [params, tokens],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPackIntoCellConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pack_into_cell",
        argNames: ["params", "tokens"],
      );

  Future<String> unpackFromCell(
      {required String params,
      required String boc,
      required bool allowPartial,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(params);
    var arg1 = _platform.api2wire_String(boc);
    var arg2 = allowPartial;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_unpack_from_cell(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kUnpackFromCellConstMeta,
      argValues: [params, boc, allowPartial],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnpackFromCellConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "unpack_from_cell",
        argNames: ["params", "boc", "allowPartial"],
      );

  Future<void> initLogger(
      {required LogLevel level, required bool mobileLogger, dynamic hint}) {
    var arg0 = api2wire_log_level(level);
    var arg1 = mobileLogger;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_logger(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitLoggerConstMeta,
      argValues: [level, mobileLogger],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitLoggerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_logger",
        argNames: ["level", "mobileLogger"],
      );

  Stream<LogEntry> createLogStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_log_stream(port_),
      parseSuccessData: _wire2api_log_entry,
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  Stream<DartCallStubRegistred> initCaller({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_caller(port_),
      parseSuccessData: _wire2api_dart_call_stub_registred,
      constMeta: kInitCallerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitCallerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_caller",
        argNames: [],
      );

  Future<void> callSendResult(
      {required String id, required DynamicValue value, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_box_autoadd_dynamic_value(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_call_send_result(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kCallSendResultConstMeta,
      argValues: [id, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCallSendResultConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "call_send_result",
        argNames: ["id", "value"],
      );

  Future<void> simpleLog({required String string, dynamic hint}) {
    var arg0 = _platform.api2wire_String(string);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_log(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimpleLogConstMeta,
      argValues: [string],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleLogConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_log",
        argNames: ["string"],
      );

  Future<void> simplePanic({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_panic(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimplePanicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimplePanicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_panic",
        argNames: [],
      );

  int simpleAdderSync({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_simple_adder_sync(arg0, arg1),
      parseSuccessData: _wire2api_i32,
      constMeta: kSimpleAdderSyncConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleAdderSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_adder_sync",
        argNames: ["a", "b"],
      );

  Future<int> simpleAdder({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_adder(port_, arg0, arg1),
      parseSuccessData: _wire2api_i32,
      constMeta: kSimpleAdderConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleAdderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_adder",
        argNames: ["a", "b"],
      );

  Future<DynamicValue> stubDv({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stub_dv(port_),
      parseSuccessData: _wire2api_dynamic_value,
      constMeta: kStubDvConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStubDvConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stub_dv",
        argNames: [],
      );

  Future<DartCallStub> stubDcs({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stub_dcs(port_),
      parseSuccessData: _wire2api_dart_call_stub,
      constMeta: kStubDcsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStubDcsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stub_dcs",
        argNames: [],
      );

  Future<void> simpleCallDart({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_call_dart(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimpleCallDartConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleCallDartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_call_dart",
        argNames: [],
      );

  Future<void> stubCallDart({required DartCallStub stub, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_dart_call_stub(stub);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stub_call_dart(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kStubCallDartConstMeta,
      argValues: [stub],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStubCallDartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stub_call_dart",
        argNames: ["stub"],
      );

  Future<void> simpleCallFunc0({required bool needResult, dynamic hint}) {
    var arg0 = needResult;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_call_func0(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimpleCallFunc0ConstMeta,
      argValues: [needResult],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc0ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_call_func0",
        argNames: ["needResult"],
      );

  Future<void> simpleCallFunc1({required bool needResult, dynamic hint}) {
    var arg0 = needResult;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_call_func1(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimpleCallFunc1ConstMeta,
      argValues: [needResult],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc1ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_call_func1",
        argNames: ["needResult"],
      );

  Future<void> simpleCallFunc2({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_call_func2(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimpleCallFunc2ConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc2ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_call_func2",
        argNames: [],
      );

  Future<void> refreshTimeoutMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_unsigned_message_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_refresh_timeout__method__UnsignedMessageImpl(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kRefreshTimeoutMethodUnsignedMessageImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRefreshTimeoutMethodUnsignedMessageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "refresh_timeout__method__UnsignedMessageImpl",
            argNames: ["that"],
          );

  Future<int> expireAtMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_unsigned_message_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_expire_at__method__UnsignedMessageImpl(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kExpireAtMethodUnsignedMessageImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kExpireAtMethodUnsignedMessageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "expire_at__method__UnsignedMessageImpl",
            argNames: ["that"],
          );

  Future<String> hashMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_unsigned_message_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_hash__method__UnsignedMessageImpl(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kHashMethodUnsignedMessageImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHashMethodUnsignedMessageImplConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hash__method__UnsignedMessageImpl",
        argNames: ["that"],
      );

  Future<String> signMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that,
      required String signature,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_unsigned_message_impl(that);
    var arg1 = _platform.api2wire_String(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_sign__method__UnsignedMessageImpl(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSignMethodUnsignedMessageImplConstMeta,
      argValues: [that, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignMethodUnsignedMessageImplConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign__method__UnsignedMessageImpl",
        argNames: ["that", "signature"],
      );

  Future<JrpcConnectionImpl> newStaticMethodJrpcConnectionImpl(
      {required String instanceHash, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__JrpcConnectionImpl(port_, arg0),
      parseSuccessData: (d) => _wire2api_jrpc_connection_impl(d),
      constMeta: kNewStaticMethodJrpcConnectionImplConstMeta,
      argValues: [instanceHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodJrpcConnectionImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__JrpcConnectionImpl",
            argNames: ["instanceHash"],
          );

  Future<GqlConnectionImpl> newStaticMethodGqlConnectionImpl(
      {required bool isLocal, required String instanceHash, dynamic hint}) {
    var arg0 = isLocal;
    var arg1 = _platform.api2wire_String(instanceHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__GqlConnectionImpl(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_gql_connection_impl(d),
      constMeta: kNewStaticMethodGqlConnectionImplConstMeta,
      argValues: [isLocal, instanceHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodGqlConnectionImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__GqlConnectionImpl",
            argNames: ["isLocal", "instanceHash"],
          );

  Future<LedgerConnectionImpl> newStaticMethodLedgerConnectionImpl(
      {required String instanceHash, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__LedgerConnectionImpl(port_, arg0),
      parseSuccessData: (d) => _wire2api_ledger_connection_impl(d),
      constMeta: kNewStaticMethodLedgerConnectionImplConstMeta,
      argValues: [instanceHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodLedgerConnectionImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__LedgerConnectionImpl",
            argNames: ["instanceHash"],
          );

  Future<StorageImpl> newStaticMethodStorageImpl(
      {required String instanceHash, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new__static_method__StorageImpl(port_, arg0),
      parseSuccessData: (d) => _wire2api_storage_impl(d),
      constMeta: kNewStaticMethodStorageImplConstMeta,
      argValues: [instanceHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodStorageImplConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__StorageImpl",
        argNames: ["instanceHash"],
      );

  Future<MyClass> newStaticMethodMyClass({required int a, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new__static_method__MyClass(port_, arg0),
      parseSuccessData: (d) => _wire2api_my_class(d),
      constMeta: kNewStaticMethodMyClassConstMeta,
      argValues: [a],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodMyClassConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__MyClass",
        argNames: ["a"],
      );

  Future<String> myFormatMethodMyClass({required MyClass that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_class(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_my_format__method__MyClass(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMyFormatMethodMyClassConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMyFormatMethodMyClassConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "my_format__method__MyClass",
        argNames: ["that"],
      );

  Future<CallerTestClass> newStaticMethodCallerTestClass(
      {required String instanceHash, required int value, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    var arg1 = api2wire_i32(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__CallerTestClass(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_caller_test_class(d),
      constMeta: kNewStaticMethodCallerTestClassConstMeta,
      argValues: [instanceHash, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodCallerTestClassConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__CallerTestClass",
        argNames: ["instanceHash", "value"],
      );

  Future<void> callSomeFuncMethodCallerTestClass(
      {required CallerTestClass that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_caller_test_class(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_call_some_func__method__CallerTestClass(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kCallSomeFuncMethodCallerTestClassConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallSomeFuncMethodCallerTestClassConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_some_func__method__CallerTestClass",
            argNames: ["that"],
          );

  DropFnType get dropOpaqueBoxUnsignedMessageBoxTrait =>
      _platform.inner.drop_opaque_BoxUnsignedMessageBoxTrait;
  ShareFnType get shareOpaqueBoxUnsignedMessageBoxTrait =>
      _platform.inner.share_opaque_BoxUnsignedMessageBoxTrait;
  OpaqueTypeFinalizer get BoxUnsignedMessageBoxTraitFinalizer =>
      _platform.BoxUnsignedMessageBoxTraitFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  BoxUnsignedMessageBoxTrait _wire2api_BoxUnsignedMessageBoxTrait(dynamic raw) {
    return BoxUnsignedMessageBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  DynamicValue _wire2api_box_autoadd_dynamic_value(dynamic raw) {
    return _wire2api_dynamic_value(raw);
  }

  CallerTestClass _wire2api_caller_test_class(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CallerTestClass(
      bridge: this,
      instanceHash: _wire2api_String(arr[0]),
      value: _wire2api_i32(arr[1]),
    );
  }

  DartCallStub _wire2api_dart_call_stub(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DartCallStub(
      instanceHash: _wire2api_String(arr[0]),
      fnName: _wire2api_String(arr[1]),
      args: _wire2api_list_dynamic_value(arr[2]),
      namedArgs: _wire2api_list_dynamic_named_value(arr[3]),
    );
  }

  DartCallStubRegistred _wire2api_dart_call_stub_registred(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartCallStubRegistred(
      id: _wire2api_opt_String(arr[0]),
      stub: _wire2api_dart_call_stub(arr[1]),
    );
  }

  DynamicNamedValue _wire2api_dynamic_named_value(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DynamicNamedValue(
      name: _wire2api_String(arr[0]),
      value: _wire2api_opt_box_autoadd_dynamic_value(arr[1]),
    );
  }

  DynamicValue _wire2api_dynamic_value(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DynamicValue_U16(
          _wire2api_u16(raw[1]),
        );
      case 1:
        return DynamicValue_U32(
          _wire2api_u32(raw[1]),
        );
      case 2:
        return DynamicValue_I32(
          _wire2api_i32(raw[1]),
        );
      case 3:
        return DynamicValue_U64(
          _wire2api_u64(raw[1]),
        );
      case 4:
        return DynamicValue_I64(
          _wire2api_i64(raw[1]),
        );
      case 5:
        return DynamicValue_F32(
          _wire2api_f32(raw[1]),
        );
      case 6:
        return DynamicValue_F64(
          _wire2api_f64(raw[1]),
        );
      case 7:
        return DynamicValue_String(
          _wire2api_String(raw[1]),
        );
      case 8:
        return DynamicValue_MegaStruct(
          _wire2api_String(raw[1]),
        );
      case 9:
        return DynamicValue_Error(
          _wire2api_error_code(raw[1]),
        );
      case 10:
        return DynamicValue_None();
      default:
        throw Exception("unreachable");
    }
  }

  ErrorCode _wire2api_error_code(dynamic raw) {
    return ErrorCode.values[raw];
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  GeneratedKeyG _wire2api_generated_key_g(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GeneratedKeyG(
      words: _wire2api_StringList(arr[0]),
      accountType: _wire2api_mnemonic_type(arr[1]),
    );
  }

  GqlConnectionImpl _wire2api_gql_connection_impl(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GqlConnectionImpl(
      bridge: this,
      isLocal: _wire2api_bool(arr[0]),
      instanceHash: _wire2api_String(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  JrpcConnectionImpl _wire2api_jrpc_connection_impl(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return JrpcConnectionImpl(
      bridge: this,
      instanceHash: _wire2api_String(arr[0]),
    );
  }

  LedgerConnectionImpl _wire2api_ledger_connection_impl(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LedgerConnectionImpl(
      bridge: this,
      instanceHash: _wire2api_String(arr[0]),
    );
  }

  List<DynamicNamedValue> _wire2api_list_dynamic_named_value(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_dynamic_named_value).toList();
  }

  List<DynamicValue> _wire2api_list_dynamic_value(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_dynamic_value).toList();
  }

  LogEntry _wire2api_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: _wire2api_i64(arr[0]),
      level: _wire2api_log_level(arr[1]),
      tag: _wire2api_String(arr[2]),
      msg: _wire2api_String(arr[3]),
    );
  }

  LogLevel _wire2api_log_level(dynamic raw) {
    return LogLevel.values[raw];
  }

  MnemonicType _wire2api_mnemonic_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return MnemonicType_Legacy();
      case 1:
        return MnemonicType_Labs(
          _wire2api_u16(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  MyClass _wire2api_my_class(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyClass(
      bridge: this,
      val: _wire2api_i32(arr[0]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  DynamicValue? _wire2api_opt_box_autoadd_dynamic_value(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_dynamic_value(raw);
  }

  StorageImpl _wire2api_storage_impl(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StorageImpl(
      bridge: this,
      instanceHash: _wire2api_String(arr[0]),
    );
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UnsignedMessageImpl _wire2api_unsigned_message_impl(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UnsignedMessageImpl(
      bridge: this,
      innerMessage: _wire2api_BoxUnsignedMessageBoxTrait(arr[0]),
    );
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_error_code(ErrorCode raw) {
  return api2wire_i32(raw.index);
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_i8(int raw) {
  return raw;
}

@protected
int api2wire_log_level(LogLevel raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
