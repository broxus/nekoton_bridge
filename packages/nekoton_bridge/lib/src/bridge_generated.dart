// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

part 'bridge_generated.freezed.dart';

abstract class NekotonBridge {
  ///----------------------------
  /// CONTENT OF src/nekoton_wrapper/crypto/crypto_api.rs
  ///----------------------------
  /// Check signature by publicKey and data
  Future<bool> verifySignature(
      {required String publicKey,
      required String data,
      required String signature,
      int? signatureId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifySignatureConstMeta;

  ///----------------------------
  /// CONTENT OF src/nekoton_wrapper/crypto/mnemonic/mnemonic_api.rs
  ///----------------------------
  /// Generate seed phrase by specified mnemonic type
  Future<GeneratedKeyG> ntGenerateKey(
      {required MnemonicType accountType, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNtGenerateKeyConstMeta;

  /// Get hints for input part of word of seed phrase to get possible words
  /// input: acco
  /// returns [account, accommodate, ...]
  Future<List<String>> ntGetHints({required String input, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNtGetHintsConstMeta;

  /// Generate public and secret keys from seed phrase and mnemonic type
  /// Returns json {'public': '...', 'secret': '...'}
  /// or throws Exception
  Future<String> ntDeriveFromPhrase(
      {required String phrase,
      required MnemonicType mnemonicType,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNtDeriveFromPhraseConstMeta;

  ///----------------------------
  /// CONTENT OF src/nekoton_wrapper/helpers/abi_api.rs
  ///----------------------------
  /// Check if public key is correct.
  /// If no - throws error, if ok - return true
  Future<bool> checkPublicKey({required String publicKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCheckPublicKeyConstMeta;

  /// Run contract local.
  /// Return json-encoded ExecutionOutput or throws error.
  ///
  /// input - is json-encoded AbiToken
  Future<String> runLocal(
      {required String accountStuffBoc,
      required String contractAbi,
      required String method,
      required String input,
      required bool responsible,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunLocalConstMeta;

  /// Get address of tvc and contract_abi.
  /// Returns list of [address, boc of state_init, hash] or throws error
  Future<List<String>> getExpectedAddress(
      {required String tvc,
      required String contractAbi,
      required int workchainId,
      String? publicKey,
      required String initData,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetExpectedAddressConstMeta;

  /// Returns base64-encoded body that was encoded or throws error
  Future<String> encodeInternalInput(
      {required String contractAbi,
      required String method,
      required String input,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncodeInternalInputConstMeta;

  /// Returns json-encoded SignedMessage from nekoton or throws error
  /// timeout - milliseconds
  Future<String> createExternalMessageWithoutSignature(
      {required String dst,
      required String contractAbi,
      required String method,
      String? stateInit,
      required String input,
      required int timeout,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCreateExternalMessageWithoutSignatureConstMeta;

  /// Create external unsigned message that can be listened and handled or throws error
  /// timeout - milliseconds
  Future<UnsignedMessageImpl> createExternalMessage(
      {required String dst,
      required String contractAbi,
      required String method,
      String? stateInit,
      required String input,
      required String publicKey,
      required int timeout,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateExternalMessageConstMeta;

  /// Parse payload and return optional json-encoded KnownPayload or throws error
  Future<String> parseKnownPayload({required String payload, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseKnownPayloadConstMeta;

  /// Decode input data and return json-encoded DecodedInput or throws error
  Future<String> decodeInput(
      {required String messageBody,
      required String contractAbi,
      String? method,
      required bool internal,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeInputConstMeta;

  /// Decode input data and return json-encoded DecodedEvent or throws error
  Future<String> decodeEvent(
      {required String messageBody,
      required String contractAbi,
      String? event,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeEventConstMeta;

  /// Decode output data and return json-encoded DecodedOutput or throws error
  Future<String> decodeOutput(
      {required String messageBody,
      required String contractAbi,
      String? method,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeOutputConstMeta;

  /// Decode transaction and return json-encoded DecodedTransaction or throws error
  Future<String> decodeTransaction(
      {required String transaction,
      required String contractAbi,
      String? method,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeTransactionConstMeta;

  /// Decode events of transaction and return json-encoded list of DecodedEvent or throws error
  Future<String> decodeTransactionEvents(
      {required String transaction, required String contractAbi, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecodeTransactionEventsConstMeta;

  /// Returns hash of decoded boc or throws error
  Future<String> getBocHash({required String boc, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBocHashConstMeta;

  /// Return base64 encoded bytes of tokens or throws error
  /// returns [tvc, hash]
  Future<List<String>> packIntoCell(
      {required String params,
      required String tokens,
      String? version,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPackIntoCellConstMeta;

  /// Parse list of params and return json-encoded Tokens or throws error
  Future<String> unpackFromCell(
      {required String params,
      required String boc,
      required bool allowPartial,
      String? version,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUnpackFromCellConstMeta;

  /// Pack address std smd or throw error
  /// Returns new packed address as string
  Future<String> packStdSmcAddr(
      {required String addr,
      required bool base64Url,
      required bool bounceable,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPackStdSmcAddrConstMeta;

  /// Unpack address std smd or throw error.
  /// Returns json-encoded MsgAddressInt
  Future<String> unpackStdSmcAddr(
      {required String packed, required bool base64Url, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUnpackStdSmcAddrConstMeta;

  /// Return true if address is valid, false otherwise
  Future<bool> validateAddress({required String address, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kValidateAddressConstMeta;

  /// Repack address and return json-encoded MsgAddressInt or throw error
  Future<String> repackAddress({required String address, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRepackAddressConstMeta;

  /// Extract public key from boc and return it or throw error
  Future<String> extractPublicKey({required String boc, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExtractPublicKeyConstMeta;

  /// Convert code to base64 tvc string and return it or throw error
  /// returns [tvc, hash]
  Future<List<String>> codeToTvc({required String code, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCodeToTvcConstMeta;

  /// Merge code and data to tvc base64 string and return it or throw error
  /// returns [tvc, hash]
  Future<List<String>> mergeTvc(
      {required String code, required String data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMergeTvcConstMeta;

  /// Split base64 tvc string into data and code.
  /// Return vec![data, code] or throw error
  Future<List<String?>> splitTvc({required String tvc, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSplitTvcConstMeta;

  /// Set salt to code and return base64-encoded string or throw error
  /// returns [tvc, hash]
  Future<List<String>> setCodeSalt(
      {required String code, required String salt, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetCodeSaltConstMeta;

  /// Get salt from code if possible and return base64-encoded salt or throw error
  Future<String?> getCodeSalt({required String code, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetCodeSaltConstMeta;

  /// Run contract locally.
  /// [config] - base64-encoded ConfigParams after (getBlockchainConfig)
  /// [message] - base64-encoded Message after (encodeInternalMessage)
  /// [utime] - unixtime in milliseconds
  /// [account] - account address
  /// Returns [boc, transaction] if everything is ok or
  /// [error_code] if transaction failed
  /// or throws error
  Future<List<String>> executeLocal(
      {required String config,
      required String account,
      required String message,
      required int utime,
      required bool disableSignatureCheck,
      String? overwriteBalance,
      int? globalId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExecuteLocalConstMeta;

  /// Unpack data by contract.
  /// Returns [option publicKey, json-encoded Map<String, Token>] or throw error
  Future<List<String?>> unpackInitData(
      {required String contractAbi, required String data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUnpackInitDataConstMeta;

  /// Unpack contract fields.
  /// Returns optional json-encoded Map<String, Token> or throw error
  Future<String?> unpackContractFields(
      {required String contractAbi,
      required String boc,
      required bool allowPartial,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUnpackContractFieldsConstMeta;

  /// Returns json-encoded SignedMessage or throws error
  /// dst - destination address
  /// timeout - milliseconds
  Future<String> createRawExternalMessage(
      {required String dst,
      String? stateInit,
      String? body,
      required int timeout,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateRawExternalMessageConstMeta;

  /// Returns base-64 encoded Message or throws error
  /// src - address of sender
  /// dst - address of destination
  /// body - base64-encoded data
  Future<String> encodeInternalMessage(
      {String? src,
      required String dst,
      required bool bounce,
      String? stateInit,
      String? body,
      required String amount,
      bool? bounced,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncodeInternalMessageConstMeta;

  /// Returns base-64 encoded Account or throws error
  Future<String> makeFullAccountBoc({String? accountStuffBoc, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMakeFullAccountBocConstMeta;

  /// Returns optional json-encoded FullContractState or throws error
  /// account - base64-encoded boc after execute_local
  Future<String?> parseFullAccountBoc({required String account, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseFullAccountBocConstMeta;

  ///----------------------------
  /// CONTENT OF src/utils/tests_api.rs
  ///----------------------------
  Future<void> testLoggerInfo({required String string, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestLoggerInfoConstMeta;

  Future<void> testLoggerDebug({required String string, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestLoggerDebugConstMeta;

  Future<void> testLoggerWarn({required String string, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestLoggerWarnConstMeta;

  Future<void> testLoggerError({required String string, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestLoggerErrorConstMeta;

  Future<void> testLoggerPanic({required String string, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestLoggerPanicConstMeta;

  Future<DynamicValue> testCallerCallTest0Async(
      {required String string, required bool needResult, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestCallerCallTest0AsyncConstMeta;

  DynamicValue testCallerCallTest0Sync(
      {required String string, required bool needResult, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestCallerCallTest0SyncConstMeta;

  Future<DynamicValue> testCallerCallTest1Async(
      {required String string, required bool needResult, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestCallerCallTest1AsyncConstMeta;

  ///----------------------------
  /// CONTENT OF src/utils/api.rs
  ///----------------------------
  /// Init utils
  Future<void> initLogger(
      {required LogLevel level, required bool mobileLogger, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitLoggerConstMeta;

  /// Create log stream
  Stream<LogEntry> createLogStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta;

  /// Init tokio runtime
  Future<void> initRuntime({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitRuntimeConstMeta;

  /// Init caller
  Stream<DartCallStubRegistred> initCaller({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitCallerConstMeta;

  /// Callback functions for returning Dart method result
  void callSendResult(
      {required String id, required DynamicValue value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCallSendResultConstMeta;

  /// Set clock offset in milliseconds
  Future<void> setClockOffset({required int offsetMs, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetClockOffsetConstMeta;

  Future<void> simpleLog({required String string, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleLogConstMeta;

  Future<void> simplePanic({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimplePanicConstMeta;

  int simpleAdderSync({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleAdderSyncConstMeta;

  Future<int> simpleAdder({required int a, required int b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleAdderConstMeta;

  Future<DynamicValue> stubDv({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStubDvConstMeta;

  Future<DartCallStub> stubDcs({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStubDcsConstMeta;

  Future<void> simpleCallDart({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleCallDartConstMeta;

  Future<void> stubCallDart({required DartCallStub stub, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStubCallDartConstMeta;

  Future<void> simpleCallFunc0({required bool needResult, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc0ConstMeta;

  Future<void> simpleCallFunc1({required bool needResult, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc1ConstMeta;

  Future<void> simpleCallFunc2({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc2ConstMeta;

  Future<void> simpleCallFunc3({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc3ConstMeta;

  Future<void> refreshTimeoutMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRefreshTimeoutMethodUnsignedMessageImplConstMeta;

  /// Return current expiration timestamp of UnsignedMessage
  /// Returns secondsSinceEpoch
  Future<int> expireAtMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kExpireAtMethodUnsignedMessageImplConstMeta;

  /// Returns base64 encoded hash string of UnsignedMessage
  Future<String> hashMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHashMethodUnsignedMessageImplConstMeta;

  /// Sign message with signature and return json-encoded SignedMessage.
  /// signature receives from KeyStore.sign where data is UnsignedMessage.hash
  Future<String> signMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that,
      required String signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignMethodUnsignedMessageImplConstMeta;

  /// Sign message with fake signature and return json-encoded SignedMessage or throws error
  Future<String> signFakeMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSignFakeMethodUnsignedMessageImplConstMeta;

  Future<GqlTransportImpl> newStaticMethodGqlTransportImpl(
      {required GqlConnectionDartWrapper gqlConnection, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodGqlTransportImplConstMeta;

  /// Get contract state of address and return json-encoded RawContractState or throw error
  Future<String> getContractStateMethodGqlTransportImpl(
      {required GqlTransportImpl that, required String address, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetContractStateMethodGqlTransportImplConstMeta;

  /// Get full contract state of address and return json-encoded FullContractState or throw error
  Future<String?> getFullContractStateMethodGqlTransportImpl(
      {required GqlTransportImpl that, required String address, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetFullContractStateMethodGqlTransportImplConstMeta;

  /// Get list of accounts by code hash. Returns json-encoded AccountsList or throw error
  Future<String> getAccountsByCodeHashMethodGqlTransportImpl(
      {required GqlTransportImpl that,
      required String codeHash,
      required int limit,
      String? continuation,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetAccountsByCodeHashMethodGqlTransportImplConstMeta;

  /// Get list of transactions by address.
  /// Return json-encoded TransactionsList or throw error
  Future<String> getTransactionsMethodGqlTransportImpl(
      {required GqlTransportImpl that,
      required String address,
      String? fromLt,
      required int count,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionsMethodGqlTransportImplConstMeta;

  /// Get single transaction by its hash.
  /// Return json-encoded Transaction or throw error
  Future<String?> getTransactionMethodGqlTransportImpl(
      {required GqlTransportImpl that, required String hash, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionMethodGqlTransportImplConstMeta;

  /// Call get_dst_transaction of nekoton's transport and
  /// return option json-encoded RawTransaction or throw error
  Future<String?> getDstTransactionMethodGqlTransportImpl(
      {required GqlTransportImpl that,
      required String messageHash,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetDstTransactionMethodGqlTransportImplConstMeta;

  /// Get transport signature id and return it or throw error
  Future<int?> getSignatureIdMethodGqlTransportImpl(
      {required GqlTransportImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetSignatureIdMethodGqlTransportImplConstMeta;

  /// Get config of transport.
  /// Returns json-encoded BlockchainConfigDef or throw error
  Future<String> getBlockchainConfigMethodGqlTransportImpl(
      {required GqlTransportImpl that, required bool force, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetBlockchainConfigMethodGqlTransportImplConstMeta;

  /// Get id of network or throw error
  Future<int> getNetworkIdMethodGqlTransportImpl(
      {required GqlTransportImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetNetworkIdMethodGqlTransportImplConstMeta;

  /// Get latest block by address and return it or throw error
  Future<LatestBlock> getLatestBlockMethodGqlTransportImpl(
      {required GqlTransportImpl that, required String address, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetLatestBlockMethodGqlTransportImplConstMeta;

  /// Get transport block by id and return base64 encoded block or throw error
  Future<String> getBlockMethodGqlTransportImpl(
      {required GqlTransportImpl that, required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBlockMethodGqlTransportImplConstMeta;

  /// Wait until next block will come to blockchain and return its id or throw error
  /// timeout - in milliseconds
  Future<String> waitForNextBlockMethodGqlTransportImpl(
      {required GqlTransportImpl that,
      required String currentBlockId,
      required String address,
      required int timeout,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kWaitForNextBlockMethodGqlTransportImplConstMeta;

  Future<ProtoTransportImpl> newStaticMethodProtoTransportImpl(
      {required ProtoConnectionDartWrapper protoConnection, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodProtoTransportImplConstMeta;

  /// Get contract state of address and return json-encoded RawContractState or throw error
  Future<String> getContractStateMethodProtoTransportImpl(
      {required ProtoTransportImpl that,
      required String address,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetContractStateMethodProtoTransportImplConstMeta;

  /// Get full contract state of address and return json-encoded FullContractState or throw error
  Future<String?> getFullContractStateMethodProtoTransportImpl(
      {required ProtoTransportImpl that,
      required String address,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetFullContractStateMethodProtoTransportImplConstMeta;

  /// Get list of accounts by code hash. Returns json-encoded AccountsList or throw error
  Future<String> getAccountsByCodeHashMethodProtoTransportImpl(
      {required ProtoTransportImpl that,
      required String codeHash,
      required int limit,
      String? continuation,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetAccountsByCodeHashMethodProtoTransportImplConstMeta;

  /// Get list of transactions by address.
  /// Return json-encoded TransactionsList or throw error
  Future<String> getTransactionsMethodProtoTransportImpl(
      {required ProtoTransportImpl that,
      required String address,
      String? fromLt,
      required int count,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionsMethodProtoTransportImplConstMeta;

  /// Get single transaction by its hash.
  /// Return json-encoded Transaction or throw error
  Future<String?> getTransactionMethodProtoTransportImpl(
      {required ProtoTransportImpl that, required String hash, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionMethodProtoTransportImplConstMeta;

  /// Call get_dst_transaction of nekoton's transport and
  /// return option json-encoded RawTransaction or throw error
  Future<String?> getDstTransactionMethodProtoTransportImpl(
      {required ProtoTransportImpl that,
      required String messageHash,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetDstTransactionMethodProtoTransportImplConstMeta;

  /// Get transport signature id and return it or throw error
  Future<int?> getSignatureIdMethodProtoTransportImpl(
      {required ProtoTransportImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetSignatureIdMethodProtoTransportImplConstMeta;

  /// Get config of transport.
  /// Returns json-encoded BlockchainConfigDef or throw error
  Future<String> getBlockchainConfigMethodProtoTransportImpl(
      {required ProtoTransportImpl that, required bool force, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetBlockchainConfigMethodProtoTransportImplConstMeta;

  /// Get id of network or throw error
  Future<int> getNetworkIdMethodProtoTransportImpl(
      {required ProtoTransportImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetNetworkIdMethodProtoTransportImplConstMeta;

  Future<JrpcTransportImpl> newStaticMethodJrpcTransportImpl(
      {required JrpcConnectionDartWrapper jrpcConnection, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodJrpcTransportImplConstMeta;

  /// Get contract state of address and return json-encoded RawContractState or throw error
  Future<String> getContractStateMethodJrpcTransportImpl(
      {required JrpcTransportImpl that, required String address, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetContractStateMethodJrpcTransportImplConstMeta;

  /// Get full contract state of address and return json-encoded FullContractState or throw error
  Future<String?> getFullContractStateMethodJrpcTransportImpl(
      {required JrpcTransportImpl that, required String address, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetFullContractStateMethodJrpcTransportImplConstMeta;

  /// Get list of accounts by code hash. Returns json-encoded AccountsList or throw error
  Future<String> getAccountsByCodeHashMethodJrpcTransportImpl(
      {required JrpcTransportImpl that,
      required String codeHash,
      required int limit,
      String? continuation,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetAccountsByCodeHashMethodJrpcTransportImplConstMeta;

  /// Get list of transactions by address.
  /// Return json-encoded TransactionsList or throw error
  Future<String> getTransactionsMethodJrpcTransportImpl(
      {required JrpcTransportImpl that,
      required String address,
      String? fromLt,
      required int count,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionsMethodJrpcTransportImplConstMeta;

  /// Get single transaction by its hash.
  /// Return json-encoded Transaction or throw error
  Future<String?> getTransactionMethodJrpcTransportImpl(
      {required JrpcTransportImpl that, required String hash, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionMethodJrpcTransportImplConstMeta;

  /// Call get_dst_transaction of nekoton's transport and
  /// return option json-encoded RawTransaction or throw error
  Future<String?> getDstTransactionMethodJrpcTransportImpl(
      {required JrpcTransportImpl that,
      required String messageHash,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetDstTransactionMethodJrpcTransportImplConstMeta;

  /// Get transport signature id and return it or throw error
  Future<int?> getSignatureIdMethodJrpcTransportImpl(
      {required JrpcTransportImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetSignatureIdMethodJrpcTransportImplConstMeta;

  /// Get config of transport.
  /// Returns json-encoded BlockchainConfigDef or throw error
  Future<String> getBlockchainConfigMethodJrpcTransportImpl(
      {required JrpcTransportImpl that, required bool force, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetBlockchainConfigMethodJrpcTransportImplConstMeta;

  /// Get id of network or throw error
  Future<int> getNetworkIdMethodJrpcTransportImpl(
      {required JrpcTransportImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetNetworkIdMethodJrpcTransportImplConstMeta;

  /// Create TokenWallet by subscribing to its instance.
  /// owner - address of account that is owner of wallet
  /// root_token_contract - address of contract in blockchain
  Future<TokenWalletDartWrapper> subscribeStaticMethodTokenWalletDartWrapper(
      {required String instanceHash,
      required String owner,
      required String rootTokenContract,
      required ArcTransportBoxTrait transport,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSubscribeStaticMethodTokenWalletDartWrapperConstMeta;

  /// Get address of owner of wallet.
  Future<String> ownerMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kOwnerMethodTokenWalletDartWrapperConstMeta;

  /// Get address of wallet.
  Future<String> addressMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAddressMethodTokenWalletDartWrapperConstMeta;

  /// Get symbol of contract of wallet.
  /// Return json-encoded Symbol or throw error
  Future<String> symbolMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSymbolMethodTokenWalletDartWrapperConstMeta;

  /// Get json-encoded TokenWalletVersion or throw error.
  Future<String> versionMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kVersionMethodTokenWalletDartWrapperConstMeta;

  /// Get balance of wallet.
  /// Return string representation of rust BigUInt
  Future<String> balanceMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kBalanceMethodTokenWalletDartWrapperConstMeta;

  /// Get json-encoded ContractState or throw error.
  Future<String> contractStateMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kContractStateMethodTokenWalletDartWrapperConstMeta;

  /// Prepare transferring tokens from this wallet to other.
  /// destination - address of account that should receive token
  /// amount - amount of tokens that should be transferred
  /// notify_receiver - if receiver should be notifier by blockchain
  /// payload - payload of transfer aka comment
  /// attached_amount - string representation of rust u64, default 400000000. How many native tokens
  ///   should be attached to transfer.
  /// Return json-encoded InternalMessage or throw error.
  Future<String> prepareTransferMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that,
      required String destination,
      required String amount,
      required bool notifyReceiver,
      String? attachedAmount,
      String? payload,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPrepareTransferMethodTokenWalletDartWrapperConstMeta;

  /// Refresh wallet and update its data.
  /// Returns true or throw error.
  Future<bool> refreshMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRefreshMethodTokenWalletDartWrapperConstMeta;

  /// Preload transactions of wallet.
  /// from_lt - offset for loading data, string representation of u64
  /// Returns true or throw error.
  Future<bool> preloadTransactionsMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that,
      required String fromLt,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPreloadTransactionsMethodTokenWalletDartWrapperConstMeta;

  /// Handle block of blockchain.
  /// block - base64-encoded Block.
  /// Return true or throw error.
  Future<bool> handleBlockMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that,
      required String block,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kHandleBlockMethodTokenWalletDartWrapperConstMeta;

  /// Get details about token wallet by address of wallet
  /// address - address of wallet
  /// Return json-encoded list with 2 positions:
  /// 0: TokenWalletDetails
  /// 1: RootTokenContractDetails
  /// or throw error
  Future<String> getTokenWalletDetailsStaticMethodTokenWalletDartWrapper(
      {required ArcTransportBoxTrait transport,
      required String address,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetTokenWalletDetailsStaticMethodTokenWalletDartWrapperConstMeta;

  /// Get details about root contract by address of TokenWallet
  /// Return json-encoded list with 2 positions:
  /// 0: Address of root contract
  /// 1: RootTokenContractDetails of root contract
  /// or throw error.
  Future<String>
      getTokenRootDetailsFromTokenWalletStaticMethodTokenWalletDartWrapper(
          {required ArcTransportBoxTrait transport,
          required String tokenWalletAddress,
          dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetTokenRootDetailsFromTokenWalletStaticMethodTokenWalletDartWrapperConstMeta;

  /// Create KeyStore or throw error
  Future<KeystoreDartWrapper> newStaticMethodKeystoreDartWrapper(
      {required StorageDartWrapper storage,
      required List<KeySigner> signers,
      LedgerConnectionDartWrapper? ledgerConnection,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodKeystoreDartWrapperConstMeta;

  /// Get list of json-encoded KeyStoreEntry or throw error
  Future<String> getEntriesMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetEntriesMethodKeystoreDartWrapperConstMeta;

  /// Insert new key in keystore. Returns json-encoded KeystoreEntry or throw error.
  /// input - json-encoded action specified for signer eg EncryptedKeyCreateInput or
  ///   DerivedKeyCreateInput or LedgerKeyCreateInput
  Future<String> addKeyMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String input,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddKeyMethodKeystoreDartWrapperConstMeta;

  /// Method same as add_key but allows add multiple keys at time.
  /// Returns json-encoded list of KeyStoreEntry or throw error.
  /// input - json-encoded list of inputs, same as in add_key method
  Future<String> addKeysMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String input,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddKeysMethodKeystoreDartWrapperConstMeta;

  /// Update key data.
  /// Returns updated json-encoded KeyStoreEntry or throw error.
  /// input - json-encoded action specified for signer eg EncryptedKeyUpdateParams or
  ///   DerivedKeyUpdateParams or LedgerUpdateKeyInput
  Future<String> updateKeyMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String input,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kUpdateKeyMethodKeystoreDartWrapperConstMeta;

  /// Export key and get its seed phrase and mnemonic type.
  /// THIS METHOD DO NOT WORK for LEDGER.
  /// Returns json-encoded EncryptedKeyExportSeedOutput or DerivedKeyExportOutput or throw error
  Future<String> exportSeedMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String input,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kExportSeedMethodKeystoreDartWrapperConstMeta;

  /// Return list of public keys specified for signer or throw error.
  /// input - json-encoded action specified for signer eg EncryptedKeyGetPublicKeys or
  ///   DerivedKeyGetPublicKeys or LedgerKeyGetPublicKeys
  Future<List<String>> getPublicKeysMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String input,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetPublicKeysMethodKeystoreDartWrapperConstMeta;

  /// Encrypt data with specified algorithm and input specified for signer eg EncryptedKeyPassword
  ///   or DerivedKeyPassword or LedgerSignInput.
  /// data - base64 encoded data that must be encrypted.
  /// algorithm - name of algorithm that should be used for encryption, for example ChaCha20Poly1305
  /// public_keys - list of keys that is used for encryption.
  ///
  /// Returns json-encoded list of EncryptedData or throw error.
  Future<String> encryptMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String data,
      required List<String> publicKeys,
      required String algorithm,
      required String input,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEncryptMethodKeystoreDartWrapperConstMeta;

  /// Decrypt json-encoded EncryptedData in data.
  /// input - json-encoded action for signer eg EncryptedKeyPassword or DerivedKeyPassword or
  ///   LedgerSignInput.
  /// Returns base64-encoded data or throw error.
  Future<String> decryptMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String data,
      required String input,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDecryptMethodKeystoreDartWrapperConstMeta;

  /// Sign data and return base64-encoded signature or throw error.
  /// input - json-encoded action for signer eg EncryptedKeyPassword or DerivedKeyPassword or
  ///   LedgerSignInput.
  /// signature_id - id of transport
  /// data - base64-encoded data that should be signed.
  Future<String> signMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String data,
      required String input,
      int? signatureId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignMethodKeystoreDartWrapperConstMeta;

  /// Same method as sign.
  /// data - base64-encoded string.
  /// Return SignedData or throw error.
  Future<SignedData> signDataMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String data,
      required String input,
      int? signatureId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSignDataMethodKeystoreDartWrapperConstMeta;

  /// Same method as sign.
  /// data - base64-encoded string.
  /// Return SignedDataRaw or throw error.
  Future<SignedDataRaw> signDataRawMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String data,
      required String input,
      int? signatureId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSignDataRawMethodKeystoreDartWrapperConstMeta;

  /// Remove public key from KeyStore and return json-encoded KeyStoreEntry if it was removed.
  Future<String?> removeKeyMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required String publicKey,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRemoveKeyMethodKeystoreDartWrapperConstMeta;

  /// Remove list of public key from KeyStore and return json-encoded list of KeyStoreEntry's
  /// that were removed or throw error.
  Future<String> removeKeysMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required List<String> publicKeys,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRemoveKeysMethodKeystoreDartWrapperConstMeta;

  /// Check if password cached for specified public_key.
  /// duration - timestamp in milliseconds of expiring key.
  /// Returns true/false or throw error.
  Future<bool> isPasswordCachedMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required String publicKey,
      required int duration,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kIsPasswordCachedMethodKeystoreDartWrapperConstMeta;

  /// Clear KeyStore and remove all entries and all sensitive data.
  Future<String> clearKeystoreMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kClearKeystoreMethodKeystoreDartWrapperConstMeta;

  /// Try to reload all stored data.
  Future<String> reloadKeystoreMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kReloadKeystoreMethodKeystoreDartWrapperConstMeta;

  /// Verify if data is valid with specified signers and connection or not.
  /// Return true/false or throw error.
  Future<bool> verifyDataStaticMethodKeystoreDartWrapper(
      {required List<KeySigner> signers,
      LedgerConnectionDartWrapper? ledgerConnection,
      required String data,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kVerifyDataStaticMethodKeystoreDartWrapperConstMeta;

  /// Create AccountsStorage or throw error
  Future<AccountsStorageImpl> newStaticMethodAccountsStorageImpl(
      {required StorageDartWrapper storage, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodAccountsStorageImplConstMeta;

  /// Get list of accounts.
  /// Returns json-encoded List of AssetsList or throw error
  Future<String> getEntriesMethodAccountsStorageImpl(
      {required AccountsStorageImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetEntriesMethodAccountsStorageImplConstMeta;

  /// Add new account to storage and return its instance.
  /// account - json-encoded AccountToAdd.
  /// Return json-encoded AssetsList or throw error.
  Future<String> addAccountMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String account,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAddAccountMethodAccountsStorageImplConstMeta;

  /// Add list of new accounts to storage and return it instances.
  /// account - json-encoded list of AccountToAdd.
  /// Return json-encoded list of AssetsList or throw error.
  Future<String> addAccountsMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accounts,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAddAccountsMethodAccountsStorageImplConstMeta;

  /// Rename existed account and return its renamed instance.
  /// account_address - address of account
  /// name - new name of account
  /// Return json-encoded AssetsList or throw error.
  Future<String> renameAccountMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accountAddress,
      required String name,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRenameAccountMethodAccountsStorageImplConstMeta;

  /// Add token wallet signature to account (add new token to account aka enable it via slider).
  /// account_address - address of account
  /// network_group - name of network group where this token must be visible, could be found in
  ///   connection info
  /// root_token_contract - address of token in blockchain.
  /// Return updated AssetsList or throw error.
  Future<String> addTokenWalletMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accountAddress,
      required String networkGroup,
      required String rootTokenContract,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAddTokenWalletMethodAccountsStorageImplConstMeta;

  /// Add token wallets signatures to account (add new tokens to account aka enable it via slider).
  /// account_address - address of account
  /// network_group - name of network group where this token must be visible, could be found in
  ///   connection info
  /// root_token_contracts - list of addresses of tokens in blockchain.
  /// Return true or throw error.
  Future<bool> addTokenWalletsMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accountAddress,
      required String networkGroup,
      required List<String> rootTokenContracts,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAddTokenWalletsMethodAccountsStorageImplConstMeta;

  /// Remove token wallet signature from account (remove token from account aka disable it via slider).
  /// account_address - address of account
  /// network_group - name of network group where this token must be visible, could be found in
  ///   connection info
  /// root_token_contract - address of token in blockchain.
  /// Return updated AssetsList or throw error.
  Future<String> removeTokenWalletMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accountAddress,
      required String networkGroup,
      required String rootTokenContract,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRemoveTokenWalletMethodAccountsStorageImplConstMeta;

  /// Remove token wallets signatures from account (remove tokens from account aka disable it via slider).
  /// account_address - address of account
  /// network_group - name of network group where this token must be visible, could be found in
  ///   connection info
  /// root_token_contracts - list of addresses of tokens in blockchain.
  /// Return true or throw error.
  Future<bool> removeTokenWalletsMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accountAddress,
      required String networkGroup,
      required List<String> rootTokenContracts,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRemoveTokenWalletsMethodAccountsStorageImplConstMeta;

  /// Remove account from storage and return its instance if it was removed.
  /// account_address - address of account
  /// Return json-encoded AssetsList that was removed or null or throw error.
  Future<String?> removeAccountMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accountAddress,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRemoveAccountMethodAccountsStorageImplConstMeta;

  /// Remove list of account from storage and return it instances if it were removed.
  /// account_addresses - list of addresses of accounts.
  /// Return json-encoded list of AssetsList that were removed or throw error.
  Future<String> removeAccountsMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required List<String> accountAddresses,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRemoveAccountsMethodAccountsStorageImplConstMeta;

  /// Clear storage and remove all data.
  /// Returns true or throw error
  Future<bool> clearMethodAccountsStorageImpl(
      {required AccountsStorageImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClearMethodAccountsStorageImplConstMeta;

  /// Reload storage and read all data again.
  /// Returns true or throw error.
  Future<bool> reloadMethodAccountsStorageImpl(
      {required AccountsStorageImpl that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReloadMethodAccountsStorageImplConstMeta;

  /// Check if data is correct for storage.
  Future<bool> verifyDataStaticMethodAccountsStorageImpl(
      {required String data, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kVerifyDataStaticMethodAccountsStorageImplConstMeta;

  /// Create GenericContract by subscribing to its instance.
  /// address - address of contract
  /// preload_transactions - if transactions must be loaded during creation
  Future<GenericContractDartWrapper>
      subscribeStaticMethodGenericContractDartWrapper(
          {required String instanceHash,
          required String address,
          required bool preloadTransactions,
          required ArcTransportBoxTrait transport,
          dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSubscribeStaticMethodGenericContractDartWrapperConstMeta;

  /// Get address of contract.
  Future<String> addressMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAddressMethodGenericContractDartWrapperConstMeta;

  /// Get json-encoded ContractState or throw error.
  Future<String> contractStateMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kContractStateMethodGenericContractDartWrapperConstMeta;

  /// Get list of json-encoded PendingTransaction or throw error.
  Future<String> pendingTransactionsMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPendingTransactionsMethodGenericContractDartWrapperConstMeta;

  /// Get PollingMethod of contract or throw error.
  Future<PollingMethod> pollingMethodMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPollingMethodMethodGenericContractDartWrapperConstMeta;

  /// Execute transaction locally and return its instance.
  /// signed_message - json-encoded SignedMessage
  /// options - additional info for execution
  /// Return json-encoded Transaction or throw error.
  Future<String> executeTransactionLocallyMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that,
      required String signedMessage,
      required TransactionExecutionOptions options,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kExecuteTransactionLocallyMethodGenericContractDartWrapperConstMeta;

  /// Calculate fees for transaction.
  /// signed_message - json-encoded SignedMessage.
  /// Returns fees as string representation of u128 or throw error.
  Future<String> estimateFeesMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that,
      required String signedMessage,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kEstimateFeesMethodGenericContractDartWrapperConstMeta;

  /// Send message to blockchain and receive transaction of send.
  /// signed_message - json-encoded SignedMessage.
  /// Returns json-encoded PendingTransaction or throw error.
  Future<String> sendMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that,
      required String signedMessage,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSendMethodGenericContractDartWrapperConstMeta;

  /// Refresh contract and update its data.
  /// Returns true or throw error.
  Future<bool> refreshMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRefreshMethodGenericContractDartWrapperConstMeta;

  /// Preload transactions of contract.
  /// from_lt - offset for loading data, string representation of u64
  /// Returns true or throw error.
  Future<bool> preloadTransactionsMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that,
      required String fromLt,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPreloadTransactionsMethodGenericContractDartWrapperConstMeta;

  /// Handle block of blockchain.
  /// block - base64-encoded Block.
  /// Return true or throw error.
  Future<bool> handleBlockMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that,
      required String block,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kHandleBlockMethodGenericContractDartWrapperConstMeta;

  /// Create TonWallet by subscribing to its instance by public_key.
  /// wallet_type - is json-encoded WalletType.
  /// public_key - is string representation of key
  Future<TonWalletDartWrapper> subscribeStaticMethodTonWalletDartWrapper(
      {required String instanceHash,
      required int workchainId,
      required String publicKey,
      required String walletType,
      required ArcTransportBoxTrait transport,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSubscribeStaticMethodTonWalletDartWrapperConstMeta;

  /// Create TonWallet by subscribing to its instance by address of wallet.
  Future<TonWalletDartWrapper>
      subscribeByAddressStaticMethodTonWalletDartWrapper(
          {required String instanceHash,
          required String address,
          required ArcTransportBoxTrait transport,
          dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSubscribeByAddressStaticMethodTonWalletDartWrapperConstMeta;

  /// Create TonWallet by subscribing to its instance by existed instance.
  /// existing_wallet - json-encoded ExistingWalletInfo.
  Future<TonWalletDartWrapper>
      subscribeByExistingStaticMethodTonWalletDartWrapper(
          {required String instanceHash,
          required String existingWallet,
          required ArcTransportBoxTrait transport,
          dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSubscribeByExistingStaticMethodTonWalletDartWrapperConstMeta;

  /// Get workchain of wallet.
  Future<int> workchainMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kWorkchainMethodTonWalletDartWrapperConstMeta;

  /// Get address of wallet.
  Future<String> addressMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAddressMethodTonWalletDartWrapperConstMeta;

  /// Get public key of wallet.
  Future<String> publicKeyMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPublicKeyMethodTonWalletDartWrapperConstMeta;

  /// Get json-encoded WalletType or throw error.
  Future<String> walletTypeMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kWalletTypeMethodTonWalletDartWrapperConstMeta;

  /// Get json-encoded ContractState or throw error.
  Future<String> contractStateMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kContractStateMethodTonWalletDartWrapperConstMeta;

  /// Get list of json-encoded PendingTransaction or throw error.
  Future<String> pendingTransactionsMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPendingTransactionsMethodTonWalletDartWrapperConstMeta;

  /// Get PollingMethod of wallet or throw error.
  Future<PollingMethod> pollingMethodMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPollingMethodMethodTonWalletDartWrapperConstMeta;

  /// Get json-encoded TonWalletDetails or throw error.
  Future<String> detailsMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDetailsMethodTonWalletDartWrapperConstMeta;

  /// Get json-encoded list of MultisigPendingTransaction or throw error.
  Future<String> unconfirmedTransactionsMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kUnconfirmedTransactionsMethodTonWalletDartWrapperConstMeta;

  /// Get optional list of custodians.
  /// Returns list of public keys.
  Future<List<String>?> custodiansMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCustodiansMethodTonWalletDartWrapperConstMeta;

  /// Prepare TonWallet for deploy action.
  /// expiration - json-encoded Expiration.
  /// Returns UnsignedMessage or throw error.
  Future<UnsignedMessageImpl> prepareDeployMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that,
      required String expiration,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPrepareDeployMethodTonWalletDartWrapperConstMeta;

  /// Prepare TonWallet for deploy actions if wallet is multisig.
  /// expiration - json-encoded Expiration.
  /// custodians - list of public keys of custodians.
  /// req_confirms - count of required confirmations from 1 to custodians count
  /// Returns UnsignedMessage or throw error.
  Future<UnsignedMessageImpl>
      prepareDeployWithMultipleOwnersMethodTonWalletDartWrapper(
          {required TonWalletDartWrapper that,
          required String expiration,
          required List<String> custodians,
          required int reqConfirms,
          dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPrepareDeployWithMultipleOwnersMethodTonWalletDartWrapperConstMeta;

  /// Prepare transferring tokens from this wallet to other.
  /// contract_state - json-encoded RawContractState
  /// public_key - key of account that had initiated transfer
  /// destination - address of account that should receive token
  /// amount - amount of tokens that should be transferred
  /// bounce - nekoton's bounce param
  /// body - body of transfer aka comment
  /// expiration - json-encoded Expiration
  /// Returns UnsignedMessage or throw error.
  Future<UnsignedMessageImpl> prepareTransferMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that,
      required String contractState,
      required String publicKey,
      required String destination,
      required String amount,
      required bool bounce,
      String? body,
      required String expiration,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPrepareTransferMethodTonWalletDartWrapperConstMeta;

  /// Prepare transaction for confirmation.
  /// contract_state - json-encoded RawContractState
  /// public_key - key of account that had initiated transfer
  /// transaction_id - id of transaction.
  /// expiration - json-encoded Expiration
  /// Returns UnsignedMessage or throw error.
  Future<UnsignedMessageImpl>
      prepareConfirmTransactionMethodTonWalletDartWrapper(
          {required TonWalletDartWrapper that,
          required String contractState,
          required String publicKey,
          required String transactionId,
          required String expiration,
          dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPrepareConfirmTransactionMethodTonWalletDartWrapperConstMeta;

  /// Calculate fees for transaction.
  /// signed_message - json-encoded SignedMessage.
  /// Returns fees as string representation of u128 or throw error.
  Future<String> estimateFeesMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that,
      required String signedMessage,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kEstimateFeesMethodTonWalletDartWrapperConstMeta;

  /// Send message to blockchain and receive transaction of send.
  /// signed_message - json-encoded SignedMessage.
  /// Returns json-encoded PendingTransaction or throw error.
  Future<String> sendMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that,
      required String signedMessage,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendMethodTonWalletDartWrapperConstMeta;

  /// Refresh wallet and update its data.
  /// Returns true or throw error.
  Future<bool> refreshMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kRefreshMethodTonWalletDartWrapperConstMeta;

  /// Preload transactions of wallet.
  /// from_lt - offset for loading data, string representation of u64
  /// Returns true or throw error.
  Future<bool> preloadTransactionsMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that,
      required String fromLt,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kPreloadTransactionsMethodTonWalletDartWrapperConstMeta;

  /// Handle block of blockchain.
  /// block - base64-encoded Block.
  /// Return true or throw error.
  Future<bool> handleBlockMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that,
      required String block,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kHandleBlockMethodTonWalletDartWrapperConstMeta;

  /// Find list of wallets of public_key and return them.
  /// wallet_types - json-encoded list of WalletType.
  /// public_key - key of account where wallets must be found.
  /// Return json-encoded list of ExistingWalletInfo or throw error.
  Future<String> findExistingWalletsStaticMethodTonWalletDartWrapper(
      {required ArcTransportBoxTrait transport,
      required String publicKey,
      required int workchainId,
      required String walletTypes,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFindExistingWalletsStaticMethodTonWalletDartWrapperConstMeta;

  /// Get information of account by its address.
  /// Return json-encoded ExistingWalletInfo or throw error.
  Future<String> getExistingWalletInfoStaticMethodTonWalletDartWrapper(
      {required ArcTransportBoxTrait transport,
      required String address,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetExistingWalletInfoStaticMethodTonWalletDartWrapperConstMeta;

  /// Get list of custodians of account by address.
  /// Return list of public keys or throw error.
  Future<List<String>> getCustodiansStaticMethodTonWalletDartWrapper(
      {required ArcTransportBoxTrait transport,
      required String address,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetCustodiansStaticMethodTonWalletDartWrapperConstMeta;

  Future<JrpcConnectionDartWrapper> newStaticMethodJrpcConnectionDartWrapper(
      {required String instanceHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodJrpcConnectionDartWrapperConstMeta;

  Future<GqlConnectionDartWrapper> newStaticMethodGqlConnectionDartWrapper(
      {required bool isLocal, required String instanceHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodGqlConnectionDartWrapperConstMeta;

  Future<ProtoConnectionDartWrapper> newStaticMethodProtoConnectionDartWrapper(
      {required String instanceHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodProtoConnectionDartWrapperConstMeta;

  Future<LedgerConnectionDartWrapper>
      newStaticMethodLedgerConnectionDartWrapper(
          {required String instanceHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodLedgerConnectionDartWrapperConstMeta;

  Future<LedgerConnectionImpl> newStaticMethodLedgerConnectionImpl(
      {required String instanceHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodLedgerConnectionImplConstMeta;

  Future<StorageDartWrapper> newStaticMethodStorageDartWrapper(
      {required String instanceHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodStorageDartWrapperConstMeta;

  Future<StorageImpl> newStaticMethodStorageImpl(
      {required String instanceHash, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodStorageImplConstMeta;

  Future<MyClass> newStaticMethodMyClass({required int a, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodMyClassConstMeta;

  Future<String> myFormatMethodMyClass({required MyClass that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMyFormatMethodMyClassConstMeta;

  Future<CallerTestClass> newStaticMethodCallerTestClass(
      {required String instanceHash, required int value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodCallerTestClassConstMeta;

  Future<void> callSomeFuncMethodCallerTestClass(
      {required CallerTestClass that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallSomeFuncMethodCallerTestClassConstMeta;

  DropFnType get dropOpaqueArcAccountsStorageBoxTrait;
  ShareFnType get shareOpaqueArcAccountsStorageBoxTrait;
  OpaqueTypeFinalizer get ArcAccountsStorageBoxTraitFinalizer;

  DropFnType get dropOpaqueArcGenericContractBoxTrait;
  ShareFnType get shareOpaqueArcGenericContractBoxTrait;
  OpaqueTypeFinalizer get ArcGenericContractBoxTraitFinalizer;

  DropFnType get dropOpaqueArcGqlConnectionBoxTrait;
  ShareFnType get shareOpaqueArcGqlConnectionBoxTrait;
  OpaqueTypeFinalizer get ArcGqlConnectionBoxTraitFinalizer;

  DropFnType get dropOpaqueArcJrpcConnectionBoxTrait;
  ShareFnType get shareOpaqueArcJrpcConnectionBoxTrait;
  OpaqueTypeFinalizer get ArcJrpcConnectionBoxTraitFinalizer;

  DropFnType get dropOpaqueArcKeyStoreApiBoxTrait;
  ShareFnType get shareOpaqueArcKeyStoreApiBoxTrait;
  OpaqueTypeFinalizer get ArcKeyStoreApiBoxTraitFinalizer;

  DropFnType get dropOpaqueArcLedgerConnectionBoxTrait;
  ShareFnType get shareOpaqueArcLedgerConnectionBoxTrait;
  OpaqueTypeFinalizer get ArcLedgerConnectionBoxTraitFinalizer;

  DropFnType get dropOpaqueArcProtoConnectionBoxTrait;
  ShareFnType get shareOpaqueArcProtoConnectionBoxTrait;
  OpaqueTypeFinalizer get ArcProtoConnectionBoxTraitFinalizer;

  DropFnType get dropOpaqueArcStorageBoxTrait;
  ShareFnType get shareOpaqueArcStorageBoxTrait;
  OpaqueTypeFinalizer get ArcStorageBoxTraitFinalizer;

  DropFnType get dropOpaqueArcTokenWalletBoxTrait;
  ShareFnType get shareOpaqueArcTokenWalletBoxTrait;
  OpaqueTypeFinalizer get ArcTokenWalletBoxTraitFinalizer;

  DropFnType get dropOpaqueArcTonWalletBoxTrait;
  ShareFnType get shareOpaqueArcTonWalletBoxTrait;
  OpaqueTypeFinalizer get ArcTonWalletBoxTraitFinalizer;

  DropFnType get dropOpaqueArcTransportBoxTrait;
  ShareFnType get shareOpaqueArcTransportBoxTrait;
  OpaqueTypeFinalizer get ArcTransportBoxTraitFinalizer;

  DropFnType get dropOpaqueArcUnsignedMessageBoxTrait;
  ShareFnType get shareOpaqueArcUnsignedMessageBoxTrait;
  OpaqueTypeFinalizer get ArcUnsignedMessageBoxTraitFinalizer;
}

@sealed
class ArcAccountsStorageBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  ArcAccountsStorageBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcAccountsStorageBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcAccountsStorageBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcAccountsStorageBoxTraitFinalizer;
}

@sealed
class ArcGenericContractBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  ArcGenericContractBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcGenericContractBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcGenericContractBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcGenericContractBoxTraitFinalizer;
}

@sealed
class ArcGqlConnectionBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  ArcGqlConnectionBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcGqlConnectionBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcGqlConnectionBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcGqlConnectionBoxTraitFinalizer;
}

@sealed
class ArcJrpcConnectionBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  ArcJrpcConnectionBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcJrpcConnectionBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcJrpcConnectionBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcJrpcConnectionBoxTraitFinalizer;
}

@sealed
class ArcKeyStoreApiBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  ArcKeyStoreApiBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcKeyStoreApiBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcKeyStoreApiBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcKeyStoreApiBoxTraitFinalizer;
}

@sealed
class ArcLedgerConnectionBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  ArcLedgerConnectionBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcLedgerConnectionBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcLedgerConnectionBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcLedgerConnectionBoxTraitFinalizer;
}

@sealed
class ArcProtoConnectionBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  ArcProtoConnectionBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcProtoConnectionBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcProtoConnectionBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcProtoConnectionBoxTraitFinalizer;
}

@sealed
class ArcStorageBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  ArcStorageBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcStorageBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcStorageBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.ArcStorageBoxTraitFinalizer;
}

@sealed
class ArcTokenWalletBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  ArcTokenWalletBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcTokenWalletBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcTokenWalletBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcTokenWalletBoxTraitFinalizer;
}

@sealed
class ArcTonWalletBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  ArcTonWalletBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcTonWalletBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcTonWalletBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcTonWalletBoxTraitFinalizer;
}

@sealed
class ArcTransportBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  ArcTransportBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcTransportBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcTransportBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcTransportBoxTraitFinalizer;
}

@sealed
class ArcUnsignedMessageBoxTrait extends FrbOpaque {
  final NekotonBridge bridge;
  ArcUnsignedMessageBoxTrait.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcUnsignedMessageBoxTrait;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcUnsignedMessageBoxTrait;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcUnsignedMessageBoxTraitFinalizer;
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/core/accounts_storage/accounts_storage_api.rs
///----------------------------
/// Implementation of AccountsStorage
class AccountsStorageImpl {
  final NekotonBridge bridge;
  final ArcAccountsStorageBoxTrait innerStorage;

  const AccountsStorageImpl({
    required this.bridge,
    required this.innerStorage,
  });

  /// Create AccountsStorage or throw error
  static Future<AccountsStorageImpl> newAccountsStorageImpl(
          {required NekotonBridge bridge,
          required StorageDartWrapper storage,
          dynamic hint}) =>
      bridge.newStaticMethodAccountsStorageImpl(storage: storage, hint: hint);

  /// Get list of accounts.
  /// Returns json-encoded List of AssetsList or throw error
  Future<String> getEntries({dynamic hint}) =>
      bridge.getEntriesMethodAccountsStorageImpl(
        that: this,
      );

  /// Add new account to storage and return its instance.
  /// account - json-encoded AccountToAdd.
  /// Return json-encoded AssetsList or throw error.
  Future<String> addAccount({required String account, dynamic hint}) =>
      bridge.addAccountMethodAccountsStorageImpl(
        that: this,
        account: account,
      );

  /// Add list of new accounts to storage and return it instances.
  /// account - json-encoded list of AccountToAdd.
  /// Return json-encoded list of AssetsList or throw error.
  Future<String> addAccounts({required String accounts, dynamic hint}) =>
      bridge.addAccountsMethodAccountsStorageImpl(
        that: this,
        accounts: accounts,
      );

  /// Rename existed account and return its renamed instance.
  /// account_address - address of account
  /// name - new name of account
  /// Return json-encoded AssetsList or throw error.
  Future<String> renameAccount(
          {required String accountAddress,
          required String name,
          dynamic hint}) =>
      bridge.renameAccountMethodAccountsStorageImpl(
        that: this,
        accountAddress: accountAddress,
        name: name,
      );

  /// Add token wallet signature to account (add new token to account aka enable it via slider).
  /// account_address - address of account
  /// network_group - name of network group where this token must be visible, could be found in
  ///   connection info
  /// root_token_contract - address of token in blockchain.
  /// Return updated AssetsList or throw error.
  Future<String> addTokenWallet(
          {required String accountAddress,
          required String networkGroup,
          required String rootTokenContract,
          dynamic hint}) =>
      bridge.addTokenWalletMethodAccountsStorageImpl(
        that: this,
        accountAddress: accountAddress,
        networkGroup: networkGroup,
        rootTokenContract: rootTokenContract,
      );

  /// Add token wallets signatures to account (add new tokens to account aka enable it via slider).
  /// account_address - address of account
  /// network_group - name of network group where this token must be visible, could be found in
  ///   connection info
  /// root_token_contracts - list of addresses of tokens in blockchain.
  /// Return true or throw error.
  Future<bool> addTokenWallets(
          {required String accountAddress,
          required String networkGroup,
          required List<String> rootTokenContracts,
          dynamic hint}) =>
      bridge.addTokenWalletsMethodAccountsStorageImpl(
        that: this,
        accountAddress: accountAddress,
        networkGroup: networkGroup,
        rootTokenContracts: rootTokenContracts,
      );

  /// Remove token wallet signature from account (remove token from account aka disable it via slider).
  /// account_address - address of account
  /// network_group - name of network group where this token must be visible, could be found in
  ///   connection info
  /// root_token_contract - address of token in blockchain.
  /// Return updated AssetsList or throw error.
  Future<String> removeTokenWallet(
          {required String accountAddress,
          required String networkGroup,
          required String rootTokenContract,
          dynamic hint}) =>
      bridge.removeTokenWalletMethodAccountsStorageImpl(
        that: this,
        accountAddress: accountAddress,
        networkGroup: networkGroup,
        rootTokenContract: rootTokenContract,
      );

  /// Remove token wallets signatures from account (remove tokens from account aka disable it via slider).
  /// account_address - address of account
  /// network_group - name of network group where this token must be visible, could be found in
  ///   connection info
  /// root_token_contracts - list of addresses of tokens in blockchain.
  /// Return true or throw error.
  Future<bool> removeTokenWallets(
          {required String accountAddress,
          required String networkGroup,
          required List<String> rootTokenContracts,
          dynamic hint}) =>
      bridge.removeTokenWalletsMethodAccountsStorageImpl(
        that: this,
        accountAddress: accountAddress,
        networkGroup: networkGroup,
        rootTokenContracts: rootTokenContracts,
      );

  /// Remove account from storage and return its instance if it was removed.
  /// account_address - address of account
  /// Return json-encoded AssetsList that was removed or null or throw error.
  Future<String?> removeAccount(
          {required String accountAddress, dynamic hint}) =>
      bridge.removeAccountMethodAccountsStorageImpl(
        that: this,
        accountAddress: accountAddress,
      );

  /// Remove list of account from storage and return it instances if it were removed.
  /// account_addresses - list of addresses of accounts.
  /// Return json-encoded list of AssetsList that were removed or throw error.
  Future<String> removeAccounts(
          {required List<String> accountAddresses, dynamic hint}) =>
      bridge.removeAccountsMethodAccountsStorageImpl(
        that: this,
        accountAddresses: accountAddresses,
      );

  /// Clear storage and remove all data.
  /// Returns true or throw error
  Future<bool> clear({dynamic hint}) => bridge.clearMethodAccountsStorageImpl(
        that: this,
      );

  /// Reload storage and read all data again.
  /// Returns true or throw error.
  Future<bool> reload({dynamic hint}) => bridge.reloadMethodAccountsStorageImpl(
        that: this,
      );

  /// Check if data is correct for storage.
  static Future<bool> verifyData(
          {required NekotonBridge bridge,
          required String data,
          dynamic hint}) =>
      bridge.verifyDataStaticMethodAccountsStorageImpl(data: data, hint: hint);
}

class CallerTestClass {
  final NekotonBridge bridge;
  final String instanceHash;
  final int value;

  const CallerTestClass({
    required this.bridge,
    required this.instanceHash,
    required this.value,
  });

  static Future<CallerTestClass> newCallerTestClass(
          {required NekotonBridge bridge,
          required String instanceHash,
          required int value,
          dynamic hint}) =>
      bridge.newStaticMethodCallerTestClass(
          instanceHash: instanceHash, value: value, hint: hint);

  Future<void> callSomeFunc({dynamic hint}) =>
      bridge.callSomeFuncMethodCallerTestClass(
        that: this,
      );
}

/// Instruction for dart side that should call some method of some class instance.
class DartCallStub {
  /// Hash is unique id for any instance of any class, used to identify where to call method
  final String instanceHash;

  /// name of function that should be called
  final String fnName;

  /// List of positional arguments in function
  final List<DynamicValue> args;

  /// List of named arguments of function, empty if no such arguments
  final List<DynamicNamedValue> namedArgs;

  const DartCallStub({
    required this.instanceHash,
    required this.fnName,
    required this.args,
    required this.namedArgs,
  });
}

/// Registered call of dart function that is tracked in rust side
class DartCallStubRegistred {
  /// Unique identifier of call of some method
  final String? id;

  /// Call itself
  final DartCallStub stub;

  const DartCallStubRegistred({
    this.id,
    required this.stub,
  });
}

/// Value of function call that should be placed in dart as named parameter.
/// EX: void funcCall({int? valueName}) -> DynamicNamedValue(name: "valueName", value: DynamicValue::U32(10))
class DynamicNamedValue {
  final String name;
  final DynamicValue? value;

  const DynamicNamedValue({
    required this.name,
    this.value,
  });
}

@freezed
class DynamicValue with _$DynamicValue {
  const factory DynamicValue.u16(
    int field0,
  ) = DynamicValue_U16;
  const factory DynamicValue.u32(
    int field0,
  ) = DynamicValue_U32;
  const factory DynamicValue.i32(
    int field0,
  ) = DynamicValue_I32;
  const factory DynamicValue.u64(
    int field0,
  ) = DynamicValue_U64;
  const factory DynamicValue.i64(
    int field0,
  ) = DynamicValue_I64;
  const factory DynamicValue.f32(
    double field0,
  ) = DynamicValue_F32;
  const factory DynamicValue.f64(
    double field0,
  ) = DynamicValue_F64;
  const factory DynamicValue.string(
    String field0,
  ) = DynamicValue_String;
  const factory DynamicValue.vecU8(
    Uint8List field0,
  ) = DynamicValue_VecU8;
  const factory DynamicValue.megaStruct(
    String field0,
  ) = DynamicValue_MegaStruct;
  const factory DynamicValue.error(
    ErrorCode field0,
  ) = DynamicValue_Error;
  const factory DynamicValue.none() = DynamicValue_None;
}

enum ErrorCode {
  Ok,
  Network,
  Generic,
  InvokeException,
}

/// Wrapper struct above GeneratedKey with suitable type for generation
class GeneratedKeyG {
  final List<String> words;
  final MnemonicType accountType;

  const GeneratedKeyG({
    required this.words,
    required this.accountType,
  });
}

class GenericContractDartWrapper {
  final NekotonBridge bridge;
  final ArcGenericContractBoxTrait innerContract;

  const GenericContractDartWrapper({
    required this.bridge,
    required this.innerContract,
  });

  /// Create GenericContract by subscribing to its instance.
  /// address - address of contract
  /// preload_transactions - if transactions must be loaded during creation
  static Future<GenericContractDartWrapper> subscribe(
          {required NekotonBridge bridge,
          required String instanceHash,
          required String address,
          required bool preloadTransactions,
          required ArcTransportBoxTrait transport,
          dynamic hint}) =>
      bridge.subscribeStaticMethodGenericContractDartWrapper(
          instanceHash: instanceHash,
          address: address,
          preloadTransactions: preloadTransactions,
          transport: transport,
          hint: hint);

  /// Get address of contract.
  Future<String> address({dynamic hint}) =>
      bridge.addressMethodGenericContractDartWrapper(
        that: this,
      );

  /// Get json-encoded ContractState or throw error.
  Future<String> contractState({dynamic hint}) =>
      bridge.contractStateMethodGenericContractDartWrapper(
        that: this,
      );

  /// Get list of json-encoded PendingTransaction or throw error.
  Future<String> pendingTransactions({dynamic hint}) =>
      bridge.pendingTransactionsMethodGenericContractDartWrapper(
        that: this,
      );

  /// Get PollingMethod of contract or throw error.
  Future<PollingMethod> pollingMethod({dynamic hint}) =>
      bridge.pollingMethodMethodGenericContractDartWrapper(
        that: this,
      );

  /// Execute transaction locally and return its instance.
  /// signed_message - json-encoded SignedMessage
  /// options - additional info for execution
  /// Return json-encoded Transaction or throw error.
  Future<String> executeTransactionLocally(
          {required String signedMessage,
          required TransactionExecutionOptions options,
          dynamic hint}) =>
      bridge.executeTransactionLocallyMethodGenericContractDartWrapper(
        that: this,
        signedMessage: signedMessage,
        options: options,
      );

  /// Calculate fees for transaction.
  /// signed_message - json-encoded SignedMessage.
  /// Returns fees as string representation of u128 or throw error.
  Future<String> estimateFees({required String signedMessage, dynamic hint}) =>
      bridge.estimateFeesMethodGenericContractDartWrapper(
        that: this,
        signedMessage: signedMessage,
      );

  /// Send message to blockchain and receive transaction of send.
  /// signed_message - json-encoded SignedMessage.
  /// Returns json-encoded PendingTransaction or throw error.
  Future<String> send({required String signedMessage, dynamic hint}) =>
      bridge.sendMethodGenericContractDartWrapper(
        that: this,
        signedMessage: signedMessage,
      );

  /// Refresh contract and update its data.
  /// Returns true or throw error.
  Future<bool> refresh({dynamic hint}) =>
      bridge.refreshMethodGenericContractDartWrapper(
        that: this,
      );

  /// Preload transactions of contract.
  /// from_lt - offset for loading data, string representation of u64
  /// Returns true or throw error.
  Future<bool> preloadTransactions({required String fromLt, dynamic hint}) =>
      bridge.preloadTransactionsMethodGenericContractDartWrapper(
        that: this,
        fromLt: fromLt,
      );

  /// Handle block of blockchain.
  /// block - base64-encoded Block.
  /// Return true or throw error.
  Future<bool> handleBlock({required String block, dynamic hint}) =>
      bridge.handleBlockMethodGenericContractDartWrapper(
        that: this,
        block: block,
      );
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/external/gql_connection_api.rs
///----------------------------
/// This is a wrapper structure above GqlConnectionBoxTrait to provide instance in dart side.
class GqlConnectionDartWrapper {
  final NekotonBridge bridge;
  final ArcGqlConnectionBoxTrait innerConnection;

  const GqlConnectionDartWrapper({
    required this.bridge,
    required this.innerConnection,
  });

  static Future<GqlConnectionDartWrapper> newGqlConnectionDartWrapper(
          {required NekotonBridge bridge,
          required bool isLocal,
          required String instanceHash,
          dynamic hint}) =>
      bridge.newStaticMethodGqlConnectionDartWrapper(
          isLocal: isLocal, instanceHash: instanceHash, hint: hint);
}

/// Wrapper structure above GqlTransport that provides interface to communicate with it
/// via TransportBoxTrait.
class GqlTransportImpl {
  final NekotonBridge bridge;
  final ArcTransportBoxTrait innerTransport;

  const GqlTransportImpl({
    required this.bridge,
    required this.innerTransport,
  });

  static Future<GqlTransportImpl> newGqlTransportImpl(
          {required NekotonBridge bridge,
          required GqlConnectionDartWrapper gqlConnection,
          dynamic hint}) =>
      bridge.newStaticMethodGqlTransportImpl(
          gqlConnection: gqlConnection, hint: hint);

  /// Get contract state of address and return json-encoded RawContractState or throw error
  Future<String> getContractState({required String address, dynamic hint}) =>
      bridge.getContractStateMethodGqlTransportImpl(
        that: this,
        address: address,
      );

  /// Get full contract state of address and return json-encoded FullContractState or throw error
  Future<String?> getFullContractState(
          {required String address, dynamic hint}) =>
      bridge.getFullContractStateMethodGqlTransportImpl(
        that: this,
        address: address,
      );

  /// Get list of accounts by code hash. Returns json-encoded AccountsList or throw error
  Future<String> getAccountsByCodeHash(
          {required String codeHash,
          required int limit,
          String? continuation,
          dynamic hint}) =>
      bridge.getAccountsByCodeHashMethodGqlTransportImpl(
        that: this,
        codeHash: codeHash,
        limit: limit,
        continuation: continuation,
      );

  /// Get list of transactions by address.
  /// Return json-encoded TransactionsList or throw error
  Future<String> getTransactions(
          {required String address,
          String? fromLt,
          required int count,
          dynamic hint}) =>
      bridge.getTransactionsMethodGqlTransportImpl(
        that: this,
        address: address,
        fromLt: fromLt,
        count: count,
      );

  /// Get single transaction by its hash.
  /// Return json-encoded Transaction or throw error
  Future<String?> getTransaction({required String hash, dynamic hint}) =>
      bridge.getTransactionMethodGqlTransportImpl(
        that: this,
        hash: hash,
      );

  /// Call get_dst_transaction of nekoton's transport and
  /// return option json-encoded RawTransaction or throw error
  Future<String?> getDstTransaction(
          {required String messageHash, dynamic hint}) =>
      bridge.getDstTransactionMethodGqlTransportImpl(
        that: this,
        messageHash: messageHash,
      );

  /// Get transport signature id and return it or throw error
  Future<int?> getSignatureId({dynamic hint}) =>
      bridge.getSignatureIdMethodGqlTransportImpl(
        that: this,
      );

  /// Get config of transport.
  /// Returns json-encoded BlockchainConfigDef or throw error
  Future<String> getBlockchainConfig({required bool force, dynamic hint}) =>
      bridge.getBlockchainConfigMethodGqlTransportImpl(
        that: this,
        force: force,
      );

  /// Get id of network or throw error
  Future<int> getNetworkId({dynamic hint}) =>
      bridge.getNetworkIdMethodGqlTransportImpl(
        that: this,
      );

  /// Get latest block by address and return it or throw error
  Future<LatestBlock> getLatestBlock({required String address, dynamic hint}) =>
      bridge.getLatestBlockMethodGqlTransportImpl(
        that: this,
        address: address,
      );

  /// Get transport block by id and return base64 encoded block or throw error
  Future<String> getBlock({required String id, dynamic hint}) =>
      bridge.getBlockMethodGqlTransportImpl(
        that: this,
        id: id,
      );

  /// Wait until next block will come to blockchain and return its id or throw error
  /// timeout - in milliseconds
  Future<String> waitForNextBlock(
          {required String currentBlockId,
          required String address,
          required int timeout,
          dynamic hint}) =>
      bridge.waitForNextBlockMethodGqlTransportImpl(
        that: this,
        currentBlockId: currentBlockId,
        address: address,
        timeout: timeout,
      );
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/external/jrpc_connection_api.rs
///----------------------------
/// This is a wrapper structure above JrpcConnectionBoxTrait to provide instance in dart side.
class JrpcConnectionDartWrapper {
  final NekotonBridge bridge;
  final ArcJrpcConnectionBoxTrait innerConnection;

  const JrpcConnectionDartWrapper({
    required this.bridge,
    required this.innerConnection,
  });

  static Future<JrpcConnectionDartWrapper> newJrpcConnectionDartWrapper(
          {required NekotonBridge bridge,
          required String instanceHash,
          dynamic hint}) =>
      bridge.newStaticMethodJrpcConnectionDartWrapper(
          instanceHash: instanceHash, hint: hint);
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/transport/jrpc_transport_api.rs
///----------------------------
/// Wrapper structure above JrpcTransport that provides interface to communicate with it
/// via TransportBoxTrait.
class JrpcTransportImpl {
  final NekotonBridge bridge;
  final ArcTransportBoxTrait innerTransport;

  const JrpcTransportImpl({
    required this.bridge,
    required this.innerTransport,
  });

  static Future<JrpcTransportImpl> newJrpcTransportImpl(
          {required NekotonBridge bridge,
          required JrpcConnectionDartWrapper jrpcConnection,
          dynamic hint}) =>
      bridge.newStaticMethodJrpcTransportImpl(
          jrpcConnection: jrpcConnection, hint: hint);

  /// Get contract state of address and return json-encoded RawContractState or throw error
  Future<String> getContractState({required String address, dynamic hint}) =>
      bridge.getContractStateMethodJrpcTransportImpl(
        that: this,
        address: address,
      );

  /// Get full contract state of address and return json-encoded FullContractState or throw error
  Future<String?> getFullContractState(
          {required String address, dynamic hint}) =>
      bridge.getFullContractStateMethodJrpcTransportImpl(
        that: this,
        address: address,
      );

  /// Get list of accounts by code hash. Returns json-encoded AccountsList or throw error
  Future<String> getAccountsByCodeHash(
          {required String codeHash,
          required int limit,
          String? continuation,
          dynamic hint}) =>
      bridge.getAccountsByCodeHashMethodJrpcTransportImpl(
        that: this,
        codeHash: codeHash,
        limit: limit,
        continuation: continuation,
      );

  /// Get list of transactions by address.
  /// Return json-encoded TransactionsList or throw error
  Future<String> getTransactions(
          {required String address,
          String? fromLt,
          required int count,
          dynamic hint}) =>
      bridge.getTransactionsMethodJrpcTransportImpl(
        that: this,
        address: address,
        fromLt: fromLt,
        count: count,
      );

  /// Get single transaction by its hash.
  /// Return json-encoded Transaction or throw error
  Future<String?> getTransaction({required String hash, dynamic hint}) =>
      bridge.getTransactionMethodJrpcTransportImpl(
        that: this,
        hash: hash,
      );

  /// Call get_dst_transaction of nekoton's transport and
  /// return option json-encoded RawTransaction or throw error
  Future<String?> getDstTransaction(
          {required String messageHash, dynamic hint}) =>
      bridge.getDstTransactionMethodJrpcTransportImpl(
        that: this,
        messageHash: messageHash,
      );

  /// Get transport signature id and return it or throw error
  Future<int?> getSignatureId({dynamic hint}) =>
      bridge.getSignatureIdMethodJrpcTransportImpl(
        that: this,
      );

  /// Get config of transport.
  /// Returns json-encoded BlockchainConfigDef or throw error
  Future<String> getBlockchainConfig({required bool force, dynamic hint}) =>
      bridge.getBlockchainConfigMethodJrpcTransportImpl(
        that: this,
        force: force,
      );

  /// Get id of network or throw error
  Future<int> getNetworkId({dynamic hint}) =>
      bridge.getNetworkIdMethodJrpcTransportImpl(
        that: this,
      );
}

@freezed
class KeySigner with _$KeySigner {
  const factory KeySigner.encrypted() = KeySigner_Encrypted;
  const factory KeySigner.derived() = KeySigner_Derived;
  const factory KeySigner.ledger() = KeySigner_Ledger;

  /// Do not use this type. This is fucking hack because generator don't want generate
  /// converter for Vec<KeySigner> if it is simple enum
  const factory KeySigner.stub(
    bool field0,
  ) = KeySigner_Stub;
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/core/keystore/keystore_api.rs
///----------------------------
class KeystoreDartWrapper {
  final NekotonBridge bridge;
  final ArcKeyStoreApiBoxTrait innerKeystore;

  const KeystoreDartWrapper({
    required this.bridge,
    required this.innerKeystore,
  });

  /// Create KeyStore or throw error
  static Future<KeystoreDartWrapper> newKeystoreDartWrapper(
          {required NekotonBridge bridge,
          required StorageDartWrapper storage,
          required List<KeySigner> signers,
          LedgerConnectionDartWrapper? ledgerConnection,
          dynamic hint}) =>
      bridge.newStaticMethodKeystoreDartWrapper(
          storage: storage,
          signers: signers,
          ledgerConnection: ledgerConnection,
          hint: hint);

  /// Get list of json-encoded KeyStoreEntry or throw error
  Future<String> getEntries({dynamic hint}) =>
      bridge.getEntriesMethodKeystoreDartWrapper(
        that: this,
      );

  /// Insert new key in keystore. Returns json-encoded KeystoreEntry or throw error.
  /// input - json-encoded action specified for signer eg EncryptedKeyCreateInput or
  ///   DerivedKeyCreateInput or LedgerKeyCreateInput
  Future<String> addKey(
          {required KeySigner signer, required String input, dynamic hint}) =>
      bridge.addKeyMethodKeystoreDartWrapper(
        that: this,
        signer: signer,
        input: input,
      );

  /// Method same as add_key but allows add multiple keys at time.
  /// Returns json-encoded list of KeyStoreEntry or throw error.
  /// input - json-encoded list of inputs, same as in add_key method
  Future<String> addKeys(
          {required KeySigner signer, required String input, dynamic hint}) =>
      bridge.addKeysMethodKeystoreDartWrapper(
        that: this,
        signer: signer,
        input: input,
      );

  /// Update key data.
  /// Returns updated json-encoded KeyStoreEntry or throw error.
  /// input - json-encoded action specified for signer eg EncryptedKeyUpdateParams or
  ///   DerivedKeyUpdateParams or LedgerUpdateKeyInput
  Future<String> updateKey(
          {required KeySigner signer, required String input, dynamic hint}) =>
      bridge.updateKeyMethodKeystoreDartWrapper(
        that: this,
        signer: signer,
        input: input,
      );

  /// Export key and get its seed phrase and mnemonic type.
  /// THIS METHOD DO NOT WORK for LEDGER.
  /// Returns json-encoded EncryptedKeyExportSeedOutput or DerivedKeyExportOutput or throw error
  Future<String> exportSeed(
          {required KeySigner signer, required String input, dynamic hint}) =>
      bridge.exportSeedMethodKeystoreDartWrapper(
        that: this,
        signer: signer,
        input: input,
      );

  /// Return list of public keys specified for signer or throw error.
  /// input - json-encoded action specified for signer eg EncryptedKeyGetPublicKeys or
  ///   DerivedKeyGetPublicKeys or LedgerKeyGetPublicKeys
  Future<List<String>> getPublicKeys(
          {required KeySigner signer, required String input, dynamic hint}) =>
      bridge.getPublicKeysMethodKeystoreDartWrapper(
        that: this,
        signer: signer,
        input: input,
      );

  /// Encrypt data with specified algorithm and input specified for signer eg EncryptedKeyPassword
  ///   or DerivedKeyPassword or LedgerSignInput.
  /// data - base64 encoded data that must be encrypted.
  /// algorithm - name of algorithm that should be used for encryption, for example ChaCha20Poly1305
  /// public_keys - list of keys that is used for encryption.
  ///
  /// Returns json-encoded list of EncryptedData or throw error.
  Future<String> encrypt(
          {required KeySigner signer,
          required String data,
          required List<String> publicKeys,
          required String algorithm,
          required String input,
          dynamic hint}) =>
      bridge.encryptMethodKeystoreDartWrapper(
        that: this,
        signer: signer,
        data: data,
        publicKeys: publicKeys,
        algorithm: algorithm,
        input: input,
      );

  /// Decrypt json-encoded EncryptedData in data.
  /// input - json-encoded action for signer eg EncryptedKeyPassword or DerivedKeyPassword or
  ///   LedgerSignInput.
  /// Returns base64-encoded data or throw error.
  Future<String> decrypt(
          {required KeySigner signer,
          required String data,
          required String input,
          dynamic hint}) =>
      bridge.decryptMethodKeystoreDartWrapper(
        that: this,
        signer: signer,
        data: data,
        input: input,
      );

  /// Sign data and return base64-encoded signature or throw error.
  /// input - json-encoded action for signer eg EncryptedKeyPassword or DerivedKeyPassword or
  ///   LedgerSignInput.
  /// signature_id - id of transport
  /// data - base64-encoded data that should be signed.
  Future<String> sign(
          {required KeySigner signer,
          required String data,
          required String input,
          int? signatureId,
          dynamic hint}) =>
      bridge.signMethodKeystoreDartWrapper(
        that: this,
        signer: signer,
        data: data,
        input: input,
        signatureId: signatureId,
      );

  /// Same method as sign.
  /// data - base64-encoded string.
  /// Return SignedData or throw error.
  Future<SignedData> signData(
          {required KeySigner signer,
          required String data,
          required String input,
          int? signatureId,
          dynamic hint}) =>
      bridge.signDataMethodKeystoreDartWrapper(
        that: this,
        signer: signer,
        data: data,
        input: input,
        signatureId: signatureId,
      );

  /// Same method as sign.
  /// data - base64-encoded string.
  /// Return SignedDataRaw or throw error.
  Future<SignedDataRaw> signDataRaw(
          {required KeySigner signer,
          required String data,
          required String input,
          int? signatureId,
          dynamic hint}) =>
      bridge.signDataRawMethodKeystoreDartWrapper(
        that: this,
        signer: signer,
        data: data,
        input: input,
        signatureId: signatureId,
      );

  /// Remove public key from KeyStore and return json-encoded KeyStoreEntry if it was removed.
  Future<String?> removeKey({required String publicKey, dynamic hint}) =>
      bridge.removeKeyMethodKeystoreDartWrapper(
        that: this,
        publicKey: publicKey,
      );

  /// Remove list of public key from KeyStore and return json-encoded list of KeyStoreEntry's
  /// that were removed or throw error.
  Future<String> removeKeys({required List<String> publicKeys, dynamic hint}) =>
      bridge.removeKeysMethodKeystoreDartWrapper(
        that: this,
        publicKeys: publicKeys,
      );

  /// Check if password cached for specified public_key.
  /// duration - timestamp in milliseconds of expiring key.
  /// Returns true/false or throw error.
  Future<bool> isPasswordCached(
          {required String publicKey, required int duration, dynamic hint}) =>
      bridge.isPasswordCachedMethodKeystoreDartWrapper(
        that: this,
        publicKey: publicKey,
        duration: duration,
      );

  /// Clear KeyStore and remove all entries and all sensitive data.
  Future<String> clearKeystore({dynamic hint}) =>
      bridge.clearKeystoreMethodKeystoreDartWrapper(
        that: this,
      );

  /// Try to reload all stored data.
  Future<String> reloadKeystore({dynamic hint}) =>
      bridge.reloadKeystoreMethodKeystoreDartWrapper(
        that: this,
      );

  /// Verify if data is valid with specified signers and connection or not.
  /// Return true/false or throw error.
  static Future<bool> verifyData(
          {required NekotonBridge bridge,
          required List<KeySigner> signers,
          LedgerConnectionDartWrapper? ledgerConnection,
          required String data,
          dynamic hint}) =>
      bridge.verifyDataStaticMethodKeystoreDartWrapper(
          signers: signers,
          ledgerConnection: ledgerConnection,
          data: data,
          hint: hint);
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/transport/gql_transport_api.rs
///----------------------------
class LatestBlock {
  final String id;
  final int endLt;
  final int genUtime;

  const LatestBlock({
    required this.id,
    required this.endLt,
    required this.genUtime,
  });
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/external/ledger_connection_api.rs
///----------------------------
/// This is a wrapper structure above LedgerConnectionBoxTrait to provide instance in dart side.
class LedgerConnectionDartWrapper {
  final NekotonBridge bridge;
  final ArcLedgerConnectionBoxTrait innerConnection;

  const LedgerConnectionDartWrapper({
    required this.bridge,
    required this.innerConnection,
  });

  static Future<LedgerConnectionDartWrapper> newLedgerConnectionDartWrapper(
          {required NekotonBridge bridge,
          required String instanceHash,
          dynamic hint}) =>
      bridge.newStaticMethodLedgerConnectionDartWrapper(
          instanceHash: instanceHash, hint: hint);
}

/// Implementation of nekoton's LedgerConnection
class LedgerConnectionImpl {
  final NekotonBridge bridge;
  final String instanceHash;

  const LedgerConnectionImpl({
    required this.bridge,
    required this.instanceHash,
  });

  static Future<LedgerConnectionImpl> newLedgerConnectionImpl(
          {required NekotonBridge bridge,
          required String instanceHash,
          dynamic hint}) =>
      bridge.newStaticMethodLedgerConnectionImpl(
          instanceHash: instanceHash, hint: hint);
}

/// Log entry
class LogEntry {
  final int timeMillis;
  final LogLevel level;
  final String tag;
  final String msg;
  final String? stack;

  const LogEntry({
    required this.timeMillis,
    required this.level,
    required this.tag,
    required this.msg,
    this.stack,
  });
}

enum LogLevel {
  Trace,
  Debug,
  Info,
  Warn,
  Error,
}

@freezed
class MnemonicType with _$MnemonicType {
  const factory MnemonicType.legacy() = MnemonicType_Legacy;
  const factory MnemonicType.labs(
    int field0,
  ) = MnemonicType_Labs;
}

class MyClass {
  final NekotonBridge bridge;
  final int val;

  const MyClass({
    required this.bridge,
    required this.val,
  });

  static Future<MyClass> newMyClass(
          {required NekotonBridge bridge, required int a, dynamic hint}) =>
      bridge.newStaticMethodMyClass(a: a, hint: hint);

  Future<String> myFormat({dynamic hint}) => bridge.myFormatMethodMyClass(
        that: this,
      );
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/core/ton_wallet/ton_wallet_api.rs
///----------------------------
enum PollingMethod {
  /// Manual polling once a minute or by a click.
  /// Used when there are no pending transactions
  Manual,

  /// Block-walking for GQL or fast refresh for ADNL.
  /// Used when there are some pending transactions
  Reliable,
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/external/proto_connection_api.rs
///----------------------------
/// This is a wrapper structure above ProtoConnectionBoxTrait to provide instance in dart side.
class ProtoConnectionDartWrapper {
  final NekotonBridge bridge;
  final ArcProtoConnectionBoxTrait innerConnection;

  const ProtoConnectionDartWrapper({
    required this.bridge,
    required this.innerConnection,
  });

  static Future<ProtoConnectionDartWrapper> newProtoConnectionDartWrapper(
          {required NekotonBridge bridge,
          required String instanceHash,
          dynamic hint}) =>
      bridge.newStaticMethodProtoConnectionDartWrapper(
          instanceHash: instanceHash, hint: hint);
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/transport/proto_transport_api.rs
///----------------------------
/// Wrapper structure above ProtoTransport that provides interface to communicate with it
/// via TransportBoxTrait.
class ProtoTransportImpl {
  final NekotonBridge bridge;
  final ArcTransportBoxTrait innerTransport;

  const ProtoTransportImpl({
    required this.bridge,
    required this.innerTransport,
  });

  static Future<ProtoTransportImpl> newProtoTransportImpl(
          {required NekotonBridge bridge,
          required ProtoConnectionDartWrapper protoConnection,
          dynamic hint}) =>
      bridge.newStaticMethodProtoTransportImpl(
          protoConnection: protoConnection, hint: hint);

  /// Get contract state of address and return json-encoded RawContractState or throw error
  Future<String> getContractState({required String address, dynamic hint}) =>
      bridge.getContractStateMethodProtoTransportImpl(
        that: this,
        address: address,
      );

  /// Get full contract state of address and return json-encoded FullContractState or throw error
  Future<String?> getFullContractState(
          {required String address, dynamic hint}) =>
      bridge.getFullContractStateMethodProtoTransportImpl(
        that: this,
        address: address,
      );

  /// Get list of accounts by code hash. Returns json-encoded AccountsList or throw error
  Future<String> getAccountsByCodeHash(
          {required String codeHash,
          required int limit,
          String? continuation,
          dynamic hint}) =>
      bridge.getAccountsByCodeHashMethodProtoTransportImpl(
        that: this,
        codeHash: codeHash,
        limit: limit,
        continuation: continuation,
      );

  /// Get list of transactions by address.
  /// Return json-encoded TransactionsList or throw error
  Future<String> getTransactions(
          {required String address,
          String? fromLt,
          required int count,
          dynamic hint}) =>
      bridge.getTransactionsMethodProtoTransportImpl(
        that: this,
        address: address,
        fromLt: fromLt,
        count: count,
      );

  /// Get single transaction by its hash.
  /// Return json-encoded Transaction or throw error
  Future<String?> getTransaction({required String hash, dynamic hint}) =>
      bridge.getTransactionMethodProtoTransportImpl(
        that: this,
        hash: hash,
      );

  /// Call get_dst_transaction of nekoton's transport and
  /// return option json-encoded RawTransaction or throw error
  Future<String?> getDstTransaction(
          {required String messageHash, dynamic hint}) =>
      bridge.getDstTransactionMethodProtoTransportImpl(
        that: this,
        messageHash: messageHash,
      );

  /// Get transport signature id and return it or throw error
  Future<int?> getSignatureId({dynamic hint}) =>
      bridge.getSignatureIdMethodProtoTransportImpl(
        that: this,
      );

  /// Get config of transport.
  /// Returns json-encoded BlockchainConfigDef or throw error
  Future<String> getBlockchainConfig({required bool force, dynamic hint}) =>
      bridge.getBlockchainConfigMethodProtoTransportImpl(
        that: this,
        force: force,
      );

  /// Get id of network or throw error
  Future<int> getNetworkId({dynamic hint}) =>
      bridge.getNetworkIdMethodProtoTransportImpl(
        that: this,
      );
}

/// Structure that is used with signing data
/// high and low looks like: 0x{hex_data}
class SignatureParts {
  /// symbols before 32-th
  final String low;

  /// symbols after 32-th
  final String high;

  const SignatureParts({
    required this.low,
    required this.high,
  });
}

/// Structure that is used with signing data
class SignedData {
  /// hex encoded hash
  final String dataHash;

  /// base64 encoded data
  final String signature;

  /// hex encoded data
  final String signatureHex;

  /// Signatures
  final SignatureParts signatureParts;

  const SignedData({
    required this.dataHash,
    required this.signature,
    required this.signatureHex,
    required this.signatureParts,
  });
}

/// Structure that is used with signing data
class SignedDataRaw {
  /// base64 encoded data
  final String signature;

  /// hex encoded data
  final String signatureHex;

  /// Signatures
  final SignatureParts signatureParts;

  const SignedDataRaw({
    required this.signature,
    required this.signatureHex,
    required this.signatureParts,
  });
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/external/storage_api.rs
///----------------------------
/// This is a wrapper structure above StorageBoxTrait to provide instance in dart side.
class StorageDartWrapper {
  final NekotonBridge bridge;
  final ArcStorageBoxTrait innerStorage;

  const StorageDartWrapper({
    required this.bridge,
    required this.innerStorage,
  });

  static Future<StorageDartWrapper> newStorageDartWrapper(
          {required NekotonBridge bridge,
          required String instanceHash,
          dynamic hint}) =>
      bridge.newStaticMethodStorageDartWrapper(
          instanceHash: instanceHash, hint: hint);
}

/// Implementation of nekoton's Storage
class StorageImpl {
  final NekotonBridge bridge;
  final String instanceHash;

  const StorageImpl({
    required this.bridge,
    required this.instanceHash,
  });

  static Future<StorageImpl> newStorageImpl(
          {required NekotonBridge bridge,
          required String instanceHash,
          dynamic hint}) =>
      bridge.newStaticMethodStorageImpl(instanceHash: instanceHash, hint: hint);
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/core/token_wallet/token_wallet_api.rs
///----------------------------
class TokenWalletDartWrapper {
  final NekotonBridge bridge;
  final ArcTokenWalletBoxTrait innerWallet;

  const TokenWalletDartWrapper({
    required this.bridge,
    required this.innerWallet,
  });

  /// Create TokenWallet by subscribing to its instance.
  /// owner - address of account that is owner of wallet
  /// root_token_contract - address of contract in blockchain
  static Future<TokenWalletDartWrapper> subscribe(
          {required NekotonBridge bridge,
          required String instanceHash,
          required String owner,
          required String rootTokenContract,
          required ArcTransportBoxTrait transport,
          dynamic hint}) =>
      bridge.subscribeStaticMethodTokenWalletDartWrapper(
          instanceHash: instanceHash,
          owner: owner,
          rootTokenContract: rootTokenContract,
          transport: transport,
          hint: hint);

  /// Get address of owner of wallet.
  Future<String> owner({dynamic hint}) =>
      bridge.ownerMethodTokenWalletDartWrapper(
        that: this,
      );

  /// Get address of wallet.
  Future<String> address({dynamic hint}) =>
      bridge.addressMethodTokenWalletDartWrapper(
        that: this,
      );

  /// Get symbol of contract of wallet.
  /// Return json-encoded Symbol or throw error
  Future<String> symbol({dynamic hint}) =>
      bridge.symbolMethodTokenWalletDartWrapper(
        that: this,
      );

  /// Get json-encoded TokenWalletVersion or throw error.
  Future<String> version({dynamic hint}) =>
      bridge.versionMethodTokenWalletDartWrapper(
        that: this,
      );

  /// Get balance of wallet.
  /// Return string representation of rust BigUInt
  Future<String> balance({dynamic hint}) =>
      bridge.balanceMethodTokenWalletDartWrapper(
        that: this,
      );

  /// Get json-encoded ContractState or throw error.
  Future<String> contractState({dynamic hint}) =>
      bridge.contractStateMethodTokenWalletDartWrapper(
        that: this,
      );

  /// Prepare transferring tokens from this wallet to other.
  /// destination - address of account that should receive token
  /// amount - amount of tokens that should be transferred
  /// notify_receiver - if receiver should be notifier by blockchain
  /// payload - payload of transfer aka comment
  /// attached_amount - string representation of rust u64, default 400000000. How many native tokens
  ///   should be attached to transfer.
  /// Return json-encoded InternalMessage or throw error.
  Future<String> prepareTransfer(
          {required String destination,
          required String amount,
          required bool notifyReceiver,
          String? attachedAmount,
          String? payload,
          dynamic hint}) =>
      bridge.prepareTransferMethodTokenWalletDartWrapper(
        that: this,
        destination: destination,
        amount: amount,
        notifyReceiver: notifyReceiver,
        attachedAmount: attachedAmount,
        payload: payload,
      );

  /// Refresh wallet and update its data.
  /// Returns true or throw error.
  Future<bool> refresh({dynamic hint}) =>
      bridge.refreshMethodTokenWalletDartWrapper(
        that: this,
      );

  /// Preload transactions of wallet.
  /// from_lt - offset for loading data, string representation of u64
  /// Returns true or throw error.
  Future<bool> preloadTransactions({required String fromLt, dynamic hint}) =>
      bridge.preloadTransactionsMethodTokenWalletDartWrapper(
        that: this,
        fromLt: fromLt,
      );

  /// Handle block of blockchain.
  /// block - base64-encoded Block.
  /// Return true or throw error.
  Future<bool> handleBlock({required String block, dynamic hint}) =>
      bridge.handleBlockMethodTokenWalletDartWrapper(
        that: this,
        block: block,
      );

  /// Get details about token wallet by address of wallet
  /// address - address of wallet
  /// Return json-encoded list with 2 positions:
  /// 0: TokenWalletDetails
  /// 1: RootTokenContractDetails
  /// or throw error
  static Future<String> getTokenWalletDetails(
          {required NekotonBridge bridge,
          required ArcTransportBoxTrait transport,
          required String address,
          dynamic hint}) =>
      bridge.getTokenWalletDetailsStaticMethodTokenWalletDartWrapper(
          transport: transport, address: address, hint: hint);

  /// Get details about root contract by address of TokenWallet
  /// Return json-encoded list with 2 positions:
  /// 0: Address of root contract
  /// 1: RootTokenContractDetails of root contract
  /// or throw error.
  static Future<String> getTokenRootDetailsFromTokenWallet(
          {required NekotonBridge bridge,
          required ArcTransportBoxTrait transport,
          required String tokenWalletAddress,
          dynamic hint}) =>
      bridge
          .getTokenRootDetailsFromTokenWalletStaticMethodTokenWalletDartWrapper(
              transport: transport,
              tokenWalletAddress: tokenWalletAddress,
              hint: hint);
}

class TonWalletDartWrapper {
  final NekotonBridge bridge;
  final ArcTonWalletBoxTrait innerWallet;

  const TonWalletDartWrapper({
    required this.bridge,
    required this.innerWallet,
  });

  /// Create TonWallet by subscribing to its instance by public_key.
  /// wallet_type - is json-encoded WalletType.
  /// public_key - is string representation of key
  static Future<TonWalletDartWrapper> subscribe(
          {required NekotonBridge bridge,
          required String instanceHash,
          required int workchainId,
          required String publicKey,
          required String walletType,
          required ArcTransportBoxTrait transport,
          dynamic hint}) =>
      bridge.subscribeStaticMethodTonWalletDartWrapper(
          instanceHash: instanceHash,
          workchainId: workchainId,
          publicKey: publicKey,
          walletType: walletType,
          transport: transport,
          hint: hint);

  /// Create TonWallet by subscribing to its instance by address of wallet.
  static Future<TonWalletDartWrapper> subscribeByAddress(
          {required NekotonBridge bridge,
          required String instanceHash,
          required String address,
          required ArcTransportBoxTrait transport,
          dynamic hint}) =>
      bridge.subscribeByAddressStaticMethodTonWalletDartWrapper(
          instanceHash: instanceHash,
          address: address,
          transport: transport,
          hint: hint);

  /// Create TonWallet by subscribing to its instance by existed instance.
  /// existing_wallet - json-encoded ExistingWalletInfo.
  static Future<TonWalletDartWrapper> subscribeByExisting(
          {required NekotonBridge bridge,
          required String instanceHash,
          required String existingWallet,
          required ArcTransportBoxTrait transport,
          dynamic hint}) =>
      bridge.subscribeByExistingStaticMethodTonWalletDartWrapper(
          instanceHash: instanceHash,
          existingWallet: existingWallet,
          transport: transport,
          hint: hint);

  /// Get workchain of wallet.
  Future<int> workchain({dynamic hint}) =>
      bridge.workchainMethodTonWalletDartWrapper(
        that: this,
      );

  /// Get address of wallet.
  Future<String> address({dynamic hint}) =>
      bridge.addressMethodTonWalletDartWrapper(
        that: this,
      );

  /// Get public key of wallet.
  Future<String> publicKey({dynamic hint}) =>
      bridge.publicKeyMethodTonWalletDartWrapper(
        that: this,
      );

  /// Get json-encoded WalletType or throw error.
  Future<String> walletType({dynamic hint}) =>
      bridge.walletTypeMethodTonWalletDartWrapper(
        that: this,
      );

  /// Get json-encoded ContractState or throw error.
  Future<String> contractState({dynamic hint}) =>
      bridge.contractStateMethodTonWalletDartWrapper(
        that: this,
      );

  /// Get list of json-encoded PendingTransaction or throw error.
  Future<String> pendingTransactions({dynamic hint}) =>
      bridge.pendingTransactionsMethodTonWalletDartWrapper(
        that: this,
      );

  /// Get PollingMethod of wallet or throw error.
  Future<PollingMethod> pollingMethod({dynamic hint}) =>
      bridge.pollingMethodMethodTonWalletDartWrapper(
        that: this,
      );

  /// Get json-encoded TonWalletDetails or throw error.
  Future<String> details({dynamic hint}) =>
      bridge.detailsMethodTonWalletDartWrapper(
        that: this,
      );

  /// Get json-encoded list of MultisigPendingTransaction or throw error.
  Future<String> unconfirmedTransactions({dynamic hint}) =>
      bridge.unconfirmedTransactionsMethodTonWalletDartWrapper(
        that: this,
      );

  /// Get optional list of custodians.
  /// Returns list of public keys.
  Future<List<String>?> custodians({dynamic hint}) =>
      bridge.custodiansMethodTonWalletDartWrapper(
        that: this,
      );

  /// Prepare TonWallet for deploy action.
  /// expiration - json-encoded Expiration.
  /// Returns UnsignedMessage or throw error.
  Future<UnsignedMessageImpl> prepareDeploy(
          {required String expiration, dynamic hint}) =>
      bridge.prepareDeployMethodTonWalletDartWrapper(
        that: this,
        expiration: expiration,
      );

  /// Prepare TonWallet for deploy actions if wallet is multisig.
  /// expiration - json-encoded Expiration.
  /// custodians - list of public keys of custodians.
  /// req_confirms - count of required confirmations from 1 to custodians count
  /// Returns UnsignedMessage or throw error.
  Future<UnsignedMessageImpl> prepareDeployWithMultipleOwners(
          {required String expiration,
          required List<String> custodians,
          required int reqConfirms,
          dynamic hint}) =>
      bridge.prepareDeployWithMultipleOwnersMethodTonWalletDartWrapper(
        that: this,
        expiration: expiration,
        custodians: custodians,
        reqConfirms: reqConfirms,
      );

  /// Prepare transferring tokens from this wallet to other.
  /// contract_state - json-encoded RawContractState
  /// public_key - key of account that had initiated transfer
  /// destination - address of account that should receive token
  /// amount - amount of tokens that should be transferred
  /// bounce - nekoton's bounce param
  /// body - body of transfer aka comment
  /// expiration - json-encoded Expiration
  /// Returns UnsignedMessage or throw error.
  Future<UnsignedMessageImpl> prepareTransfer(
          {required String contractState,
          required String publicKey,
          required String destination,
          required String amount,
          required bool bounce,
          String? body,
          required String expiration,
          dynamic hint}) =>
      bridge.prepareTransferMethodTonWalletDartWrapper(
        that: this,
        contractState: contractState,
        publicKey: publicKey,
        destination: destination,
        amount: amount,
        bounce: bounce,
        body: body,
        expiration: expiration,
      );

  /// Prepare transaction for confirmation.
  /// contract_state - json-encoded RawContractState
  /// public_key - key of account that had initiated transfer
  /// transaction_id - id of transaction.
  /// expiration - json-encoded Expiration
  /// Returns UnsignedMessage or throw error.
  Future<UnsignedMessageImpl> prepareConfirmTransaction(
          {required String contractState,
          required String publicKey,
          required String transactionId,
          required String expiration,
          dynamic hint}) =>
      bridge.prepareConfirmTransactionMethodTonWalletDartWrapper(
        that: this,
        contractState: contractState,
        publicKey: publicKey,
        transactionId: transactionId,
        expiration: expiration,
      );

  /// Calculate fees for transaction.
  /// signed_message - json-encoded SignedMessage.
  /// Returns fees as string representation of u128 or throw error.
  Future<String> estimateFees({required String signedMessage, dynamic hint}) =>
      bridge.estimateFeesMethodTonWalletDartWrapper(
        that: this,
        signedMessage: signedMessage,
      );

  /// Send message to blockchain and receive transaction of send.
  /// signed_message - json-encoded SignedMessage.
  /// Returns json-encoded PendingTransaction or throw error.
  Future<String> send({required String signedMessage, dynamic hint}) =>
      bridge.sendMethodTonWalletDartWrapper(
        that: this,
        signedMessage: signedMessage,
      );

  /// Refresh wallet and update its data.
  /// Returns true or throw error.
  Future<bool> refresh({dynamic hint}) =>
      bridge.refreshMethodTonWalletDartWrapper(
        that: this,
      );

  /// Preload transactions of wallet.
  /// from_lt - offset for loading data, string representation of u64
  /// Returns true or throw error.
  Future<bool> preloadTransactions({required String fromLt, dynamic hint}) =>
      bridge.preloadTransactionsMethodTonWalletDartWrapper(
        that: this,
        fromLt: fromLt,
      );

  /// Handle block of blockchain.
  /// block - base64-encoded Block.
  /// Return true or throw error.
  Future<bool> handleBlock({required String block, dynamic hint}) =>
      bridge.handleBlockMethodTonWalletDartWrapper(
        that: this,
        block: block,
      );

  /// Find list of wallets of public_key and return them.
  /// wallet_types - json-encoded list of WalletType.
  /// public_key - key of account where wallets must be found.
  /// Return json-encoded list of ExistingWalletInfo or throw error.
  static Future<String> findExistingWallets(
          {required NekotonBridge bridge,
          required ArcTransportBoxTrait transport,
          required String publicKey,
          required int workchainId,
          required String walletTypes,
          dynamic hint}) =>
      bridge.findExistingWalletsStaticMethodTonWalletDartWrapper(
          transport: transport,
          publicKey: publicKey,
          workchainId: workchainId,
          walletTypes: walletTypes,
          hint: hint);

  /// Get information of account by its address.
  /// Return json-encoded ExistingWalletInfo or throw error.
  static Future<String> getExistingWalletInfo(
          {required NekotonBridge bridge,
          required ArcTransportBoxTrait transport,
          required String address,
          dynamic hint}) =>
      bridge.getExistingWalletInfoStaticMethodTonWalletDartWrapper(
          transport: transport, address: address, hint: hint);

  /// Get list of custodians of account by address.
  /// Return list of public keys or throw error.
  static Future<List<String>> getCustodians(
          {required NekotonBridge bridge,
          required ArcTransportBoxTrait transport,
          required String address,
          dynamic hint}) =>
      bridge.getCustodiansStaticMethodTonWalletDartWrapper(
          transport: transport, address: address, hint: hint);
}

///----------------------------
/// CONTENT OF src/nekoton_wrapper/core/generic_contract/generic_contract_api.rs
///----------------------------
class TransactionExecutionOptions {
  final bool disableSignatureCheck;
  final int? overrideBalance;

  const TransactionExecutionOptions({
    required this.disableSignatureCheck,
    this.overrideBalance,
  });
}

/// This struct creates only in rust side and describes UnsignedMessage
class UnsignedMessageImpl {
  final NekotonBridge bridge;
  final ArcUnsignedMessageBoxTrait innerMessage;

  const UnsignedMessageImpl({
    required this.bridge,
    required this.innerMessage,
  });

  Future<void> refreshTimeout({dynamic hint}) =>
      bridge.refreshTimeoutMethodUnsignedMessageImpl(
        that: this,
      );

  /// Return current expiration timestamp of UnsignedMessage
  /// Returns secondsSinceEpoch
  Future<int> expireAt({dynamic hint}) =>
      bridge.expireAtMethodUnsignedMessageImpl(
        that: this,
      );

  /// Returns base64 encoded hash string of UnsignedMessage
  Future<String> hash({dynamic hint}) => bridge.hashMethodUnsignedMessageImpl(
        that: this,
      );

  /// Sign message with signature and return json-encoded SignedMessage.
  /// signature receives from KeyStore.sign where data is UnsignedMessage.hash
  Future<String> sign({required String signature, dynamic hint}) =>
      bridge.signMethodUnsignedMessageImpl(
        that: this,
        signature: signature,
      );

  /// Sign message with fake signature and return json-encoded SignedMessage or throws error
  Future<String> signFake({dynamic hint}) =>
      bridge.signFakeMethodUnsignedMessageImpl(
        that: this,
      );
}

class NekotonBridgeImpl implements NekotonBridge {
  final NekotonBridgePlatform _platform;
  factory NekotonBridgeImpl(ExternalLibrary dylib) =>
      NekotonBridgeImpl.raw(NekotonBridgePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NekotonBridgeImpl.wasm(FutureOr<WasmModule> module) =>
      NekotonBridgeImpl(module as ExternalLibrary);
  NekotonBridgeImpl.raw(this._platform);
  Future<bool> verifySignature(
      {required String publicKey,
      required String data,
      required String signature,
      int? signatureId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(publicKey);
    var arg1 = _platform.api2wire_String(data);
    var arg2 = _platform.api2wire_String(signature);
    var arg3 = _platform.api2wire_opt_box_autoadd_i32(signatureId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_verify_signature(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_bool,
      constMeta: kVerifySignatureConstMeta,
      argValues: [publicKey, data, signature, signatureId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVerifySignatureConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "verify_signature",
        argNames: ["publicKey", "data", "signature", "signatureId"],
      );

  Future<GeneratedKeyG> ntGenerateKey(
      {required MnemonicType accountType, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mnemonic_type(accountType);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_nt_generate_key(port_, arg0),
      parseSuccessData: _wire2api_generated_key_g,
      constMeta: kNtGenerateKeyConstMeta,
      argValues: [accountType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNtGenerateKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "nt_generate_key",
        argNames: ["accountType"],
      );

  Future<List<String>> ntGetHints({required String input, dynamic hint}) {
    var arg0 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_nt_get_hints(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kNtGetHintsConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNtGetHintsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "nt_get_hints",
        argNames: ["input"],
      );

  Future<String> ntDeriveFromPhrase(
      {required String phrase,
      required MnemonicType mnemonicType,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(phrase);
    var arg1 = _platform.api2wire_box_autoadd_mnemonic_type(mnemonicType);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_nt_derive_from_phrase(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kNtDeriveFromPhraseConstMeta,
      argValues: [phrase, mnemonicType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNtDeriveFromPhraseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "nt_derive_from_phrase",
        argNames: ["phrase", "mnemonicType"],
      );

  Future<bool> checkPublicKey({required String publicKey, dynamic hint}) {
    var arg0 = _platform.api2wire_String(publicKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_check_public_key(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kCheckPublicKeyConstMeta,
      argValues: [publicKey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCheckPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "check_public_key",
        argNames: ["publicKey"],
      );

  Future<String> runLocal(
      {required String accountStuffBoc,
      required String contractAbi,
      required String method,
      required String input,
      required bool responsible,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(accountStuffBoc);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_String(method);
    var arg3 = _platform.api2wire_String(input);
    var arg4 = responsible;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_run_local(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_String,
      constMeta: kRunLocalConstMeta,
      argValues: [accountStuffBoc, contractAbi, method, input, responsible],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunLocalConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "run_local",
        argNames: [
          "accountStuffBoc",
          "contractAbi",
          "method",
          "input",
          "responsible"
        ],
      );

  Future<List<String>> getExpectedAddress(
      {required String tvc,
      required String contractAbi,
      required int workchainId,
      String? publicKey,
      required String initData,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(tvc);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = api2wire_i8(workchainId);
    var arg3 = _platform.api2wire_opt_String(publicKey);
    var arg4 = _platform.api2wire_String(initData);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_expected_address(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetExpectedAddressConstMeta,
      argValues: [tvc, contractAbi, workchainId, publicKey, initData],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetExpectedAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_expected_address",
        argNames: [
          "tvc",
          "contractAbi",
          "workchainId",
          "publicKey",
          "initData"
        ],
      );

  Future<String> encodeInternalInput(
      {required String contractAbi,
      required String method,
      required String input,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(contractAbi);
    var arg1 = _platform.api2wire_String(method);
    var arg2 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_encode_internal_input(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kEncodeInternalInputConstMeta,
      argValues: [contractAbi, method, input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEncodeInternalInputConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encode_internal_input",
        argNames: ["contractAbi", "method", "input"],
      );

  Future<String> createExternalMessageWithoutSignature(
      {required String dst,
      required String contractAbi,
      required String method,
      String? stateInit,
      required String input,
      required int timeout,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(dst);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_String(method);
    var arg3 = _platform.api2wire_opt_String(stateInit);
    var arg4 = _platform.api2wire_String(input);
    var arg5 = api2wire_u32(timeout);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_create_external_message_without_signature(
              port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_String,
      constMeta: kCreateExternalMessageWithoutSignatureConstMeta,
      argValues: [dst, contractAbi, method, stateInit, input, timeout],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateExternalMessageWithoutSignatureConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_external_message_without_signature",
            argNames: [
              "dst",
              "contractAbi",
              "method",
              "stateInit",
              "input",
              "timeout"
            ],
          );

  Future<UnsignedMessageImpl> createExternalMessage(
      {required String dst,
      required String contractAbi,
      required String method,
      String? stateInit,
      required String input,
      required String publicKey,
      required int timeout,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(dst);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_String(method);
    var arg3 = _platform.api2wire_opt_String(stateInit);
    var arg4 = _platform.api2wire_String(input);
    var arg5 = _platform.api2wire_String(publicKey);
    var arg6 = api2wire_u32(timeout);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_external_message(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: (d) => _wire2api_unsigned_message_impl(d),
      constMeta: kCreateExternalMessageConstMeta,
      argValues: [
        dst,
        contractAbi,
        method,
        stateInit,
        input,
        publicKey,
        timeout
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateExternalMessageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_external_message",
        argNames: [
          "dst",
          "contractAbi",
          "method",
          "stateInit",
          "input",
          "publicKey",
          "timeout"
        ],
      );

  Future<String> parseKnownPayload({required String payload, dynamic hint}) {
    var arg0 = _platform.api2wire_String(payload);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_parse_known_payload(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kParseKnownPayloadConstMeta,
      argValues: [payload],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseKnownPayloadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_known_payload",
        argNames: ["payload"],
      );

  Future<String> decodeInput(
      {required String messageBody,
      required String contractAbi,
      String? method,
      required bool internal,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(messageBody);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_opt_String(method);
    var arg3 = internal;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_decode_input(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kDecodeInputConstMeta,
      argValues: [messageBody, contractAbi, method, internal],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeInputConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_input",
        argNames: ["messageBody", "contractAbi", "method", "internal"],
      );

  Future<String> decodeEvent(
      {required String messageBody,
      required String contractAbi,
      String? event,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(messageBody);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_opt_String(event);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_decode_event(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kDecodeEventConstMeta,
      argValues: [messageBody, contractAbi, event],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeEventConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_event",
        argNames: ["messageBody", "contractAbi", "event"],
      );

  Future<String> decodeOutput(
      {required String messageBody,
      required String contractAbi,
      String? method,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(messageBody);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_opt_String(method);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_decode_output(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kDecodeOutputConstMeta,
      argValues: [messageBody, contractAbi, method],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeOutputConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_output",
        argNames: ["messageBody", "contractAbi", "method"],
      );

  Future<String> decodeTransaction(
      {required String transaction,
      required String contractAbi,
      String? method,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(transaction);
    var arg1 = _platform.api2wire_String(contractAbi);
    var arg2 = _platform.api2wire_opt_String(method);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_decode_transaction(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kDecodeTransactionConstMeta,
      argValues: [transaction, contractAbi, method],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeTransactionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_transaction",
        argNames: ["transaction", "contractAbi", "method"],
      );

  Future<String> decodeTransactionEvents(
      {required String transaction,
      required String contractAbi,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(transaction);
    var arg1 = _platform.api2wire_String(contractAbi);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_decode_transaction_events(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kDecodeTransactionEventsConstMeta,
      argValues: [transaction, contractAbi],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecodeTransactionEventsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "decode_transaction_events",
        argNames: ["transaction", "contractAbi"],
      );

  Future<String> getBocHash({required String boc, dynamic hint}) {
    var arg0 = _platform.api2wire_String(boc);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_boc_hash(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGetBocHashConstMeta,
      argValues: [boc],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBocHashConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_boc_hash",
        argNames: ["boc"],
      );

  Future<List<String>> packIntoCell(
      {required String params,
      required String tokens,
      String? version,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(params);
    var arg1 = _platform.api2wire_String(tokens);
    var arg2 = _platform.api2wire_opt_String(version);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_pack_into_cell(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_StringList,
      constMeta: kPackIntoCellConstMeta,
      argValues: [params, tokens, version],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPackIntoCellConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pack_into_cell",
        argNames: ["params", "tokens", "version"],
      );

  Future<String> unpackFromCell(
      {required String params,
      required String boc,
      required bool allowPartial,
      String? version,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(params);
    var arg1 = _platform.api2wire_String(boc);
    var arg2 = allowPartial;
    var arg3 = _platform.api2wire_opt_String(version);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_unpack_from_cell(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kUnpackFromCellConstMeta,
      argValues: [params, boc, allowPartial, version],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnpackFromCellConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "unpack_from_cell",
        argNames: ["params", "boc", "allowPartial", "version"],
      );

  Future<String> packStdSmcAddr(
      {required String addr,
      required bool base64Url,
      required bool bounceable,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(addr);
    var arg1 = base64Url;
    var arg2 = bounceable;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_pack_std_smc_addr(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kPackStdSmcAddrConstMeta,
      argValues: [addr, base64Url, bounceable],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPackStdSmcAddrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pack_std_smc_addr",
        argNames: ["addr", "base64Url", "bounceable"],
      );

  Future<String> unpackStdSmcAddr(
      {required String packed, required bool base64Url, dynamic hint}) {
    var arg0 = _platform.api2wire_String(packed);
    var arg1 = base64Url;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_unpack_std_smc_addr(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kUnpackStdSmcAddrConstMeta,
      argValues: [packed, base64Url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnpackStdSmcAddrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "unpack_std_smc_addr",
        argNames: ["packed", "base64Url"],
      );

  Future<bool> validateAddress({required String address, dynamic hint}) {
    var arg0 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_validate_address(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kValidateAddressConstMeta,
      argValues: [address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kValidateAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "validate_address",
        argNames: ["address"],
      );

  Future<String> repackAddress({required String address, dynamic hint}) {
    var arg0 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_repack_address(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kRepackAddressConstMeta,
      argValues: [address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRepackAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "repack_address",
        argNames: ["address"],
      );

  Future<String> extractPublicKey({required String boc, dynamic hint}) {
    var arg0 = _platform.api2wire_String(boc);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_extract_public_key(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kExtractPublicKeyConstMeta,
      argValues: [boc],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExtractPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "extract_public_key",
        argNames: ["boc"],
      );

  Future<List<String>> codeToTvc({required String code, dynamic hint}) {
    var arg0 = _platform.api2wire_String(code);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_code_to_tvc(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kCodeToTvcConstMeta,
      argValues: [code],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCodeToTvcConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "code_to_tvc",
        argNames: ["code"],
      );

  Future<List<String>> mergeTvc(
      {required String code, required String data, dynamic hint}) {
    var arg0 = _platform.api2wire_String(code);
    var arg1 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_merge_tvc(port_, arg0, arg1),
      parseSuccessData: _wire2api_StringList,
      constMeta: kMergeTvcConstMeta,
      argValues: [code, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMergeTvcConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "merge_tvc",
        argNames: ["code", "data"],
      );

  Future<List<String?>> splitTvc({required String tvc, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tvc);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_split_tvc(port_, arg0),
      parseSuccessData: _wire2api_list_opt_String,
      constMeta: kSplitTvcConstMeta,
      argValues: [tvc],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSplitTvcConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "split_tvc",
        argNames: ["tvc"],
      );

  Future<List<String>> setCodeSalt(
      {required String code, required String salt, dynamic hint}) {
    var arg0 = _platform.api2wire_String(code);
    var arg1 = _platform.api2wire_String(salt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_code_salt(port_, arg0, arg1),
      parseSuccessData: _wire2api_StringList,
      constMeta: kSetCodeSaltConstMeta,
      argValues: [code, salt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetCodeSaltConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_code_salt",
        argNames: ["code", "salt"],
      );

  Future<String?> getCodeSalt({required String code, dynamic hint}) {
    var arg0 = _platform.api2wire_String(code);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_code_salt(port_, arg0),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetCodeSaltConstMeta,
      argValues: [code],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetCodeSaltConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_code_salt",
        argNames: ["code"],
      );

  Future<List<String>> executeLocal(
      {required String config,
      required String account,
      required String message,
      required int utime,
      required bool disableSignatureCheck,
      String? overwriteBalance,
      int? globalId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(config);
    var arg1 = _platform.api2wire_String(account);
    var arg2 = _platform.api2wire_String(message);
    var arg3 = api2wire_u32(utime);
    var arg4 = disableSignatureCheck;
    var arg5 = _platform.api2wire_opt_String(overwriteBalance);
    var arg6 = _platform.api2wire_opt_box_autoadd_i32(globalId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_execute_local(port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_StringList,
      constMeta: kExecuteLocalConstMeta,
      argValues: [
        config,
        account,
        message,
        utime,
        disableSignatureCheck,
        overwriteBalance,
        globalId
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExecuteLocalConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "execute_local",
        argNames: [
          "config",
          "account",
          "message",
          "utime",
          "disableSignatureCheck",
          "overwriteBalance",
          "globalId"
        ],
      );

  Future<List<String?>> unpackInitData(
      {required String contractAbi, required String data, dynamic hint}) {
    var arg0 = _platform.api2wire_String(contractAbi);
    var arg1 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_unpack_init_data(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_opt_String,
      constMeta: kUnpackInitDataConstMeta,
      argValues: [contractAbi, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnpackInitDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "unpack_init_data",
        argNames: ["contractAbi", "data"],
      );

  Future<String?> unpackContractFields(
      {required String contractAbi,
      required String boc,
      required bool allowPartial,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(contractAbi);
    var arg1 = _platform.api2wire_String(boc);
    var arg2 = allowPartial;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_unpack_contract_fields(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kUnpackContractFieldsConstMeta,
      argValues: [contractAbi, boc, allowPartial],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnpackContractFieldsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "unpack_contract_fields",
        argNames: ["contractAbi", "boc", "allowPartial"],
      );

  Future<String> createRawExternalMessage(
      {required String dst,
      String? stateInit,
      String? body,
      required int timeout,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(dst);
    var arg1 = _platform.api2wire_opt_String(stateInit);
    var arg2 = _platform.api2wire_opt_String(body);
    var arg3 = api2wire_u32(timeout);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_create_raw_external_message(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kCreateRawExternalMessageConstMeta,
      argValues: [dst, stateInit, body, timeout],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateRawExternalMessageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_raw_external_message",
        argNames: ["dst", "stateInit", "body", "timeout"],
      );

  Future<String> encodeInternalMessage(
      {String? src,
      required String dst,
      required bool bounce,
      String? stateInit,
      String? body,
      required String amount,
      bool? bounced,
      dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(src);
    var arg1 = _platform.api2wire_String(dst);
    var arg2 = bounce;
    var arg3 = _platform.api2wire_opt_String(stateInit);
    var arg4 = _platform.api2wire_opt_String(body);
    var arg5 = _platform.api2wire_String(amount);
    var arg6 = _platform.api2wire_opt_box_autoadd_bool(bounced);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_encode_internal_message(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_String,
      constMeta: kEncodeInternalMessageConstMeta,
      argValues: [src, dst, bounce, stateInit, body, amount, bounced],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEncodeInternalMessageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "encode_internal_message",
        argNames: [
          "src",
          "dst",
          "bounce",
          "stateInit",
          "body",
          "amount",
          "bounced"
        ],
      );

  Future<String> makeFullAccountBoc({String? accountStuffBoc, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(accountStuffBoc);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_make_full_account_boc(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMakeFullAccountBocConstMeta,
      argValues: [accountStuffBoc],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMakeFullAccountBocConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "make_full_account_boc",
        argNames: ["accountStuffBoc"],
      );

  Future<String?> parseFullAccountBoc({required String account, dynamic hint}) {
    var arg0 = _platform.api2wire_String(account);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_parse_full_account_boc(port_, arg0),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kParseFullAccountBocConstMeta,
      argValues: [account],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseFullAccountBocConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_full_account_boc",
        argNames: ["account"],
      );

  Future<void> testLoggerInfo({required String string, dynamic hint}) {
    var arg0 = _platform.api2wire_String(string);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_logger_info(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kTestLoggerInfoConstMeta,
      argValues: [string],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestLoggerInfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_logger_info",
        argNames: ["string"],
      );

  Future<void> testLoggerDebug({required String string, dynamic hint}) {
    var arg0 = _platform.api2wire_String(string);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_logger_debug(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kTestLoggerDebugConstMeta,
      argValues: [string],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestLoggerDebugConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_logger_debug",
        argNames: ["string"],
      );

  Future<void> testLoggerWarn({required String string, dynamic hint}) {
    var arg0 = _platform.api2wire_String(string);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_logger_warn(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kTestLoggerWarnConstMeta,
      argValues: [string],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestLoggerWarnConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_logger_warn",
        argNames: ["string"],
      );

  Future<void> testLoggerError({required String string, dynamic hint}) {
    var arg0 = _platform.api2wire_String(string);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_logger_error(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kTestLoggerErrorConstMeta,
      argValues: [string],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestLoggerErrorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_logger_error",
        argNames: ["string"],
      );

  Future<void> testLoggerPanic({required String string, dynamic hint}) {
    var arg0 = _platform.api2wire_String(string);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_logger_panic(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kTestLoggerPanicConstMeta,
      argValues: [string],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestLoggerPanicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_logger_panic",
        argNames: ["string"],
      );

  Future<DynamicValue> testCallerCallTest0Async(
      {required String string, required bool needResult, dynamic hint}) {
    var arg0 = _platform.api2wire_String(string);
    var arg1 = needResult;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_test_caller_call_test0_async(port_, arg0, arg1),
      parseSuccessData: _wire2api_dynamic_value,
      constMeta: kTestCallerCallTest0AsyncConstMeta,
      argValues: [string, needResult],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestCallerCallTest0AsyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_caller_call_test0_async",
        argNames: ["string", "needResult"],
      );

  DynamicValue testCallerCallTest0Sync(
      {required String string, required bool needResult, dynamic hint}) {
    var arg0 = _platform.api2wire_String(string);
    var arg1 = needResult;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_test_caller_call_test0_sync(arg0, arg1),
      parseSuccessData: _wire2api_dynamic_value,
      constMeta: kTestCallerCallTest0SyncConstMeta,
      argValues: [string, needResult],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestCallerCallTest0SyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_caller_call_test0_sync",
        argNames: ["string", "needResult"],
      );

  Future<DynamicValue> testCallerCallTest1Async(
      {required String string, required bool needResult, dynamic hint}) {
    var arg0 = _platform.api2wire_String(string);
    var arg1 = needResult;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_test_caller_call_test1_async(port_, arg0, arg1),
      parseSuccessData: _wire2api_dynamic_value,
      constMeta: kTestCallerCallTest1AsyncConstMeta,
      argValues: [string, needResult],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestCallerCallTest1AsyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_caller_call_test1_async",
        argNames: ["string", "needResult"],
      );

  Future<void> initLogger(
      {required LogLevel level, required bool mobileLogger, dynamic hint}) {
    var arg0 = api2wire_log_level(level);
    var arg1 = mobileLogger;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_logger(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitLoggerConstMeta,
      argValues: [level, mobileLogger],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitLoggerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_logger",
        argNames: ["level", "mobileLogger"],
      );

  Stream<LogEntry> createLogStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_log_stream(port_),
      parseSuccessData: _wire2api_log_entry,
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  Future<void> initRuntime({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_runtime(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitRuntimeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitRuntimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_runtime",
        argNames: [],
      );

  Stream<DartCallStubRegistred> initCaller({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_caller(port_),
      parseSuccessData: _wire2api_dart_call_stub_registred,
      constMeta: kInitCallerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitCallerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_caller",
        argNames: [],
      );

  void callSendResult(
      {required String id, required DynamicValue value, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_box_autoadd_dynamic_value(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_call_send_result(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kCallSendResultConstMeta,
      argValues: [id, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCallSendResultConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "call_send_result",
        argNames: ["id", "value"],
      );

  Future<void> setClockOffset({required int offsetMs, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(offsetMs);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_clock_offset(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetClockOffsetConstMeta,
      argValues: [offsetMs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetClockOffsetConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_clock_offset",
        argNames: ["offsetMs"],
      );

  Future<void> simpleLog({required String string, dynamic hint}) {
    var arg0 = _platform.api2wire_String(string);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_log(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimpleLogConstMeta,
      argValues: [string],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleLogConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_log",
        argNames: ["string"],
      );

  Future<void> simplePanic({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_panic(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimplePanicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimplePanicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_panic",
        argNames: [],
      );

  int simpleAdderSync({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_simple_adder_sync(arg0, arg1),
      parseSuccessData: _wire2api_i32,
      constMeta: kSimpleAdderSyncConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleAdderSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_adder_sync",
        argNames: ["a", "b"],
      );

  Future<int> simpleAdder({required int a, required int b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_i32(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_adder(port_, arg0, arg1),
      parseSuccessData: _wire2api_i32,
      constMeta: kSimpleAdderConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleAdderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_adder",
        argNames: ["a", "b"],
      );

  Future<DynamicValue> stubDv({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stub_dv(port_),
      parseSuccessData: _wire2api_dynamic_value,
      constMeta: kStubDvConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStubDvConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stub_dv",
        argNames: [],
      );

  Future<DartCallStub> stubDcs({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stub_dcs(port_),
      parseSuccessData: _wire2api_dart_call_stub,
      constMeta: kStubDcsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStubDcsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stub_dcs",
        argNames: [],
      );

  Future<void> simpleCallDart({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_call_dart(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimpleCallDartConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleCallDartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_call_dart",
        argNames: [],
      );

  Future<void> stubCallDart({required DartCallStub stub, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_dart_call_stub(stub);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stub_call_dart(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kStubCallDartConstMeta,
      argValues: [stub],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStubCallDartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stub_call_dart",
        argNames: ["stub"],
      );

  Future<void> simpleCallFunc0({required bool needResult, dynamic hint}) {
    var arg0 = needResult;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_call_func0(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimpleCallFunc0ConstMeta,
      argValues: [needResult],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc0ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_call_func0",
        argNames: ["needResult"],
      );

  Future<void> simpleCallFunc1({required bool needResult, dynamic hint}) {
    var arg0 = needResult;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_call_func1(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimpleCallFunc1ConstMeta,
      argValues: [needResult],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc1ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_call_func1",
        argNames: ["needResult"],
      );

  Future<void> simpleCallFunc2({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_call_func2(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimpleCallFunc2ConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc2ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_call_func2",
        argNames: [],
      );

  Future<void> simpleCallFunc3({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_simple_call_func3(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kSimpleCallFunc3ConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSimpleCallFunc3ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "simple_call_func3",
        argNames: [],
      );

  Future<void> refreshTimeoutMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_unsigned_message_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_refresh_timeout__method__UnsignedMessageImpl(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kRefreshTimeoutMethodUnsignedMessageImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRefreshTimeoutMethodUnsignedMessageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "refresh_timeout__method__UnsignedMessageImpl",
            argNames: ["that"],
          );

  Future<int> expireAtMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_unsigned_message_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_expire_at__method__UnsignedMessageImpl(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kExpireAtMethodUnsignedMessageImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kExpireAtMethodUnsignedMessageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "expire_at__method__UnsignedMessageImpl",
            argNames: ["that"],
          );

  Future<String> hashMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_unsigned_message_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_hash__method__UnsignedMessageImpl(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kHashMethodUnsignedMessageImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHashMethodUnsignedMessageImplConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "hash__method__UnsignedMessageImpl",
        argNames: ["that"],
      );

  Future<String> signMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that,
      required String signature,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_unsigned_message_impl(that);
    var arg1 = _platform.api2wire_String(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_sign__method__UnsignedMessageImpl(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSignMethodUnsignedMessageImplConstMeta,
      argValues: [that, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignMethodUnsignedMessageImplConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign__method__UnsignedMessageImpl",
        argNames: ["that", "signature"],
      );

  Future<String> signFakeMethodUnsignedMessageImpl(
      {required UnsignedMessageImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_unsigned_message_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_sign_fake__method__UnsignedMessageImpl(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kSignFakeMethodUnsignedMessageImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSignFakeMethodUnsignedMessageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "sign_fake__method__UnsignedMessageImpl",
            argNames: ["that"],
          );

  Future<GqlTransportImpl> newStaticMethodGqlTransportImpl(
      {required GqlConnectionDartWrapper gqlConnection, dynamic hint}) {
    var arg0 = _platform
        .api2wire_box_autoadd_gql_connection_dart_wrapper(gqlConnection);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__GqlTransportImpl(port_, arg0),
      parseSuccessData: (d) => _wire2api_gql_transport_impl(d),
      constMeta: kNewStaticMethodGqlTransportImplConstMeta,
      argValues: [gqlConnection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodGqlTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__GqlTransportImpl",
            argNames: ["gqlConnection"],
          );

  Future<String> getContractStateMethodGqlTransportImpl(
      {required GqlTransportImpl that, required String address, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_gql_transport_impl(that);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_contract_state__method__GqlTransportImpl(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kGetContractStateMethodGqlTransportImplConstMeta,
      argValues: [that, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetContractStateMethodGqlTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_contract_state__method__GqlTransportImpl",
            argNames: ["that", "address"],
          );

  Future<String?> getFullContractStateMethodGqlTransportImpl(
      {required GqlTransportImpl that, required String address, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_gql_transport_impl(that);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_full_contract_state__method__GqlTransportImpl(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetFullContractStateMethodGqlTransportImplConstMeta,
      argValues: [that, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetFullContractStateMethodGqlTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_full_contract_state__method__GqlTransportImpl",
            argNames: ["that", "address"],
          );

  Future<String> getAccountsByCodeHashMethodGqlTransportImpl(
      {required GqlTransportImpl that,
      required String codeHash,
      required int limit,
      String? continuation,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_gql_transport_impl(that);
    var arg1 = _platform.api2wire_String(codeHash);
    var arg2 = api2wire_u8(limit);
    var arg3 = _platform.api2wire_opt_String(continuation);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_accounts_by_code_hash__method__GqlTransportImpl(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kGetAccountsByCodeHashMethodGqlTransportImplConstMeta,
      argValues: [that, codeHash, limit, continuation],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetAccountsByCodeHashMethodGqlTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_accounts_by_code_hash__method__GqlTransportImpl",
            argNames: ["that", "codeHash", "limit", "continuation"],
          );

  Future<String> getTransactionsMethodGqlTransportImpl(
      {required GqlTransportImpl that,
      required String address,
      String? fromLt,
      required int count,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_gql_transport_impl(that);
    var arg1 = _platform.api2wire_String(address);
    var arg2 = _platform.api2wire_opt_String(fromLt);
    var arg3 = api2wire_u8(count);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_transactions__method__GqlTransportImpl(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kGetTransactionsMethodGqlTransportImplConstMeta,
      argValues: [that, address, fromLt, count],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionsMethodGqlTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_transactions__method__GqlTransportImpl",
            argNames: ["that", "address", "fromLt", "count"],
          );

  Future<String?> getTransactionMethodGqlTransportImpl(
      {required GqlTransportImpl that, required String hash, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_gql_transport_impl(that);
    var arg1 = _platform.api2wire_String(hash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_transaction__method__GqlTransportImpl(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetTransactionMethodGqlTransportImplConstMeta,
      argValues: [that, hash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionMethodGqlTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_transaction__method__GqlTransportImpl",
            argNames: ["that", "hash"],
          );

  Future<String?> getDstTransactionMethodGqlTransportImpl(
      {required GqlTransportImpl that,
      required String messageHash,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_gql_transport_impl(that);
    var arg1 = _platform.api2wire_String(messageHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_dst_transaction__method__GqlTransportImpl(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetDstTransactionMethodGqlTransportImplConstMeta,
      argValues: [that, messageHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetDstTransactionMethodGqlTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_dst_transaction__method__GqlTransportImpl",
            argNames: ["that", "messageHash"],
          );

  Future<int?> getSignatureIdMethodGqlTransportImpl(
      {required GqlTransportImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_gql_transport_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_signature_id__method__GqlTransportImpl(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_i32,
      constMeta: kGetSignatureIdMethodGqlTransportImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetSignatureIdMethodGqlTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_signature_id__method__GqlTransportImpl",
            argNames: ["that"],
          );

  Future<String> getBlockchainConfigMethodGqlTransportImpl(
      {required GqlTransportImpl that, required bool force, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_gql_transport_impl(that);
    var arg1 = force;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_blockchain_config__method__GqlTransportImpl(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kGetBlockchainConfigMethodGqlTransportImplConstMeta,
      argValues: [that, force],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetBlockchainConfigMethodGqlTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_blockchain_config__method__GqlTransportImpl",
            argNames: ["that", "force"],
          );

  Future<int> getNetworkIdMethodGqlTransportImpl(
      {required GqlTransportImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_gql_transport_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_network_id__method__GqlTransportImpl(port_, arg0),
      parseSuccessData: _wire2api_i32,
      constMeta: kGetNetworkIdMethodGqlTransportImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetNetworkIdMethodGqlTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_network_id__method__GqlTransportImpl",
            argNames: ["that"],
          );

  Future<LatestBlock> getLatestBlockMethodGqlTransportImpl(
      {required GqlTransportImpl that, required String address, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_gql_transport_impl(that);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_latest_block__method__GqlTransportImpl(port_, arg0, arg1),
      parseSuccessData: _wire2api_latest_block,
      constMeta: kGetLatestBlockMethodGqlTransportImplConstMeta,
      argValues: [that, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetLatestBlockMethodGqlTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_latest_block__method__GqlTransportImpl",
            argNames: ["that", "address"],
          );

  Future<String> getBlockMethodGqlTransportImpl(
      {required GqlTransportImpl that, required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_gql_transport_impl(that);
    var arg1 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_block__method__GqlTransportImpl(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kGetBlockMethodGqlTransportImplConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBlockMethodGqlTransportImplConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_block__method__GqlTransportImpl",
        argNames: ["that", "id"],
      );

  Future<String> waitForNextBlockMethodGqlTransportImpl(
      {required GqlTransportImpl that,
      required String currentBlockId,
      required String address,
      required int timeout,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_gql_transport_impl(that);
    var arg1 = _platform.api2wire_String(currentBlockId);
    var arg2 = _platform.api2wire_String(address);
    var arg3 = _platform.api2wire_u64(timeout);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_wait_for_next_block__method__GqlTransportImpl(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kWaitForNextBlockMethodGqlTransportImplConstMeta,
      argValues: [that, currentBlockId, address, timeout],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kWaitForNextBlockMethodGqlTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "wait_for_next_block__method__GqlTransportImpl",
            argNames: ["that", "currentBlockId", "address", "timeout"],
          );

  Future<ProtoTransportImpl> newStaticMethodProtoTransportImpl(
      {required ProtoConnectionDartWrapper protoConnection, dynamic hint}) {
    var arg0 = _platform
        .api2wire_box_autoadd_proto_connection_dart_wrapper(protoConnection);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__ProtoTransportImpl(port_, arg0),
      parseSuccessData: (d) => _wire2api_proto_transport_impl(d),
      constMeta: kNewStaticMethodProtoTransportImplConstMeta,
      argValues: [protoConnection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodProtoTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__ProtoTransportImpl",
            argNames: ["protoConnection"],
          );

  Future<String> getContractStateMethodProtoTransportImpl(
      {required ProtoTransportImpl that,
      required String address,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_proto_transport_impl(that);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_contract_state__method__ProtoTransportImpl(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kGetContractStateMethodProtoTransportImplConstMeta,
      argValues: [that, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetContractStateMethodProtoTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_contract_state__method__ProtoTransportImpl",
            argNames: ["that", "address"],
          );

  Future<String?> getFullContractStateMethodProtoTransportImpl(
      {required ProtoTransportImpl that,
      required String address,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_proto_transport_impl(that);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_full_contract_state__method__ProtoTransportImpl(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetFullContractStateMethodProtoTransportImplConstMeta,
      argValues: [that, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetFullContractStateMethodProtoTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_full_contract_state__method__ProtoTransportImpl",
            argNames: ["that", "address"],
          );

  Future<String> getAccountsByCodeHashMethodProtoTransportImpl(
      {required ProtoTransportImpl that,
      required String codeHash,
      required int limit,
      String? continuation,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_proto_transport_impl(that);
    var arg1 = _platform.api2wire_String(codeHash);
    var arg2 = api2wire_u8(limit);
    var arg3 = _platform.api2wire_opt_String(continuation);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_accounts_by_code_hash__method__ProtoTransportImpl(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kGetAccountsByCodeHashMethodProtoTransportImplConstMeta,
      argValues: [that, codeHash, limit, continuation],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetAccountsByCodeHashMethodProtoTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_accounts_by_code_hash__method__ProtoTransportImpl",
            argNames: ["that", "codeHash", "limit", "continuation"],
          );

  Future<String> getTransactionsMethodProtoTransportImpl(
      {required ProtoTransportImpl that,
      required String address,
      String? fromLt,
      required int count,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_proto_transport_impl(that);
    var arg1 = _platform.api2wire_String(address);
    var arg2 = _platform.api2wire_opt_String(fromLt);
    var arg3 = api2wire_u8(count);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_transactions__method__ProtoTransportImpl(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kGetTransactionsMethodProtoTransportImplConstMeta,
      argValues: [that, address, fromLt, count],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionsMethodProtoTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_transactions__method__ProtoTransportImpl",
            argNames: ["that", "address", "fromLt", "count"],
          );

  Future<String?> getTransactionMethodProtoTransportImpl(
      {required ProtoTransportImpl that, required String hash, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_proto_transport_impl(that);
    var arg1 = _platform.api2wire_String(hash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_transaction__method__ProtoTransportImpl(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetTransactionMethodProtoTransportImplConstMeta,
      argValues: [that, hash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionMethodProtoTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_transaction__method__ProtoTransportImpl",
            argNames: ["that", "hash"],
          );

  Future<String?> getDstTransactionMethodProtoTransportImpl(
      {required ProtoTransportImpl that,
      required String messageHash,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_proto_transport_impl(that);
    var arg1 = _platform.api2wire_String(messageHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_dst_transaction__method__ProtoTransportImpl(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetDstTransactionMethodProtoTransportImplConstMeta,
      argValues: [that, messageHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetDstTransactionMethodProtoTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_dst_transaction__method__ProtoTransportImpl",
            argNames: ["that", "messageHash"],
          );

  Future<int?> getSignatureIdMethodProtoTransportImpl(
      {required ProtoTransportImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_proto_transport_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_signature_id__method__ProtoTransportImpl(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_i32,
      constMeta: kGetSignatureIdMethodProtoTransportImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetSignatureIdMethodProtoTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_signature_id__method__ProtoTransportImpl",
            argNames: ["that"],
          );

  Future<String> getBlockchainConfigMethodProtoTransportImpl(
      {required ProtoTransportImpl that, required bool force, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_proto_transport_impl(that);
    var arg1 = force;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_blockchain_config__method__ProtoTransportImpl(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kGetBlockchainConfigMethodProtoTransportImplConstMeta,
      argValues: [that, force],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetBlockchainConfigMethodProtoTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_blockchain_config__method__ProtoTransportImpl",
            argNames: ["that", "force"],
          );

  Future<int> getNetworkIdMethodProtoTransportImpl(
      {required ProtoTransportImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_proto_transport_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_network_id__method__ProtoTransportImpl(port_, arg0),
      parseSuccessData: _wire2api_i32,
      constMeta: kGetNetworkIdMethodProtoTransportImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetNetworkIdMethodProtoTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_network_id__method__ProtoTransportImpl",
            argNames: ["that"],
          );

  Future<JrpcTransportImpl> newStaticMethodJrpcTransportImpl(
      {required JrpcConnectionDartWrapper jrpcConnection, dynamic hint}) {
    var arg0 = _platform
        .api2wire_box_autoadd_jrpc_connection_dart_wrapper(jrpcConnection);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__JrpcTransportImpl(port_, arg0),
      parseSuccessData: (d) => _wire2api_jrpc_transport_impl(d),
      constMeta: kNewStaticMethodJrpcTransportImplConstMeta,
      argValues: [jrpcConnection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodJrpcTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__JrpcTransportImpl",
            argNames: ["jrpcConnection"],
          );

  Future<String> getContractStateMethodJrpcTransportImpl(
      {required JrpcTransportImpl that,
      required String address,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_jrpc_transport_impl(that);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_contract_state__method__JrpcTransportImpl(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kGetContractStateMethodJrpcTransportImplConstMeta,
      argValues: [that, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetContractStateMethodJrpcTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_contract_state__method__JrpcTransportImpl",
            argNames: ["that", "address"],
          );

  Future<String?> getFullContractStateMethodJrpcTransportImpl(
      {required JrpcTransportImpl that,
      required String address,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_jrpc_transport_impl(that);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_full_contract_state__method__JrpcTransportImpl(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetFullContractStateMethodJrpcTransportImplConstMeta,
      argValues: [that, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetFullContractStateMethodJrpcTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_full_contract_state__method__JrpcTransportImpl",
            argNames: ["that", "address"],
          );

  Future<String> getAccountsByCodeHashMethodJrpcTransportImpl(
      {required JrpcTransportImpl that,
      required String codeHash,
      required int limit,
      String? continuation,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_jrpc_transport_impl(that);
    var arg1 = _platform.api2wire_String(codeHash);
    var arg2 = api2wire_u8(limit);
    var arg3 = _platform.api2wire_opt_String(continuation);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_accounts_by_code_hash__method__JrpcTransportImpl(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kGetAccountsByCodeHashMethodJrpcTransportImplConstMeta,
      argValues: [that, codeHash, limit, continuation],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetAccountsByCodeHashMethodJrpcTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_accounts_by_code_hash__method__JrpcTransportImpl",
            argNames: ["that", "codeHash", "limit", "continuation"],
          );

  Future<String> getTransactionsMethodJrpcTransportImpl(
      {required JrpcTransportImpl that,
      required String address,
      String? fromLt,
      required int count,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_jrpc_transport_impl(that);
    var arg1 = _platform.api2wire_String(address);
    var arg2 = _platform.api2wire_opt_String(fromLt);
    var arg3 = api2wire_u8(count);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_transactions__method__JrpcTransportImpl(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kGetTransactionsMethodJrpcTransportImplConstMeta,
      argValues: [that, address, fromLt, count],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionsMethodJrpcTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_transactions__method__JrpcTransportImpl",
            argNames: ["that", "address", "fromLt", "count"],
          );

  Future<String?> getTransactionMethodJrpcTransportImpl(
      {required JrpcTransportImpl that, required String hash, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_jrpc_transport_impl(that);
    var arg1 = _platform.api2wire_String(hash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_transaction__method__JrpcTransportImpl(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetTransactionMethodJrpcTransportImplConstMeta,
      argValues: [that, hash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionMethodJrpcTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_transaction__method__JrpcTransportImpl",
            argNames: ["that", "hash"],
          );

  Future<String?> getDstTransactionMethodJrpcTransportImpl(
      {required JrpcTransportImpl that,
      required String messageHash,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_jrpc_transport_impl(that);
    var arg1 = _platform.api2wire_String(messageHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_dst_transaction__method__JrpcTransportImpl(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetDstTransactionMethodJrpcTransportImplConstMeta,
      argValues: [that, messageHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetDstTransactionMethodJrpcTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_dst_transaction__method__JrpcTransportImpl",
            argNames: ["that", "messageHash"],
          );

  Future<int?> getSignatureIdMethodJrpcTransportImpl(
      {required JrpcTransportImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_jrpc_transport_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_signature_id__method__JrpcTransportImpl(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_i32,
      constMeta: kGetSignatureIdMethodJrpcTransportImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetSignatureIdMethodJrpcTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_signature_id__method__JrpcTransportImpl",
            argNames: ["that"],
          );

  Future<String> getBlockchainConfigMethodJrpcTransportImpl(
      {required JrpcTransportImpl that, required bool force, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_jrpc_transport_impl(that);
    var arg1 = force;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_blockchain_config__method__JrpcTransportImpl(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kGetBlockchainConfigMethodJrpcTransportImplConstMeta,
      argValues: [that, force],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetBlockchainConfigMethodJrpcTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_blockchain_config__method__JrpcTransportImpl",
            argNames: ["that", "force"],
          );

  Future<int> getNetworkIdMethodJrpcTransportImpl(
      {required JrpcTransportImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_jrpc_transport_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_network_id__method__JrpcTransportImpl(port_, arg0),
      parseSuccessData: _wire2api_i32,
      constMeta: kGetNetworkIdMethodJrpcTransportImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetNetworkIdMethodJrpcTransportImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_network_id__method__JrpcTransportImpl",
            argNames: ["that"],
          );

  Future<TokenWalletDartWrapper> subscribeStaticMethodTokenWalletDartWrapper(
      {required String instanceHash,
      required String owner,
      required String rootTokenContract,
      required ArcTransportBoxTrait transport,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    var arg1 = _platform.api2wire_String(owner);
    var arg2 = _platform.api2wire_String(rootTokenContract);
    var arg3 = _platform.api2wire_ArcTransportBoxTrait(transport);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_subscribe__static_method__TokenWalletDartWrapper(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: (d) => _wire2api_token_wallet_dart_wrapper(d),
      constMeta: kSubscribeStaticMethodTokenWalletDartWrapperConstMeta,
      argValues: [instanceHash, owner, rootTokenContract, transport],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSubscribeStaticMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "subscribe__static_method__TokenWalletDartWrapper",
            argNames: [
              "instanceHash",
              "owner",
              "rootTokenContract",
              "transport"
            ],
          );

  Future<String> ownerMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_token_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_owner__method__TokenWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kOwnerMethodTokenWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kOwnerMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "owner__method__TokenWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> addressMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_token_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_address__method__TokenWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kAddressMethodTokenWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAddressMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "address__method__TokenWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> symbolMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_token_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_symbol__method__TokenWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kSymbolMethodTokenWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSymbolMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "symbol__method__TokenWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> versionMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_token_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_version__method__TokenWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kVersionMethodTokenWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kVersionMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "version__method__TokenWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> balanceMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_token_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_balance__method__TokenWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kBalanceMethodTokenWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kBalanceMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "balance__method__TokenWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> contractStateMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_token_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_contract_state__method__TokenWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kContractStateMethodTokenWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kContractStateMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "contract_state__method__TokenWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> prepareTransferMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that,
      required String destination,
      required String amount,
      required bool notifyReceiver,
      String? attachedAmount,
      String? payload,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_token_wallet_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(destination);
    var arg2 = _platform.api2wire_String(amount);
    var arg3 = notifyReceiver;
    var arg4 = _platform.api2wire_opt_String(attachedAmount);
    var arg5 = _platform.api2wire_opt_String(payload);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_prepare_transfer__method__TokenWalletDartWrapper(
              port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_String,
      constMeta: kPrepareTransferMethodTokenWalletDartWrapperConstMeta,
      argValues: [
        that,
        destination,
        amount,
        notifyReceiver,
        attachedAmount,
        payload
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPrepareTransferMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "prepare_transfer__method__TokenWalletDartWrapper",
            argNames: [
              "that",
              "destination",
              "amount",
              "notifyReceiver",
              "attachedAmount",
              "payload"
            ],
          );

  Future<bool> refreshMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_token_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_refresh__method__TokenWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kRefreshMethodTokenWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRefreshMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "refresh__method__TokenWalletDartWrapper",
            argNames: ["that"],
          );

  Future<bool> preloadTransactionsMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that,
      required String fromLt,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_token_wallet_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(fromLt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_preload_transactions__method__TokenWalletDartWrapper(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kPreloadTransactionsMethodTokenWalletDartWrapperConstMeta,
      argValues: [that, fromLt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPreloadTransactionsMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "preload_transactions__method__TokenWalletDartWrapper",
            argNames: ["that", "fromLt"],
          );

  Future<bool> handleBlockMethodTokenWalletDartWrapper(
      {required TokenWalletDartWrapper that,
      required String block,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_token_wallet_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(block);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_handle_block__method__TokenWalletDartWrapper(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kHandleBlockMethodTokenWalletDartWrapperConstMeta,
      argValues: [that, block],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kHandleBlockMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "handle_block__method__TokenWalletDartWrapper",
            argNames: ["that", "block"],
          );

  Future<String> getTokenWalletDetailsStaticMethodTokenWalletDartWrapper(
      {required ArcTransportBoxTrait transport,
      required String address,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ArcTransportBoxTrait(transport);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_token_wallet_details__static_method__TokenWalletDartWrapper(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta:
          kGetTokenWalletDetailsStaticMethodTokenWalletDartWrapperConstMeta,
      argValues: [transport, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTokenWalletDetailsStaticMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "get_token_wallet_details__static_method__TokenWalletDartWrapper",
            argNames: ["transport", "address"],
          );

  Future<String>
      getTokenRootDetailsFromTokenWalletStaticMethodTokenWalletDartWrapper(
          {required ArcTransportBoxTrait transport,
          required String tokenWalletAddress,
          dynamic hint}) {
    var arg0 = _platform.api2wire_ArcTransportBoxTrait(transport);
    var arg1 = _platform.api2wire_String(tokenWalletAddress);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_token_root_details_from_token_wallet__static_method__TokenWalletDartWrapper(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta:
          kGetTokenRootDetailsFromTokenWalletStaticMethodTokenWalletDartWrapperConstMeta,
      argValues: [transport, tokenWalletAddress],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTokenRootDetailsFromTokenWalletStaticMethodTokenWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "get_token_root_details_from_token_wallet__static_method__TokenWalletDartWrapper",
            argNames: ["transport", "tokenWalletAddress"],
          );

  Future<KeystoreDartWrapper> newStaticMethodKeystoreDartWrapper(
      {required StorageDartWrapper storage,
      required List<KeySigner> signers,
      LedgerConnectionDartWrapper? ledgerConnection,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_storage_dart_wrapper(storage);
    var arg1 = _platform.api2wire_list_key_signer(signers);
    var arg2 =
        _platform.api2wire_opt_box_autoadd_ledger_connection_dart_wrapper(
            ledgerConnection);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__KeystoreDartWrapper(
              port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_keystore_dart_wrapper(d),
      constMeta: kNewStaticMethodKeystoreDartWrapperConstMeta,
      argValues: [storage, signers, ledgerConnection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__KeystoreDartWrapper",
            argNames: ["storage", "signers", "ledgerConnection"],
          );

  Future<String> getEntriesMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_entries__method__KeystoreDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGetEntriesMethodKeystoreDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetEntriesMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_entries__method__KeystoreDartWrapper",
            argNames: ["that"],
          );

  Future<String> addKeyMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String input,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_box_autoadd_key_signer(signer);
    var arg2 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_add_key__method__KeystoreDartWrapper(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kAddKeyMethodKeystoreDartWrapperConstMeta,
      argValues: [that, signer, input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAddKeyMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "add_key__method__KeystoreDartWrapper",
            argNames: ["that", "signer", "input"],
          );

  Future<String> addKeysMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String input,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_box_autoadd_key_signer(signer);
    var arg2 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_add_keys__method__KeystoreDartWrapper(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kAddKeysMethodKeystoreDartWrapperConstMeta,
      argValues: [that, signer, input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAddKeysMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "add_keys__method__KeystoreDartWrapper",
            argNames: ["that", "signer", "input"],
          );

  Future<String> updateKeyMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String input,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_box_autoadd_key_signer(signer);
    var arg2 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_update_key__method__KeystoreDartWrapper(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kUpdateKeyMethodKeystoreDartWrapperConstMeta,
      argValues: [that, signer, input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kUpdateKeyMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "update_key__method__KeystoreDartWrapper",
            argNames: ["that", "signer", "input"],
          );

  Future<String> exportSeedMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String input,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_box_autoadd_key_signer(signer);
    var arg2 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_export_seed__method__KeystoreDartWrapper(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kExportSeedMethodKeystoreDartWrapperConstMeta,
      argValues: [that, signer, input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kExportSeedMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "export_seed__method__KeystoreDartWrapper",
            argNames: ["that", "signer", "input"],
          );

  Future<List<String>> getPublicKeysMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String input,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_box_autoadd_key_signer(signer);
    var arg2 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_public_keys__method__KeystoreDartWrapper(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetPublicKeysMethodKeystoreDartWrapperConstMeta,
      argValues: [that, signer, input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetPublicKeysMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_public_keys__method__KeystoreDartWrapper",
            argNames: ["that", "signer", "input"],
          );

  Future<String> encryptMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String data,
      required List<String> publicKeys,
      required String algorithm,
      required String input,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_box_autoadd_key_signer(signer);
    var arg2 = _platform.api2wire_String(data);
    var arg3 = _platform.api2wire_StringList(publicKeys);
    var arg4 = _platform.api2wire_String(algorithm);
    var arg5 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_encrypt__method__KeystoreDartWrapper(
              port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_String,
      constMeta: kEncryptMethodKeystoreDartWrapperConstMeta,
      argValues: [that, signer, data, publicKeys, algorithm, input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kEncryptMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "encrypt__method__KeystoreDartWrapper",
            argNames: [
              "that",
              "signer",
              "data",
              "publicKeys",
              "algorithm",
              "input"
            ],
          );

  Future<String> decryptMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String data,
      required String input,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_box_autoadd_key_signer(signer);
    var arg2 = _platform.api2wire_String(data);
    var arg3 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_decrypt__method__KeystoreDartWrapper(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kDecryptMethodKeystoreDartWrapperConstMeta,
      argValues: [that, signer, data, input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDecryptMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "decrypt__method__KeystoreDartWrapper",
            argNames: ["that", "signer", "data", "input"],
          );

  Future<String> signMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String data,
      required String input,
      int? signatureId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_box_autoadd_key_signer(signer);
    var arg2 = _platform.api2wire_String(data);
    var arg3 = _platform.api2wire_String(input);
    var arg4 = _platform.api2wire_opt_box_autoadd_i32(signatureId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_sign__method__KeystoreDartWrapper(
              port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_String,
      constMeta: kSignMethodKeystoreDartWrapperConstMeta,
      argValues: [that, signer, data, input, signatureId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignMethodKeystoreDartWrapperConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign__method__KeystoreDartWrapper",
        argNames: ["that", "signer", "data", "input", "signatureId"],
      );

  Future<SignedData> signDataMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String data,
      required String input,
      int? signatureId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_box_autoadd_key_signer(signer);
    var arg2 = _platform.api2wire_String(data);
    var arg3 = _platform.api2wire_String(input);
    var arg4 = _platform.api2wire_opt_box_autoadd_i32(signatureId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_sign_data__method__KeystoreDartWrapper(
              port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_signed_data,
      constMeta: kSignDataMethodKeystoreDartWrapperConstMeta,
      argValues: [that, signer, data, input, signatureId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSignDataMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "sign_data__method__KeystoreDartWrapper",
            argNames: ["that", "signer", "data", "input", "signatureId"],
          );

  Future<SignedDataRaw> signDataRawMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required KeySigner signer,
      required String data,
      required String input,
      int? signatureId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_box_autoadd_key_signer(signer);
    var arg2 = _platform.api2wire_String(data);
    var arg3 = _platform.api2wire_String(input);
    var arg4 = _platform.api2wire_opt_box_autoadd_i32(signatureId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_sign_data_raw__method__KeystoreDartWrapper(
              port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_signed_data_raw,
      constMeta: kSignDataRawMethodKeystoreDartWrapperConstMeta,
      argValues: [that, signer, data, input, signatureId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSignDataRawMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "sign_data_raw__method__KeystoreDartWrapper",
            argNames: ["that", "signer", "data", "input", "signatureId"],
          );

  Future<String?> removeKeyMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required String publicKey,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(publicKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_remove_key__method__KeystoreDartWrapper(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kRemoveKeyMethodKeystoreDartWrapperConstMeta,
      argValues: [that, publicKey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoveKeyMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remove_key__method__KeystoreDartWrapper",
            argNames: ["that", "publicKey"],
          );

  Future<String> removeKeysMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required List<String> publicKeys,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_StringList(publicKeys);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_remove_keys__method__KeystoreDartWrapper(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kRemoveKeysMethodKeystoreDartWrapperConstMeta,
      argValues: [that, publicKeys],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoveKeysMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remove_keys__method__KeystoreDartWrapper",
            argNames: ["that", "publicKeys"],
          );

  Future<bool> isPasswordCachedMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that,
      required String publicKey,
      required int duration,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(publicKey);
    var arg2 = _platform.api2wire_u64(duration);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_is_password_cached__method__KeystoreDartWrapper(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsPasswordCachedMethodKeystoreDartWrapperConstMeta,
      argValues: [that, publicKey, duration],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kIsPasswordCachedMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "is_password_cached__method__KeystoreDartWrapper",
            argNames: ["that", "publicKey", "duration"],
          );

  Future<String> clearKeystoreMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_clear_keystore__method__KeystoreDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kClearKeystoreMethodKeystoreDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kClearKeystoreMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "clear_keystore__method__KeystoreDartWrapper",
            argNames: ["that"],
          );

  Future<String> reloadKeystoreMethodKeystoreDartWrapper(
      {required KeystoreDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_keystore_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_reload_keystore__method__KeystoreDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kReloadKeystoreMethodKeystoreDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReloadKeystoreMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "reload_keystore__method__KeystoreDartWrapper",
            argNames: ["that"],
          );

  Future<bool> verifyDataStaticMethodKeystoreDartWrapper(
      {required List<KeySigner> signers,
      LedgerConnectionDartWrapper? ledgerConnection,
      required String data,
      dynamic hint}) {
    var arg0 = _platform.api2wire_list_key_signer(signers);
    var arg1 =
        _platform.api2wire_opt_box_autoadd_ledger_connection_dart_wrapper(
            ledgerConnection);
    var arg2 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_verify_data__static_method__KeystoreDartWrapper(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      constMeta: kVerifyDataStaticMethodKeystoreDartWrapperConstMeta,
      argValues: [signers, ledgerConnection, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kVerifyDataStaticMethodKeystoreDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "verify_data__static_method__KeystoreDartWrapper",
            argNames: ["signers", "ledgerConnection", "data"],
          );

  Future<AccountsStorageImpl> newStaticMethodAccountsStorageImpl(
      {required StorageDartWrapper storage, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_storage_dart_wrapper(storage);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__AccountsStorageImpl(port_, arg0),
      parseSuccessData: (d) => _wire2api_accounts_storage_impl(d),
      constMeta: kNewStaticMethodAccountsStorageImplConstMeta,
      argValues: [storage],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__AccountsStorageImpl",
            argNames: ["storage"],
          );

  Future<String> getEntriesMethodAccountsStorageImpl(
      {required AccountsStorageImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_accounts_storage_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_entries__method__AccountsStorageImpl(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGetEntriesMethodAccountsStorageImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetEntriesMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_entries__method__AccountsStorageImpl",
            argNames: ["that"],
          );

  Future<String> addAccountMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String account,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_accounts_storage_impl(that);
    var arg1 = _platform.api2wire_String(account);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_add_account__method__AccountsStorageImpl(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kAddAccountMethodAccountsStorageImplConstMeta,
      argValues: [that, account],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAddAccountMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "add_account__method__AccountsStorageImpl",
            argNames: ["that", "account"],
          );

  Future<String> addAccountsMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accounts,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_accounts_storage_impl(that);
    var arg1 = _platform.api2wire_String(accounts);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_add_accounts__method__AccountsStorageImpl(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kAddAccountsMethodAccountsStorageImplConstMeta,
      argValues: [that, accounts],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAddAccountsMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "add_accounts__method__AccountsStorageImpl",
            argNames: ["that", "accounts"],
          );

  Future<String> renameAccountMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accountAddress,
      required String name,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_accounts_storage_impl(that);
    var arg1 = _platform.api2wire_String(accountAddress);
    var arg2 = _platform.api2wire_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_rename_account__method__AccountsStorageImpl(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kRenameAccountMethodAccountsStorageImplConstMeta,
      argValues: [that, accountAddress, name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRenameAccountMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "rename_account__method__AccountsStorageImpl",
            argNames: ["that", "accountAddress", "name"],
          );

  Future<String> addTokenWalletMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accountAddress,
      required String networkGroup,
      required String rootTokenContract,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_accounts_storage_impl(that);
    var arg1 = _platform.api2wire_String(accountAddress);
    var arg2 = _platform.api2wire_String(networkGroup);
    var arg3 = _platform.api2wire_String(rootTokenContract);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_add_token_wallet__method__AccountsStorageImpl(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kAddTokenWalletMethodAccountsStorageImplConstMeta,
      argValues: [that, accountAddress, networkGroup, rootTokenContract],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAddTokenWalletMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "add_token_wallet__method__AccountsStorageImpl",
            argNames: [
              "that",
              "accountAddress",
              "networkGroup",
              "rootTokenContract"
            ],
          );

  Future<bool> addTokenWalletsMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accountAddress,
      required String networkGroup,
      required List<String> rootTokenContracts,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_accounts_storage_impl(that);
    var arg1 = _platform.api2wire_String(accountAddress);
    var arg2 = _platform.api2wire_String(networkGroup);
    var arg3 = _platform.api2wire_StringList(rootTokenContracts);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_add_token_wallets__method__AccountsStorageImpl(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_bool,
      constMeta: kAddTokenWalletsMethodAccountsStorageImplConstMeta,
      argValues: [that, accountAddress, networkGroup, rootTokenContracts],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAddTokenWalletsMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "add_token_wallets__method__AccountsStorageImpl",
            argNames: [
              "that",
              "accountAddress",
              "networkGroup",
              "rootTokenContracts"
            ],
          );

  Future<String> removeTokenWalletMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accountAddress,
      required String networkGroup,
      required String rootTokenContract,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_accounts_storage_impl(that);
    var arg1 = _platform.api2wire_String(accountAddress);
    var arg2 = _platform.api2wire_String(networkGroup);
    var arg3 = _platform.api2wire_String(rootTokenContract);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_remove_token_wallet__method__AccountsStorageImpl(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kRemoveTokenWalletMethodAccountsStorageImplConstMeta,
      argValues: [that, accountAddress, networkGroup, rootTokenContract],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoveTokenWalletMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remove_token_wallet__method__AccountsStorageImpl",
            argNames: [
              "that",
              "accountAddress",
              "networkGroup",
              "rootTokenContract"
            ],
          );

  Future<bool> removeTokenWalletsMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accountAddress,
      required String networkGroup,
      required List<String> rootTokenContracts,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_accounts_storage_impl(that);
    var arg1 = _platform.api2wire_String(accountAddress);
    var arg2 = _platform.api2wire_String(networkGroup);
    var arg3 = _platform.api2wire_StringList(rootTokenContracts);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_remove_token_wallets__method__AccountsStorageImpl(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_bool,
      constMeta: kRemoveTokenWalletsMethodAccountsStorageImplConstMeta,
      argValues: [that, accountAddress, networkGroup, rootTokenContracts],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoveTokenWalletsMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remove_token_wallets__method__AccountsStorageImpl",
            argNames: [
              "that",
              "accountAddress",
              "networkGroup",
              "rootTokenContracts"
            ],
          );

  Future<String?> removeAccountMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required String accountAddress,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_accounts_storage_impl(that);
    var arg1 = _platform.api2wire_String(accountAddress);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_remove_account__method__AccountsStorageImpl(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kRemoveAccountMethodAccountsStorageImplConstMeta,
      argValues: [that, accountAddress],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoveAccountMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remove_account__method__AccountsStorageImpl",
            argNames: ["that", "accountAddress"],
          );

  Future<String> removeAccountsMethodAccountsStorageImpl(
      {required AccountsStorageImpl that,
      required List<String> accountAddresses,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_accounts_storage_impl(that);
    var arg1 = _platform.api2wire_StringList(accountAddresses);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_remove_accounts__method__AccountsStorageImpl(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kRemoveAccountsMethodAccountsStorageImplConstMeta,
      argValues: [that, accountAddresses],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRemoveAccountsMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "remove_accounts__method__AccountsStorageImpl",
            argNames: ["that", "accountAddresses"],
          );

  Future<bool> clearMethodAccountsStorageImpl(
      {required AccountsStorageImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_accounts_storage_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_clear__method__AccountsStorageImpl(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kClearMethodAccountsStorageImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClearMethodAccountsStorageImplConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "clear__method__AccountsStorageImpl",
        argNames: ["that"],
      );

  Future<bool> reloadMethodAccountsStorageImpl(
      {required AccountsStorageImpl that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_accounts_storage_impl(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_reload__method__AccountsStorageImpl(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kReloadMethodAccountsStorageImplConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReloadMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "reload__method__AccountsStorageImpl",
            argNames: ["that"],
          );

  Future<bool> verifyDataStaticMethodAccountsStorageImpl(
      {required String data, dynamic hint}) {
    var arg0 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_verify_data__static_method__AccountsStorageImpl(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kVerifyDataStaticMethodAccountsStorageImplConstMeta,
      argValues: [data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kVerifyDataStaticMethodAccountsStorageImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "verify_data__static_method__AccountsStorageImpl",
            argNames: ["data"],
          );

  Future<GenericContractDartWrapper>
      subscribeStaticMethodGenericContractDartWrapper(
          {required String instanceHash,
          required String address,
          required bool preloadTransactions,
          required ArcTransportBoxTrait transport,
          dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    var arg1 = _platform.api2wire_String(address);
    var arg2 = preloadTransactions;
    var arg3 = _platform.api2wire_ArcTransportBoxTrait(transport);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_subscribe__static_method__GenericContractDartWrapper(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: (d) => _wire2api_generic_contract_dart_wrapper(d),
      constMeta: kSubscribeStaticMethodGenericContractDartWrapperConstMeta,
      argValues: [instanceHash, address, preloadTransactions, transport],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSubscribeStaticMethodGenericContractDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "subscribe__static_method__GenericContractDartWrapper",
            argNames: [
              "instanceHash",
              "address",
              "preloadTransactions",
              "transport"
            ],
          );

  Future<String> addressMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that, dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_generic_contract_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_address__method__GenericContractDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kAddressMethodGenericContractDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAddressMethodGenericContractDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "address__method__GenericContractDartWrapper",
            argNames: ["that"],
          );

  Future<String> contractStateMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that, dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_generic_contract_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_contract_state__method__GenericContractDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kContractStateMethodGenericContractDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kContractStateMethodGenericContractDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "contract_state__method__GenericContractDartWrapper",
            argNames: ["that"],
          );

  Future<String> pendingTransactionsMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that, dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_generic_contract_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_pending_transactions__method__GenericContractDartWrapper(
              port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kPendingTransactionsMethodGenericContractDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPendingTransactionsMethodGenericContractDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "pending_transactions__method__GenericContractDartWrapper",
            argNames: ["that"],
          );

  Future<PollingMethod> pollingMethodMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that, dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_generic_contract_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_polling_method__method__GenericContractDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_polling_method,
      constMeta: kPollingMethodMethodGenericContractDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPollingMethodMethodGenericContractDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "polling_method__method__GenericContractDartWrapper",
            argNames: ["that"],
          );

  Future<String> executeTransactionLocallyMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that,
      required String signedMessage,
      required TransactionExecutionOptions options,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_generic_contract_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(signedMessage);
    var arg2 =
        _platform.api2wire_box_autoadd_transaction_execution_options(options);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_execute_transaction_locally__method__GenericContractDartWrapper(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta:
          kExecuteTransactionLocallyMethodGenericContractDartWrapperConstMeta,
      argValues: [that, signedMessage, options],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kExecuteTransactionLocallyMethodGenericContractDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "execute_transaction_locally__method__GenericContractDartWrapper",
            argNames: ["that", "signedMessage", "options"],
          );

  Future<String> estimateFeesMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that,
      required String signedMessage,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_generic_contract_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(signedMessage);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_estimate_fees__method__GenericContractDartWrapper(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kEstimateFeesMethodGenericContractDartWrapperConstMeta,
      argValues: [that, signedMessage],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kEstimateFeesMethodGenericContractDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "estimate_fees__method__GenericContractDartWrapper",
            argNames: ["that", "signedMessage"],
          );

  Future<String> sendMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that,
      required String signedMessage,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_generic_contract_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(signedMessage);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_send__method__GenericContractDartWrapper(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSendMethodGenericContractDartWrapperConstMeta,
      argValues: [that, signedMessage],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSendMethodGenericContractDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "send__method__GenericContractDartWrapper",
            argNames: ["that", "signedMessage"],
          );

  Future<bool> refreshMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that, dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_generic_contract_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_refresh__method__GenericContractDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kRefreshMethodGenericContractDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRefreshMethodGenericContractDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "refresh__method__GenericContractDartWrapper",
            argNames: ["that"],
          );

  Future<bool> preloadTransactionsMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that,
      required String fromLt,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_generic_contract_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(fromLt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_preload_transactions__method__GenericContractDartWrapper(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kPreloadTransactionsMethodGenericContractDartWrapperConstMeta,
      argValues: [that, fromLt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPreloadTransactionsMethodGenericContractDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "preload_transactions__method__GenericContractDartWrapper",
            argNames: ["that", "fromLt"],
          );

  Future<bool> handleBlockMethodGenericContractDartWrapper(
      {required GenericContractDartWrapper that,
      required String block,
      dynamic hint}) {
    var arg0 =
        _platform.api2wire_box_autoadd_generic_contract_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(block);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_handle_block__method__GenericContractDartWrapper(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kHandleBlockMethodGenericContractDartWrapperConstMeta,
      argValues: [that, block],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kHandleBlockMethodGenericContractDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "handle_block__method__GenericContractDartWrapper",
            argNames: ["that", "block"],
          );

  Future<TonWalletDartWrapper> subscribeStaticMethodTonWalletDartWrapper(
      {required String instanceHash,
      required int workchainId,
      required String publicKey,
      required String walletType,
      required ArcTransportBoxTrait transport,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    var arg1 = api2wire_i8(workchainId);
    var arg2 = _platform.api2wire_String(publicKey);
    var arg3 = _platform.api2wire_String(walletType);
    var arg4 = _platform.api2wire_ArcTransportBoxTrait(transport);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_subscribe__static_method__TonWalletDartWrapper(
              port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: (d) => _wire2api_ton_wallet_dart_wrapper(d),
      constMeta: kSubscribeStaticMethodTonWalletDartWrapperConstMeta,
      argValues: [instanceHash, workchainId, publicKey, walletType, transport],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSubscribeStaticMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "subscribe__static_method__TonWalletDartWrapper",
            argNames: [
              "instanceHash",
              "workchainId",
              "publicKey",
              "walletType",
              "transport"
            ],
          );

  Future<TonWalletDartWrapper>
      subscribeByAddressStaticMethodTonWalletDartWrapper(
          {required String instanceHash,
          required String address,
          required ArcTransportBoxTrait transport,
          dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    var arg1 = _platform.api2wire_String(address);
    var arg2 = _platform.api2wire_ArcTransportBoxTrait(transport);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_subscribe_by_address__static_method__TonWalletDartWrapper(
              port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_ton_wallet_dart_wrapper(d),
      constMeta: kSubscribeByAddressStaticMethodTonWalletDartWrapperConstMeta,
      argValues: [instanceHash, address, transport],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSubscribeByAddressStaticMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "subscribe_by_address__static_method__TonWalletDartWrapper",
            argNames: ["instanceHash", "address", "transport"],
          );

  Future<TonWalletDartWrapper>
      subscribeByExistingStaticMethodTonWalletDartWrapper(
          {required String instanceHash,
          required String existingWallet,
          required ArcTransportBoxTrait transport,
          dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    var arg1 = _platform.api2wire_String(existingWallet);
    var arg2 = _platform.api2wire_ArcTransportBoxTrait(transport);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_subscribe_by_existing__static_method__TonWalletDartWrapper(
              port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_ton_wallet_dart_wrapper(d),
      constMeta: kSubscribeByExistingStaticMethodTonWalletDartWrapperConstMeta,
      argValues: [instanceHash, existingWallet, transport],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSubscribeByExistingStaticMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "subscribe_by_existing__static_method__TonWalletDartWrapper",
            argNames: ["instanceHash", "existingWallet", "transport"],
          );

  Future<int> workchainMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_workchain__method__TonWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_i8,
      constMeta: kWorkchainMethodTonWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kWorkchainMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "workchain__method__TonWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> addressMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_address__method__TonWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kAddressMethodTonWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAddressMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "address__method__TonWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> publicKeyMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_public_key__method__TonWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kPublicKeyMethodTonWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPublicKeyMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "public_key__method__TonWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> walletTypeMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_wallet_type__method__TonWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kWalletTypeMethodTonWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kWalletTypeMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "wallet_type__method__TonWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> contractStateMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_contract_state__method__TonWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kContractStateMethodTonWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kContractStateMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "contract_state__method__TonWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> pendingTransactionsMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_pending_transactions__method__TonWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kPendingTransactionsMethodTonWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPendingTransactionsMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "pending_transactions__method__TonWalletDartWrapper",
            argNames: ["that"],
          );

  Future<PollingMethod> pollingMethodMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_polling_method__method__TonWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_polling_method,
      constMeta: kPollingMethodMethodTonWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPollingMethodMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "polling_method__method__TonWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> detailsMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_details__method__TonWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDetailsMethodTonWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDetailsMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "details__method__TonWalletDartWrapper",
            argNames: ["that"],
          );

  Future<String> unconfirmedTransactionsMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_unconfirmed_transactions__method__TonWalletDartWrapper(
              port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kUnconfirmedTransactionsMethodTonWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kUnconfirmedTransactionsMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "unconfirmed_transactions__method__TonWalletDartWrapper",
            argNames: ["that"],
          );

  Future<List<String>?> custodiansMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_custodians__method__TonWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_opt_StringList,
      constMeta: kCustodiansMethodTonWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCustodiansMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "custodians__method__TonWalletDartWrapper",
            argNames: ["that"],
          );

  Future<UnsignedMessageImpl> prepareDeployMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that,
      required String expiration,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(expiration);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_prepare_deploy__method__TonWalletDartWrapper(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_unsigned_message_impl(d),
      constMeta: kPrepareDeployMethodTonWalletDartWrapperConstMeta,
      argValues: [that, expiration],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPrepareDeployMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "prepare_deploy__method__TonWalletDartWrapper",
            argNames: ["that", "expiration"],
          );

  Future<UnsignedMessageImpl>
      prepareDeployWithMultipleOwnersMethodTonWalletDartWrapper(
          {required TonWalletDartWrapper that,
          required String expiration,
          required List<String> custodians,
          required int reqConfirms,
          dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(expiration);
    var arg2 = _platform.api2wire_StringList(custodians);
    var arg3 = api2wire_u8(reqConfirms);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_prepare_deploy_with_multiple_owners__method__TonWalletDartWrapper(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: (d) => _wire2api_unsigned_message_impl(d),
      constMeta:
          kPrepareDeployWithMultipleOwnersMethodTonWalletDartWrapperConstMeta,
      argValues: [that, expiration, custodians, reqConfirms],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPrepareDeployWithMultipleOwnersMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "prepare_deploy_with_multiple_owners__method__TonWalletDartWrapper",
            argNames: ["that", "expiration", "custodians", "reqConfirms"],
          );

  Future<UnsignedMessageImpl> prepareTransferMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that,
      required String contractState,
      required String publicKey,
      required String destination,
      required String amount,
      required bool bounce,
      String? body,
      required String expiration,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(contractState);
    var arg2 = _platform.api2wire_String(publicKey);
    var arg3 = _platform.api2wire_String(destination);
    var arg4 = _platform.api2wire_String(amount);
    var arg5 = bounce;
    var arg6 = _platform.api2wire_opt_String(body);
    var arg7 = _platform.api2wire_String(expiration);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_prepare_transfer__method__TonWalletDartWrapper(
              port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7),
      parseSuccessData: (d) => _wire2api_unsigned_message_impl(d),
      constMeta: kPrepareTransferMethodTonWalletDartWrapperConstMeta,
      argValues: [
        that,
        contractState,
        publicKey,
        destination,
        amount,
        bounce,
        body,
        expiration
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPrepareTransferMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "prepare_transfer__method__TonWalletDartWrapper",
            argNames: [
              "that",
              "contractState",
              "publicKey",
              "destination",
              "amount",
              "bounce",
              "body",
              "expiration"
            ],
          );

  Future<UnsignedMessageImpl>
      prepareConfirmTransactionMethodTonWalletDartWrapper(
          {required TonWalletDartWrapper that,
          required String contractState,
          required String publicKey,
          required String transactionId,
          required String expiration,
          dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(contractState);
    var arg2 = _platform.api2wire_String(publicKey);
    var arg3 = _platform.api2wire_String(transactionId);
    var arg4 = _platform.api2wire_String(expiration);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_prepare_confirm_transaction__method__TonWalletDartWrapper(
              port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: (d) => _wire2api_unsigned_message_impl(d),
      constMeta: kPrepareConfirmTransactionMethodTonWalletDartWrapperConstMeta,
      argValues: [that, contractState, publicKey, transactionId, expiration],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPrepareConfirmTransactionMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "prepare_confirm_transaction__method__TonWalletDartWrapper",
            argNames: [
              "that",
              "contractState",
              "publicKey",
              "transactionId",
              "expiration"
            ],
          );

  Future<String> estimateFeesMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that,
      required String signedMessage,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(signedMessage);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_estimate_fees__method__TonWalletDartWrapper(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kEstimateFeesMethodTonWalletDartWrapperConstMeta,
      argValues: [that, signedMessage],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kEstimateFeesMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "estimate_fees__method__TonWalletDartWrapper",
            argNames: ["that", "signedMessage"],
          );

  Future<String> sendMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that,
      required String signedMessage,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(signedMessage);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_send__method__TonWalletDartWrapper(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSendMethodTonWalletDartWrapperConstMeta,
      argValues: [that, signedMessage],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendMethodTonWalletDartWrapperConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send__method__TonWalletDartWrapper",
        argNames: ["that", "signedMessage"],
      );

  Future<bool> refreshMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_refresh__method__TonWalletDartWrapper(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kRefreshMethodTonWalletDartWrapperConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kRefreshMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "refresh__method__TonWalletDartWrapper",
            argNames: ["that"],
          );

  Future<bool> preloadTransactionsMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that,
      required String fromLt,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(fromLt);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_preload_transactions__method__TonWalletDartWrapper(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kPreloadTransactionsMethodTonWalletDartWrapperConstMeta,
      argValues: [that, fromLt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kPreloadTransactionsMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "preload_transactions__method__TonWalletDartWrapper",
            argNames: ["that", "fromLt"],
          );

  Future<bool> handleBlockMethodTonWalletDartWrapper(
      {required TonWalletDartWrapper that,
      required String block,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ton_wallet_dart_wrapper(that);
    var arg1 = _platform.api2wire_String(block);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_handle_block__method__TonWalletDartWrapper(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kHandleBlockMethodTonWalletDartWrapperConstMeta,
      argValues: [that, block],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kHandleBlockMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "handle_block__method__TonWalletDartWrapper",
            argNames: ["that", "block"],
          );

  Future<String> findExistingWalletsStaticMethodTonWalletDartWrapper(
      {required ArcTransportBoxTrait transport,
      required String publicKey,
      required int workchainId,
      required String walletTypes,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ArcTransportBoxTrait(transport);
    var arg1 = _platform.api2wire_String(publicKey);
    var arg2 = api2wire_i8(workchainId);
    var arg3 = _platform.api2wire_String(walletTypes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_find_existing_wallets__static_method__TonWalletDartWrapper(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kFindExistingWalletsStaticMethodTonWalletDartWrapperConstMeta,
      argValues: [transport, publicKey, workchainId, walletTypes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kFindExistingWalletsStaticMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "find_existing_wallets__static_method__TonWalletDartWrapper",
            argNames: ["transport", "publicKey", "workchainId", "walletTypes"],
          );

  Future<String> getExistingWalletInfoStaticMethodTonWalletDartWrapper(
      {required ArcTransportBoxTrait transport,
      required String address,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ArcTransportBoxTrait(transport);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_existing_wallet_info__static_method__TonWalletDartWrapper(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta:
          kGetExistingWalletInfoStaticMethodTonWalletDartWrapperConstMeta,
      argValues: [transport, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetExistingWalletInfoStaticMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "get_existing_wallet_info__static_method__TonWalletDartWrapper",
            argNames: ["transport", "address"],
          );

  Future<List<String>> getCustodiansStaticMethodTonWalletDartWrapper(
      {required ArcTransportBoxTrait transport,
      required String address,
      dynamic hint}) {
    var arg0 = _platform.api2wire_ArcTransportBoxTrait(transport);
    var arg1 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_custodians__static_method__TonWalletDartWrapper(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetCustodiansStaticMethodTonWalletDartWrapperConstMeta,
      argValues: [transport, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetCustodiansStaticMethodTonWalletDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_custodians__static_method__TonWalletDartWrapper",
            argNames: ["transport", "address"],
          );

  Future<JrpcConnectionDartWrapper> newStaticMethodJrpcConnectionDartWrapper(
      {required String instanceHash, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__JrpcConnectionDartWrapper(port_, arg0),
      parseSuccessData: (d) => _wire2api_jrpc_connection_dart_wrapper(d),
      constMeta: kNewStaticMethodJrpcConnectionDartWrapperConstMeta,
      argValues: [instanceHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodJrpcConnectionDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__JrpcConnectionDartWrapper",
            argNames: ["instanceHash"],
          );

  Future<GqlConnectionDartWrapper> newStaticMethodGqlConnectionDartWrapper(
      {required bool isLocal, required String instanceHash, dynamic hint}) {
    var arg0 = isLocal;
    var arg1 = _platform.api2wire_String(instanceHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__GqlConnectionDartWrapper(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_gql_connection_dart_wrapper(d),
      constMeta: kNewStaticMethodGqlConnectionDartWrapperConstMeta,
      argValues: [isLocal, instanceHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodGqlConnectionDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__GqlConnectionDartWrapper",
            argNames: ["isLocal", "instanceHash"],
          );

  Future<ProtoConnectionDartWrapper> newStaticMethodProtoConnectionDartWrapper(
      {required String instanceHash, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__ProtoConnectionDartWrapper(port_, arg0),
      parseSuccessData: (d) => _wire2api_proto_connection_dart_wrapper(d),
      constMeta: kNewStaticMethodProtoConnectionDartWrapperConstMeta,
      argValues: [instanceHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodProtoConnectionDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__ProtoConnectionDartWrapper",
            argNames: ["instanceHash"],
          );

  Future<LedgerConnectionDartWrapper>
      newStaticMethodLedgerConnectionDartWrapper(
          {required String instanceHash, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__LedgerConnectionDartWrapper(port_, arg0),
      parseSuccessData: (d) => _wire2api_ledger_connection_dart_wrapper(d),
      constMeta: kNewStaticMethodLedgerConnectionDartWrapperConstMeta,
      argValues: [instanceHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodLedgerConnectionDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__LedgerConnectionDartWrapper",
            argNames: ["instanceHash"],
          );

  Future<LedgerConnectionImpl> newStaticMethodLedgerConnectionImpl(
      {required String instanceHash, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__LedgerConnectionImpl(port_, arg0),
      parseSuccessData: (d) => _wire2api_ledger_connection_impl(d),
      constMeta: kNewStaticMethodLedgerConnectionImplConstMeta,
      argValues: [instanceHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodLedgerConnectionImplConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__LedgerConnectionImpl",
            argNames: ["instanceHash"],
          );

  Future<StorageDartWrapper> newStaticMethodStorageDartWrapper(
      {required String instanceHash, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__StorageDartWrapper(port_, arg0),
      parseSuccessData: (d) => _wire2api_storage_dart_wrapper(d),
      constMeta: kNewStaticMethodStorageDartWrapperConstMeta,
      argValues: [instanceHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodStorageDartWrapperConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__StorageDartWrapper",
            argNames: ["instanceHash"],
          );

  Future<StorageImpl> newStaticMethodStorageImpl(
      {required String instanceHash, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new__static_method__StorageImpl(port_, arg0),
      parseSuccessData: (d) => _wire2api_storage_impl(d),
      constMeta: kNewStaticMethodStorageImplConstMeta,
      argValues: [instanceHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodStorageImplConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__StorageImpl",
        argNames: ["instanceHash"],
      );

  Future<MyClass> newStaticMethodMyClass({required int a, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new__static_method__MyClass(port_, arg0),
      parseSuccessData: (d) => _wire2api_my_class(d),
      constMeta: kNewStaticMethodMyClassConstMeta,
      argValues: [a],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodMyClassConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__MyClass",
        argNames: ["a"],
      );

  Future<String> myFormatMethodMyClass({required MyClass that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_my_class(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_my_format__method__MyClass(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMyFormatMethodMyClassConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMyFormatMethodMyClassConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "my_format__method__MyClass",
        argNames: ["that"],
      );

  Future<CallerTestClass> newStaticMethodCallerTestClass(
      {required String instanceHash, required int value, dynamic hint}) {
    var arg0 = _platform.api2wire_String(instanceHash);
    var arg1 = api2wire_i32(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__CallerTestClass(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_caller_test_class(d),
      constMeta: kNewStaticMethodCallerTestClassConstMeta,
      argValues: [instanceHash, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodCallerTestClassConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__CallerTestClass",
        argNames: ["instanceHash", "value"],
      );

  Future<void> callSomeFuncMethodCallerTestClass(
      {required CallerTestClass that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_caller_test_class(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_call_some_func__method__CallerTestClass(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kCallSomeFuncMethodCallerTestClassConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallSomeFuncMethodCallerTestClassConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_some_func__method__CallerTestClass",
            argNames: ["that"],
          );

  DropFnType get dropOpaqueArcAccountsStorageBoxTrait =>
      _platform.inner.drop_opaque_ArcAccountsStorageBoxTrait;
  ShareFnType get shareOpaqueArcAccountsStorageBoxTrait =>
      _platform.inner.share_opaque_ArcAccountsStorageBoxTrait;
  OpaqueTypeFinalizer get ArcAccountsStorageBoxTraitFinalizer =>
      _platform.ArcAccountsStorageBoxTraitFinalizer;

  DropFnType get dropOpaqueArcGenericContractBoxTrait =>
      _platform.inner.drop_opaque_ArcGenericContractBoxTrait;
  ShareFnType get shareOpaqueArcGenericContractBoxTrait =>
      _platform.inner.share_opaque_ArcGenericContractBoxTrait;
  OpaqueTypeFinalizer get ArcGenericContractBoxTraitFinalizer =>
      _platform.ArcGenericContractBoxTraitFinalizer;

  DropFnType get dropOpaqueArcGqlConnectionBoxTrait =>
      _platform.inner.drop_opaque_ArcGqlConnectionBoxTrait;
  ShareFnType get shareOpaqueArcGqlConnectionBoxTrait =>
      _platform.inner.share_opaque_ArcGqlConnectionBoxTrait;
  OpaqueTypeFinalizer get ArcGqlConnectionBoxTraitFinalizer =>
      _platform.ArcGqlConnectionBoxTraitFinalizer;

  DropFnType get dropOpaqueArcJrpcConnectionBoxTrait =>
      _platform.inner.drop_opaque_ArcJrpcConnectionBoxTrait;
  ShareFnType get shareOpaqueArcJrpcConnectionBoxTrait =>
      _platform.inner.share_opaque_ArcJrpcConnectionBoxTrait;
  OpaqueTypeFinalizer get ArcJrpcConnectionBoxTraitFinalizer =>
      _platform.ArcJrpcConnectionBoxTraitFinalizer;

  DropFnType get dropOpaqueArcKeyStoreApiBoxTrait =>
      _platform.inner.drop_opaque_ArcKeyStoreApiBoxTrait;
  ShareFnType get shareOpaqueArcKeyStoreApiBoxTrait =>
      _platform.inner.share_opaque_ArcKeyStoreApiBoxTrait;
  OpaqueTypeFinalizer get ArcKeyStoreApiBoxTraitFinalizer =>
      _platform.ArcKeyStoreApiBoxTraitFinalizer;

  DropFnType get dropOpaqueArcLedgerConnectionBoxTrait =>
      _platform.inner.drop_opaque_ArcLedgerConnectionBoxTrait;
  ShareFnType get shareOpaqueArcLedgerConnectionBoxTrait =>
      _platform.inner.share_opaque_ArcLedgerConnectionBoxTrait;
  OpaqueTypeFinalizer get ArcLedgerConnectionBoxTraitFinalizer =>
      _platform.ArcLedgerConnectionBoxTraitFinalizer;

  DropFnType get dropOpaqueArcProtoConnectionBoxTrait =>
      _platform.inner.drop_opaque_ArcProtoConnectionBoxTrait;
  ShareFnType get shareOpaqueArcProtoConnectionBoxTrait =>
      _platform.inner.share_opaque_ArcProtoConnectionBoxTrait;
  OpaqueTypeFinalizer get ArcProtoConnectionBoxTraitFinalizer =>
      _platform.ArcProtoConnectionBoxTraitFinalizer;

  DropFnType get dropOpaqueArcStorageBoxTrait =>
      _platform.inner.drop_opaque_ArcStorageBoxTrait;
  ShareFnType get shareOpaqueArcStorageBoxTrait =>
      _platform.inner.share_opaque_ArcStorageBoxTrait;
  OpaqueTypeFinalizer get ArcStorageBoxTraitFinalizer =>
      _platform.ArcStorageBoxTraitFinalizer;

  DropFnType get dropOpaqueArcTokenWalletBoxTrait =>
      _platform.inner.drop_opaque_ArcTokenWalletBoxTrait;
  ShareFnType get shareOpaqueArcTokenWalletBoxTrait =>
      _platform.inner.share_opaque_ArcTokenWalletBoxTrait;
  OpaqueTypeFinalizer get ArcTokenWalletBoxTraitFinalizer =>
      _platform.ArcTokenWalletBoxTraitFinalizer;

  DropFnType get dropOpaqueArcTonWalletBoxTrait =>
      _platform.inner.drop_opaque_ArcTonWalletBoxTrait;
  ShareFnType get shareOpaqueArcTonWalletBoxTrait =>
      _platform.inner.share_opaque_ArcTonWalletBoxTrait;
  OpaqueTypeFinalizer get ArcTonWalletBoxTraitFinalizer =>
      _platform.ArcTonWalletBoxTraitFinalizer;

  DropFnType get dropOpaqueArcTransportBoxTrait =>
      _platform.inner.drop_opaque_ArcTransportBoxTrait;
  ShareFnType get shareOpaqueArcTransportBoxTrait =>
      _platform.inner.share_opaque_ArcTransportBoxTrait;
  OpaqueTypeFinalizer get ArcTransportBoxTraitFinalizer =>
      _platform.ArcTransportBoxTraitFinalizer;

  DropFnType get dropOpaqueArcUnsignedMessageBoxTrait =>
      _platform.inner.drop_opaque_ArcUnsignedMessageBoxTrait;
  ShareFnType get shareOpaqueArcUnsignedMessageBoxTrait =>
      _platform.inner.share_opaque_ArcUnsignedMessageBoxTrait;
  OpaqueTypeFinalizer get ArcUnsignedMessageBoxTraitFinalizer =>
      _platform.ArcUnsignedMessageBoxTraitFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  ArcAccountsStorageBoxTrait _wire2api_ArcAccountsStorageBoxTrait(dynamic raw) {
    return ArcAccountsStorageBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  ArcGenericContractBoxTrait _wire2api_ArcGenericContractBoxTrait(dynamic raw) {
    return ArcGenericContractBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  ArcGqlConnectionBoxTrait _wire2api_ArcGqlConnectionBoxTrait(dynamic raw) {
    return ArcGqlConnectionBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  ArcJrpcConnectionBoxTrait _wire2api_ArcJrpcConnectionBoxTrait(dynamic raw) {
    return ArcJrpcConnectionBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  ArcKeyStoreApiBoxTrait _wire2api_ArcKeyStoreApiBoxTrait(dynamic raw) {
    return ArcKeyStoreApiBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  ArcLedgerConnectionBoxTrait _wire2api_ArcLedgerConnectionBoxTrait(
      dynamic raw) {
    return ArcLedgerConnectionBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  ArcProtoConnectionBoxTrait _wire2api_ArcProtoConnectionBoxTrait(dynamic raw) {
    return ArcProtoConnectionBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  ArcStorageBoxTrait _wire2api_ArcStorageBoxTrait(dynamic raw) {
    return ArcStorageBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  ArcTokenWalletBoxTrait _wire2api_ArcTokenWalletBoxTrait(dynamic raw) {
    return ArcTokenWalletBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  ArcTonWalletBoxTrait _wire2api_ArcTonWalletBoxTrait(dynamic raw) {
    return ArcTonWalletBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  ArcTransportBoxTrait _wire2api_ArcTransportBoxTrait(dynamic raw) {
    return ArcTransportBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  ArcUnsignedMessageBoxTrait _wire2api_ArcUnsignedMessageBoxTrait(dynamic raw) {
    return ArcUnsignedMessageBoxTrait.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  AccountsStorageImpl _wire2api_accounts_storage_impl(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AccountsStorageImpl(
      bridge: this,
      innerStorage: _wire2api_ArcAccountsStorageBoxTrait(arr[0]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  DynamicValue _wire2api_box_autoadd_dynamic_value(dynamic raw) {
    return _wire2api_dynamic_value(raw);
  }

  int _wire2api_box_autoadd_i32(dynamic raw) {
    return raw as int;
  }

  CallerTestClass _wire2api_caller_test_class(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CallerTestClass(
      bridge: this,
      instanceHash: _wire2api_String(arr[0]),
      value: _wire2api_i32(arr[1]),
    );
  }

  DartCallStub _wire2api_dart_call_stub(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DartCallStub(
      instanceHash: _wire2api_String(arr[0]),
      fnName: _wire2api_String(arr[1]),
      args: _wire2api_list_dynamic_value(arr[2]),
      namedArgs: _wire2api_list_dynamic_named_value(arr[3]),
    );
  }

  DartCallStubRegistred _wire2api_dart_call_stub_registred(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartCallStubRegistred(
      id: _wire2api_opt_String(arr[0]),
      stub: _wire2api_dart_call_stub(arr[1]),
    );
  }

  DynamicNamedValue _wire2api_dynamic_named_value(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DynamicNamedValue(
      name: _wire2api_String(arr[0]),
      value: _wire2api_opt_box_autoadd_dynamic_value(arr[1]),
    );
  }

  DynamicValue _wire2api_dynamic_value(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DynamicValue_U16(
          _wire2api_u16(raw[1]),
        );
      case 1:
        return DynamicValue_U32(
          _wire2api_u32(raw[1]),
        );
      case 2:
        return DynamicValue_I32(
          _wire2api_i32(raw[1]),
        );
      case 3:
        return DynamicValue_U64(
          _wire2api_u64(raw[1]),
        );
      case 4:
        return DynamicValue_I64(
          _wire2api_i64(raw[1]),
        );
      case 5:
        return DynamicValue_F32(
          _wire2api_f32(raw[1]),
        );
      case 6:
        return DynamicValue_F64(
          _wire2api_f64(raw[1]),
        );
      case 7:
        return DynamicValue_String(
          _wire2api_String(raw[1]),
        );
      case 8:
        return DynamicValue_VecU8(
          _wire2api_uint_8_list(raw[1]),
        );
      case 9:
        return DynamicValue_MegaStruct(
          _wire2api_String(raw[1]),
        );
      case 10:
        return DynamicValue_Error(
          _wire2api_error_code(raw[1]),
        );
      case 11:
        return DynamicValue_None();
      default:
        throw Exception("unreachable");
    }
  }

  ErrorCode _wire2api_error_code(dynamic raw) {
    return ErrorCode.values[raw as int];
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  GeneratedKeyG _wire2api_generated_key_g(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GeneratedKeyG(
      words: _wire2api_StringList(arr[0]),
      accountType: _wire2api_mnemonic_type(arr[1]),
    );
  }

  GenericContractDartWrapper _wire2api_generic_contract_dart_wrapper(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GenericContractDartWrapper(
      bridge: this,
      innerContract: _wire2api_ArcGenericContractBoxTrait(arr[0]),
    );
  }

  GqlConnectionDartWrapper _wire2api_gql_connection_dart_wrapper(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GqlConnectionDartWrapper(
      bridge: this,
      innerConnection: _wire2api_ArcGqlConnectionBoxTrait(arr[0]),
    );
  }

  GqlTransportImpl _wire2api_gql_transport_impl(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GqlTransportImpl(
      bridge: this,
      innerTransport: _wire2api_ArcTransportBoxTrait(arr[0]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_i8(dynamic raw) {
    return raw as int;
  }

  JrpcConnectionDartWrapper _wire2api_jrpc_connection_dart_wrapper(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return JrpcConnectionDartWrapper(
      bridge: this,
      innerConnection: _wire2api_ArcJrpcConnectionBoxTrait(arr[0]),
    );
  }

  JrpcTransportImpl _wire2api_jrpc_transport_impl(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return JrpcTransportImpl(
      bridge: this,
      innerTransport: _wire2api_ArcTransportBoxTrait(arr[0]),
    );
  }

  KeystoreDartWrapper _wire2api_keystore_dart_wrapper(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return KeystoreDartWrapper(
      bridge: this,
      innerKeystore: _wire2api_ArcKeyStoreApiBoxTrait(arr[0]),
    );
  }

  LatestBlock _wire2api_latest_block(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LatestBlock(
      id: _wire2api_String(arr[0]),
      endLt: _wire2api_u64(arr[1]),
      genUtime: _wire2api_u32(arr[2]),
    );
  }

  LedgerConnectionDartWrapper _wire2api_ledger_connection_dart_wrapper(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LedgerConnectionDartWrapper(
      bridge: this,
      innerConnection: _wire2api_ArcLedgerConnectionBoxTrait(arr[0]),
    );
  }

  LedgerConnectionImpl _wire2api_ledger_connection_impl(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LedgerConnectionImpl(
      bridge: this,
      instanceHash: _wire2api_String(arr[0]),
    );
  }

  List<DynamicNamedValue> _wire2api_list_dynamic_named_value(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_dynamic_named_value).toList();
  }

  List<DynamicValue> _wire2api_list_dynamic_value(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_dynamic_value).toList();
  }

  List<String?> _wire2api_list_opt_String(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_opt_String).toList();
  }

  LogEntry _wire2api_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return LogEntry(
      timeMillis: _wire2api_i64(arr[0]),
      level: _wire2api_log_level(arr[1]),
      tag: _wire2api_String(arr[2]),
      msg: _wire2api_String(arr[3]),
      stack: _wire2api_opt_String(arr[4]),
    );
  }

  LogLevel _wire2api_log_level(dynamic raw) {
    return LogLevel.values[raw as int];
  }

  MnemonicType _wire2api_mnemonic_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return MnemonicType_Legacy();
      case 1:
        return MnemonicType_Labs(
          _wire2api_u16(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  MyClass _wire2api_my_class(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyClass(
      bridge: this,
      val: _wire2api_i32(arr[0]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  List<String>? _wire2api_opt_StringList(dynamic raw) {
    return raw == null ? null : _wire2api_StringList(raw);
  }

  DynamicValue? _wire2api_opt_box_autoadd_dynamic_value(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_dynamic_value(raw);
  }

  int? _wire2api_opt_box_autoadd_i32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_i32(raw);
  }

  PollingMethod _wire2api_polling_method(dynamic raw) {
    return PollingMethod.values[raw as int];
  }

  ProtoConnectionDartWrapper _wire2api_proto_connection_dart_wrapper(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ProtoConnectionDartWrapper(
      bridge: this,
      innerConnection: _wire2api_ArcProtoConnectionBoxTrait(arr[0]),
    );
  }

  ProtoTransportImpl _wire2api_proto_transport_impl(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ProtoTransportImpl(
      bridge: this,
      innerTransport: _wire2api_ArcTransportBoxTrait(arr[0]),
    );
  }

  SignatureParts _wire2api_signature_parts(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SignatureParts(
      low: _wire2api_String(arr[0]),
      high: _wire2api_String(arr[1]),
    );
  }

  SignedData _wire2api_signed_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SignedData(
      dataHash: _wire2api_String(arr[0]),
      signature: _wire2api_String(arr[1]),
      signatureHex: _wire2api_String(arr[2]),
      signatureParts: _wire2api_signature_parts(arr[3]),
    );
  }

  SignedDataRaw _wire2api_signed_data_raw(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SignedDataRaw(
      signature: _wire2api_String(arr[0]),
      signatureHex: _wire2api_String(arr[1]),
      signatureParts: _wire2api_signature_parts(arr[2]),
    );
  }

  StorageDartWrapper _wire2api_storage_dart_wrapper(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StorageDartWrapper(
      bridge: this,
      innerStorage: _wire2api_ArcStorageBoxTrait(arr[0]),
    );
  }

  StorageImpl _wire2api_storage_impl(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StorageImpl(
      bridge: this,
      instanceHash: _wire2api_String(arr[0]),
    );
  }

  TokenWalletDartWrapper _wire2api_token_wallet_dart_wrapper(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TokenWalletDartWrapper(
      bridge: this,
      innerWallet: _wire2api_ArcTokenWalletBoxTrait(arr[0]),
    );
  }

  TonWalletDartWrapper _wire2api_ton_wallet_dart_wrapper(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TonWalletDartWrapper(
      bridge: this,
      innerWallet: _wire2api_ArcTonWalletBoxTrait(arr[0]),
    );
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UnsignedMessageImpl _wire2api_unsigned_message_impl(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UnsignedMessageImpl(
      bridge: this,
      innerMessage: _wire2api_ArcUnsignedMessageBoxTrait(arr[0]),
    );
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_error_code(ErrorCode raw) {
  return api2wire_i32(raw.index);
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_i8(int raw) {
  return raw;
}

@protected
int api2wire_log_level(LogLevel raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
