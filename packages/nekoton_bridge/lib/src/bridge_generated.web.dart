// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.70.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class NekotonBridgePlatform extends FlutterRustBridgeBase<NekotonBridgeWire>
    with FlutterRustBridgeSetupMixin {
  NekotonBridgePlatform(FutureOr<WasmModule> dylib)
      : super(NekotonBridgeWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  Object api2wire_ArcGqlConnectionBoxTrait(ArcGqlConnectionBoxTrait raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_ArcJrpcConnectionBoxTrait(ArcJrpcConnectionBoxTrait raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_ArcJrpcTransportBoxTrait(ArcJrpcTransportBoxTrait raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_BoxGqlTransportBoxTrait(BoxGqlTransportBoxTrait raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_BoxUnsignedMessageBoxTrait(BoxUnsignedMessageBoxTrait raw) {
    return raw.shareOrMove();
  }

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_box_autoadd_caller_test_class(CallerTestClass raw) {
    return api2wire_caller_test_class(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_dart_call_stub(DartCallStub raw) {
    return api2wire_dart_call_stub(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_dynamic_value(DynamicValue raw) {
    return api2wire_dynamic_value(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_gql_connection_dart_wrapper(
      GqlConnectionDartWrapper raw) {
    return api2wire_gql_connection_dart_wrapper(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_gql_transport_impl(GqlTransportImpl raw) {
    return api2wire_gql_transport_impl(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_jrpc_connection_dart_wrapper(
      JrpcConnectionDartWrapper raw) {
    return api2wire_jrpc_connection_dart_wrapper(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_jrpc_transport_impl(
      JrpcTransportImpl raw) {
    return api2wire_jrpc_transport_impl(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_mnemonic_type(MnemonicType raw) {
    return api2wire_mnemonic_type(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_my_class(MyClass raw) {
    return api2wire_my_class(raw);
  }

  @protected
  Object api2wire_box_autoadd_u64(int raw) {
    return api2wire_u64(raw);
  }

  @protected
  List<dynamic> api2wire_box_autoadd_unsigned_message_impl(
      UnsignedMessageImpl raw) {
    return api2wire_unsigned_message_impl(raw);
  }

  @protected
  List<dynamic> api2wire_caller_test_class(CallerTestClass raw) {
    return [api2wire_String(raw.instanceHash), api2wire_i32(raw.value)];
  }

  @protected
  List<dynamic> api2wire_dart_call_stub(DartCallStub raw) {
    return [
      api2wire_String(raw.instanceHash),
      api2wire_String(raw.fnName),
      api2wire_list_dynamic_value(raw.args),
      api2wire_list_dynamic_named_value(raw.namedArgs)
    ];
  }

  @protected
  List<dynamic> api2wire_dynamic_named_value(DynamicNamedValue raw) {
    return [
      api2wire_String(raw.name),
      api2wire_opt_box_autoadd_dynamic_value(raw.value)
    ];
  }

  @protected
  List<dynamic> api2wire_dynamic_value(DynamicValue raw) {
    if (raw is DynamicValue_U16) {
      return [0, api2wire_u16(raw.field0)];
    }
    if (raw is DynamicValue_U32) {
      return [1, api2wire_u32(raw.field0)];
    }
    if (raw is DynamicValue_I32) {
      return [2, api2wire_i32(raw.field0)];
    }
    if (raw is DynamicValue_U64) {
      return [3, api2wire_u64(raw.field0)];
    }
    if (raw is DynamicValue_I64) {
      return [4, api2wire_i64(raw.field0)];
    }
    if (raw is DynamicValue_F32) {
      return [5, api2wire_f32(raw.field0)];
    }
    if (raw is DynamicValue_F64) {
      return [6, api2wire_f64(raw.field0)];
    }
    if (raw is DynamicValue_String) {
      return [7, api2wire_String(raw.field0)];
    }
    if (raw is DynamicValue_MegaStruct) {
      return [8, api2wire_String(raw.field0)];
    }
    if (raw is DynamicValue_Error) {
      return [9, api2wire_error_code(raw.field0)];
    }
    if (raw is DynamicValue_None) {
      return [10];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_gql_connection_dart_wrapper(
      GqlConnectionDartWrapper raw) {
    return [api2wire_ArcGqlConnectionBoxTrait(raw.innerConnection)];
  }

  @protected
  List<dynamic> api2wire_gql_transport_impl(GqlTransportImpl raw) {
    return [api2wire_BoxGqlTransportBoxTrait(raw.innerTransport)];
  }

  @protected
  Object api2wire_i64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  List<dynamic> api2wire_jrpc_connection_dart_wrapper(
      JrpcConnectionDartWrapper raw) {
    return [api2wire_ArcJrpcConnectionBoxTrait(raw.innerConnection)];
  }

  @protected
  List<dynamic> api2wire_jrpc_transport_impl(JrpcTransportImpl raw) {
    return [api2wire_ArcJrpcTransportBoxTrait(raw.innerTransport)];
  }

  @protected
  List<dynamic> api2wire_list_dynamic_named_value(List<DynamicNamedValue> raw) {
    return raw.map(api2wire_dynamic_named_value).toList();
  }

  @protected
  List<dynamic> api2wire_list_dynamic_value(List<DynamicValue> raw) {
    return raw.map(api2wire_dynamic_value).toList();
  }

  @protected
  List<dynamic> api2wire_mnemonic_type(MnemonicType raw) {
    if (raw is MnemonicType_Legacy) {
      return [0];
    }
    if (raw is MnemonicType_Labs) {
      return [1, api2wire_u16(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> api2wire_my_class(MyClass raw) {
    return [api2wire_i32(raw.val)];
  }

  @protected
  String? api2wire_opt_String(String? raw) {
    return raw == null ? null : api2wire_String(raw);
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd_dynamic_value(DynamicValue? raw) {
    return raw == null ? null : api2wire_box_autoadd_dynamic_value(raw);
  }

  @protected
  Object? api2wire_opt_box_autoadd_u64(int? raw) {
    return raw == null ? null : api2wire_box_autoadd_u64(raw);
  }

  @protected
  Object api2wire_u64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_unsigned_message_impl(UnsignedMessageImpl raw) {
    return [api2wire_BoxUnsignedMessageBoxTrait(raw.innerMessage)];
  }
// Section: finalizer

  late final Finalizer<PlatformPointer> _ArcGqlConnectionBoxTraitFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_ArcGqlConnectionBoxTrait);
  Finalizer<PlatformPointer> get ArcGqlConnectionBoxTraitFinalizer =>
      _ArcGqlConnectionBoxTraitFinalizer;
  late final Finalizer<PlatformPointer> _ArcJrpcConnectionBoxTraitFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_ArcJrpcConnectionBoxTrait);
  Finalizer<PlatformPointer> get ArcJrpcConnectionBoxTraitFinalizer =>
      _ArcJrpcConnectionBoxTraitFinalizer;
  late final Finalizer<PlatformPointer> _ArcJrpcTransportBoxTraitFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_ArcJrpcTransportBoxTrait);
  Finalizer<PlatformPointer> get ArcJrpcTransportBoxTraitFinalizer =>
      _ArcJrpcTransportBoxTraitFinalizer;
  late final Finalizer<PlatformPointer> _BoxGqlTransportBoxTraitFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_BoxGqlTransportBoxTrait);
  Finalizer<PlatformPointer> get BoxGqlTransportBoxTraitFinalizer =>
      _BoxGqlTransportBoxTraitFinalizer;
  late final Finalizer<PlatformPointer> _BoxUnsignedMessageBoxTraitFinalizer =
      Finalizer<PlatformPointer>(inner.drop_opaque_BoxUnsignedMessageBoxTrait);
  Finalizer<PlatformPointer> get BoxUnsignedMessageBoxTraitFinalizer =>
      _BoxUnsignedMessageBoxTraitFinalizer;
}

// Section: WASM wire module

@JS('wasm_bindgen')
external NekotonBridgeWasmModule get wasmModule;

@JS()
@anonymous
class NekotonBridgeWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external NekotonBridgeWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_verify_signature(NativePortType port_,
      String public_key, String data_hash, String signature);

  external dynamic /* void */ wire_nt_generate_key(
      NativePortType port_, List<dynamic> account_type);

  external dynamic /* void */ wire_nt_get_hints(
      NativePortType port_, String input);

  external dynamic /* void */ wire_nt_derive_from_phrase(
      NativePortType port_, String phrase, List<dynamic> mnemonic_type);

  external dynamic /* void */ wire_check_public_key(
      NativePortType port_, String public_key);

  external dynamic /* void */ wire_run_local(
      NativePortType port_,
      String account_stuff_boc,
      String contract_abi,
      String method,
      String input,
      bool responsible);

  external dynamic /* void */ wire_get_expected_address(
      NativePortType port_,
      String tvc,
      String contract_abi,
      int workchain_id,
      String? public_key,
      String init_data);

  external dynamic /* void */ wire_encode_internal_input(
      NativePortType port_, String contract_abi, String method, String input);

  external dynamic /* void */ wire_create_external_message_without_signature(
      NativePortType port_,
      String dst,
      String contract_abi,
      String method,
      String? state_init,
      String input,
      int timeout);

  external dynamic /* void */ wire_create_external_message(
      NativePortType port_,
      String dst,
      String contract_abi,
      String method,
      String? state_init,
      String input,
      String public_key,
      int timeout);

  external dynamic /* void */ wire_parse_known_payload(
      NativePortType port_, String payload);

  external dynamic /* void */ wire_decode_input(NativePortType port_,
      String message_body, String contract_abi, String? method, bool internal);

  external dynamic /* void */ wire_decode_event(NativePortType port_,
      String message_body, String contract_abi, String? event);

  external dynamic /* void */ wire_decode_output(NativePortType port_,
      String message_body, String contract_abi, String? method);

  external dynamic /* void */ wire_decode_transaction(NativePortType port_,
      String transaction, String contract_abi, String? method);

  external dynamic /* void */ wire_decode_transaction_events(
      NativePortType port_, String transaction, String contract_abi);

  external dynamic /* void */ wire_get_boc_hash(
      NativePortType port_, String boc);

  external dynamic /* void */ wire_pack_into_cell(
      NativePortType port_, String params, String tokens);

  external dynamic /* void */ wire_unpack_from_cell(
      NativePortType port_, String params, String boc, bool allow_partial);

  external dynamic /* void */ wire_pack_std_smc_addr(
      NativePortType port_, String addr, bool base64_url, bool bounceable);

  external dynamic /* void */ wire_unpack_std_smc_addr(
      NativePortType port_, String packed, bool base64_url);

  external dynamic /* void */ wire_validate_address(
      NativePortType port_, String address);

  external dynamic /* void */ wire_repack_address(
      NativePortType port_, String address);

  external dynamic /* void */ wire_extract_public_key(
      NativePortType port_, String boc);

  external dynamic /* void */ wire_code_to_tvc(
      NativePortType port_, String code);

  external dynamic /* void */ wire_merge_tvc(
      NativePortType port_, String code, String data);

  external dynamic /* void */ wire_split_tvc(NativePortType port_, String tvc);

  external dynamic /* void */ wire_set_code_salt(
      NativePortType port_, String code, String salt);

  external dynamic /* void */ wire_get_code_salt(
      NativePortType port_, String code);

  external dynamic /* void */ wire_test_logger_info(
      NativePortType port_, String string);

  external dynamic /* void */ wire_test_logger_debug(
      NativePortType port_, String string);

  external dynamic /* void */ wire_test_logger_warn(
      NativePortType port_, String string);

  external dynamic /* void */ wire_test_logger_error(
      NativePortType port_, String string);

  external dynamic /* void */ wire_test_logger_panic(
      NativePortType port_, String string);

  external dynamic /* void */ wire_test_caller_call_test0_async(
      NativePortType port_, String string, bool need_result);

  external dynamic /* List<dynamic> */ wire_test_caller_call_test0_sync(
      String string, bool need_result);

  external dynamic /* void */ wire_test_caller_call_test1_async(
      NativePortType port_, String string, bool need_result);

  external dynamic /* void */ wire_init_logger(
      NativePortType port_, int level, bool mobile_logger);

  external dynamic /* void */ wire_create_log_stream(NativePortType port_);

  external dynamic /* void */ wire_init_caller(NativePortType port_);

  external dynamic /* void */ wire_call_send_result(
      NativePortType port_, String id, List<dynamic> value);

  external dynamic /* void */ wire_simple_log(
      NativePortType port_, String string);

  external dynamic /* void */ wire_simple_panic(NativePortType port_);

  external dynamic /* int */ wire_simple_adder_sync(int a, int b);

  external dynamic /* void */ wire_simple_adder(
      NativePortType port_, int a, int b);

  external dynamic /* void */ wire_stub_dv(NativePortType port_);

  external dynamic /* void */ wire_stub_dcs(NativePortType port_);

  external dynamic /* void */ wire_simple_call_dart(NativePortType port_);

  external dynamic /* void */ wire_stub_call_dart(
      NativePortType port_, List<dynamic> stub);

  external dynamic /* void */ wire_simple_call_func0(
      NativePortType port_, bool need_result);

  external dynamic /* void */ wire_simple_call_func1(
      NativePortType port_, bool need_result);

  external dynamic /* void */ wire_simple_call_func2(NativePortType port_);

  external dynamic /* void */ wire_refresh_timeout__method__UnsignedMessageImpl(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_expire_at__method__UnsignedMessageImpl(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_hash__method__UnsignedMessageImpl(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_sign__method__UnsignedMessageImpl(
      NativePortType port_, List<dynamic> that, String signature);

  external dynamic /* void */ wire_new__static_method__GqlTransportImpl(
      NativePortType port_, List<dynamic> gql_connection);

  external dynamic /* void */ wire_get_contract_state__method__GqlTransportImpl(
      NativePortType port_, List<dynamic> that, String address);

  external dynamic /* void */
      wire_get_full_contract_state__method__GqlTransportImpl(
          NativePortType port_, List<dynamic> that, String address);

  external dynamic /* void */
      wire_get_accounts_by_code_hash__method__GqlTransportImpl(
          NativePortType port_,
          List<dynamic> that,
          String code_hash,
          int limit,
          String? continuation);

  external dynamic /* void */ wire_get_transactions__method__GqlTransportImpl(
      NativePortType port_,
      List<dynamic> that,
      String address,
      Object? from_lt,
      int count);

  external dynamic /* void */ wire_get_transaction__method__GqlTransportImpl(
      NativePortType port_, List<dynamic> that, String hash);

  external dynamic /* void */ wire_get_signature_id__method__GqlTransportImpl(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_get_latest_block__method__GqlTransportImpl(
      NativePortType port_, List<dynamic> that, String address);

  external dynamic /* void */ wire_get_block__method__GqlTransportImpl(
      NativePortType port_, List<dynamic> that, String id);

  external dynamic /* void */
      wire_wait_for_next_block__method__GqlTransportImpl(
          NativePortType port_,
          List<dynamic> that,
          String current_block_id,
          String address,
          Object timeout);

  external dynamic /* void */ wire_new__static_method__JrpcTransportImpl(
      NativePortType port_, List<dynamic> jrpc_connection);

  external dynamic /* void */
      wire_get_contract_state__method__JrpcTransportImpl(
          NativePortType port_, List<dynamic> that, String address);

  external dynamic /* void */
      wire_get_full_contract_state__method__JrpcTransportImpl(
          NativePortType port_, List<dynamic> that, String address);

  external dynamic /* void */
      wire_get_accounts_by_code_hash__method__JrpcTransportImpl(
          NativePortType port_,
          List<dynamic> that,
          String code_hash,
          int limit,
          String? continuation);

  external dynamic /* void */ wire_get_transactions__method__JrpcTransportImpl(
      NativePortType port_,
      List<dynamic> that,
      String address,
      Object? from_lt,
      int count);

  external dynamic /* void */ wire_get_transaction__method__JrpcTransportImpl(
      NativePortType port_, List<dynamic> that, String hash);

  external dynamic /* void */ wire_get_signature_id__method__JrpcTransportImpl(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */
      wire_new__static_method__JrpcConnectionDartWrapper(
          NativePortType port_, String instance_hash);

  external dynamic /* void */ wire_new__static_method__GqlConnectionDartWrapper(
      NativePortType port_, bool is_local, String instance_hash);

  external dynamic /* void */ wire_new__static_method__LedgerConnectionImpl(
      NativePortType port_, String instance_hash);

  external dynamic /* void */ wire_new__static_method__StorageImpl(
      NativePortType port_, String instance_hash);

  external dynamic /* void */ wire_new__static_method__MyClass(
      NativePortType port_, int a);

  external dynamic /* void */ wire_my_format__method__MyClass(
      NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_new__static_method__CallerTestClass(
      NativePortType port_, String instance_hash, int value);

  external dynamic /* void */ wire_call_some_func__method__CallerTestClass(
      NativePortType port_, List<dynamic> that);

  external dynamic /*  */ drop_opaque_ArcGqlConnectionBoxTrait(ptr);

  external int /* *const c_void */ share_opaque_ArcGqlConnectionBoxTrait(ptr);

  external dynamic /*  */ drop_opaque_ArcJrpcConnectionBoxTrait(ptr);

  external int /* *const c_void */ share_opaque_ArcJrpcConnectionBoxTrait(ptr);

  external dynamic /*  */ drop_opaque_ArcJrpcTransportBoxTrait(ptr);

  external int /* *const c_void */ share_opaque_ArcJrpcTransportBoxTrait(ptr);

  external dynamic /*  */ drop_opaque_BoxGqlTransportBoxTrait(ptr);

  external int /* *const c_void */ share_opaque_BoxGqlTransportBoxTrait(ptr);

  external dynamic /*  */ drop_opaque_BoxUnsignedMessageBoxTrait(ptr);

  external int /* *const c_void */ share_opaque_BoxUnsignedMessageBoxTrait(ptr);
}

// Section: WASM wire connector

class NekotonBridgeWire
    extends FlutterRustBridgeWasmWireBase<NekotonBridgeWasmModule> {
  NekotonBridgeWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<NekotonBridgeWasmModule>(module));

  void wire_verify_signature(NativePortType port_, String public_key,
          String data_hash, String signature) =>
      wasmModule.wire_verify_signature(port_, public_key, data_hash, signature);

  void wire_nt_generate_key(NativePortType port_, List<dynamic> account_type) =>
      wasmModule.wire_nt_generate_key(port_, account_type);

  void wire_nt_get_hints(NativePortType port_, String input) =>
      wasmModule.wire_nt_get_hints(port_, input);

  void wire_nt_derive_from_phrase(
          NativePortType port_, String phrase, List<dynamic> mnemonic_type) =>
      wasmModule.wire_nt_derive_from_phrase(port_, phrase, mnemonic_type);

  void wire_check_public_key(NativePortType port_, String public_key) =>
      wasmModule.wire_check_public_key(port_, public_key);

  void wire_run_local(NativePortType port_, String account_stuff_boc,
          String contract_abi, String method, String input, bool responsible) =>
      wasmModule.wire_run_local(
          port_, account_stuff_boc, contract_abi, method, input, responsible);

  void wire_get_expected_address(
          NativePortType port_,
          String tvc,
          String contract_abi,
          int workchain_id,
          String? public_key,
          String init_data) =>
      wasmModule.wire_get_expected_address(
          port_, tvc, contract_abi, workchain_id, public_key, init_data);

  void wire_encode_internal_input(NativePortType port_, String contract_abi,
          String method, String input) =>
      wasmModule.wire_encode_internal_input(port_, contract_abi, method, input);

  void wire_create_external_message_without_signature(
          NativePortType port_,
          String dst,
          String contract_abi,
          String method,
          String? state_init,
          String input,
          int timeout) =>
      wasmModule.wire_create_external_message_without_signature(
          port_, dst, contract_abi, method, state_init, input, timeout);

  void wire_create_external_message(
          NativePortType port_,
          String dst,
          String contract_abi,
          String method,
          String? state_init,
          String input,
          String public_key,
          int timeout) =>
      wasmModule.wire_create_external_message(port_, dst, contract_abi, method,
          state_init, input, public_key, timeout);

  void wire_parse_known_payload(NativePortType port_, String payload) =>
      wasmModule.wire_parse_known_payload(port_, payload);

  void wire_decode_input(NativePortType port_, String message_body,
          String contract_abi, String? method, bool internal) =>
      wasmModule.wire_decode_input(
          port_, message_body, contract_abi, method, internal);

  void wire_decode_event(NativePortType port_, String message_body,
          String contract_abi, String? event) =>
      wasmModule.wire_decode_event(port_, message_body, contract_abi, event);

  void wire_decode_output(NativePortType port_, String message_body,
          String contract_abi, String? method) =>
      wasmModule.wire_decode_output(port_, message_body, contract_abi, method);

  void wire_decode_transaction(NativePortType port_, String transaction,
          String contract_abi, String? method) =>
      wasmModule.wire_decode_transaction(
          port_, transaction, contract_abi, method);

  void wire_decode_transaction_events(
          NativePortType port_, String transaction, String contract_abi) =>
      wasmModule.wire_decode_transaction_events(
          port_, transaction, contract_abi);

  void wire_get_boc_hash(NativePortType port_, String boc) =>
      wasmModule.wire_get_boc_hash(port_, boc);

  void wire_pack_into_cell(
          NativePortType port_, String params, String tokens) =>
      wasmModule.wire_pack_into_cell(port_, params, tokens);

  void wire_unpack_from_cell(NativePortType port_, String params, String boc,
          bool allow_partial) =>
      wasmModule.wire_unpack_from_cell(port_, params, boc, allow_partial);

  void wire_pack_std_smc_addr(NativePortType port_, String addr,
          bool base64_url, bool bounceable) =>
      wasmModule.wire_pack_std_smc_addr(port_, addr, base64_url, bounceable);

  void wire_unpack_std_smc_addr(
          NativePortType port_, String packed, bool base64_url) =>
      wasmModule.wire_unpack_std_smc_addr(port_, packed, base64_url);

  void wire_validate_address(NativePortType port_, String address) =>
      wasmModule.wire_validate_address(port_, address);

  void wire_repack_address(NativePortType port_, String address) =>
      wasmModule.wire_repack_address(port_, address);

  void wire_extract_public_key(NativePortType port_, String boc) =>
      wasmModule.wire_extract_public_key(port_, boc);

  void wire_code_to_tvc(NativePortType port_, String code) =>
      wasmModule.wire_code_to_tvc(port_, code);

  void wire_merge_tvc(NativePortType port_, String code, String data) =>
      wasmModule.wire_merge_tvc(port_, code, data);

  void wire_split_tvc(NativePortType port_, String tvc) =>
      wasmModule.wire_split_tvc(port_, tvc);

  void wire_set_code_salt(NativePortType port_, String code, String salt) =>
      wasmModule.wire_set_code_salt(port_, code, salt);

  void wire_get_code_salt(NativePortType port_, String code) =>
      wasmModule.wire_get_code_salt(port_, code);

  void wire_test_logger_info(NativePortType port_, String string) =>
      wasmModule.wire_test_logger_info(port_, string);

  void wire_test_logger_debug(NativePortType port_, String string) =>
      wasmModule.wire_test_logger_debug(port_, string);

  void wire_test_logger_warn(NativePortType port_, String string) =>
      wasmModule.wire_test_logger_warn(port_, string);

  void wire_test_logger_error(NativePortType port_, String string) =>
      wasmModule.wire_test_logger_error(port_, string);

  void wire_test_logger_panic(NativePortType port_, String string) =>
      wasmModule.wire_test_logger_panic(port_, string);

  void wire_test_caller_call_test0_async(
          NativePortType port_, String string, bool need_result) =>
      wasmModule.wire_test_caller_call_test0_async(port_, string, need_result);

  dynamic /* List<dynamic> */ wire_test_caller_call_test0_sync(
          String string, bool need_result) =>
      wasmModule.wire_test_caller_call_test0_sync(string, need_result);

  void wire_test_caller_call_test1_async(
          NativePortType port_, String string, bool need_result) =>
      wasmModule.wire_test_caller_call_test1_async(port_, string, need_result);

  void wire_init_logger(NativePortType port_, int level, bool mobile_logger) =>
      wasmModule.wire_init_logger(port_, level, mobile_logger);

  void wire_create_log_stream(NativePortType port_) =>
      wasmModule.wire_create_log_stream(port_);

  void wire_init_caller(NativePortType port_) =>
      wasmModule.wire_init_caller(port_);

  void wire_call_send_result(
          NativePortType port_, String id, List<dynamic> value) =>
      wasmModule.wire_call_send_result(port_, id, value);

  void wire_simple_log(NativePortType port_, String string) =>
      wasmModule.wire_simple_log(port_, string);

  void wire_simple_panic(NativePortType port_) =>
      wasmModule.wire_simple_panic(port_);

  dynamic /* int */ wire_simple_adder_sync(int a, int b) =>
      wasmModule.wire_simple_adder_sync(a, b);

  void wire_simple_adder(NativePortType port_, int a, int b) =>
      wasmModule.wire_simple_adder(port_, a, b);

  void wire_stub_dv(NativePortType port_) => wasmModule.wire_stub_dv(port_);

  void wire_stub_dcs(NativePortType port_) => wasmModule.wire_stub_dcs(port_);

  void wire_simple_call_dart(NativePortType port_) =>
      wasmModule.wire_simple_call_dart(port_);

  void wire_stub_call_dart(NativePortType port_, List<dynamic> stub) =>
      wasmModule.wire_stub_call_dart(port_, stub);

  void wire_simple_call_func0(NativePortType port_, bool need_result) =>
      wasmModule.wire_simple_call_func0(port_, need_result);

  void wire_simple_call_func1(NativePortType port_, bool need_result) =>
      wasmModule.wire_simple_call_func1(port_, need_result);

  void wire_simple_call_func2(NativePortType port_) =>
      wasmModule.wire_simple_call_func2(port_);

  void wire_refresh_timeout__method__UnsignedMessageImpl(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_refresh_timeout__method__UnsignedMessageImpl(port_, that);

  void wire_expire_at__method__UnsignedMessageImpl(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_expire_at__method__UnsignedMessageImpl(port_, that);

  void wire_hash__method__UnsignedMessageImpl(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_hash__method__UnsignedMessageImpl(port_, that);

  void wire_sign__method__UnsignedMessageImpl(
          NativePortType port_, List<dynamic> that, String signature) =>
      wasmModule.wire_sign__method__UnsignedMessageImpl(port_, that, signature);

  void wire_new__static_method__GqlTransportImpl(
          NativePortType port_, List<dynamic> gql_connection) =>
      wasmModule.wire_new__static_method__GqlTransportImpl(
          port_, gql_connection);

  void wire_get_contract_state__method__GqlTransportImpl(
          NativePortType port_, List<dynamic> that, String address) =>
      wasmModule.wire_get_contract_state__method__GqlTransportImpl(
          port_, that, address);

  void wire_get_full_contract_state__method__GqlTransportImpl(
          NativePortType port_, List<dynamic> that, String address) =>
      wasmModule.wire_get_full_contract_state__method__GqlTransportImpl(
          port_, that, address);

  void wire_get_accounts_by_code_hash__method__GqlTransportImpl(
          NativePortType port_,
          List<dynamic> that,
          String code_hash,
          int limit,
          String? continuation) =>
      wasmModule.wire_get_accounts_by_code_hash__method__GqlTransportImpl(
          port_, that, code_hash, limit, continuation);

  void wire_get_transactions__method__GqlTransportImpl(NativePortType port_,
          List<dynamic> that, String address, Object? from_lt, int count) =>
      wasmModule.wire_get_transactions__method__GqlTransportImpl(
          port_, that, address, from_lt, count);

  void wire_get_transaction__method__GqlTransportImpl(
          NativePortType port_, List<dynamic> that, String hash) =>
      wasmModule.wire_get_transaction__method__GqlTransportImpl(
          port_, that, hash);

  void wire_get_signature_id__method__GqlTransportImpl(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_get_signature_id__method__GqlTransportImpl(port_, that);

  void wire_get_latest_block__method__GqlTransportImpl(
          NativePortType port_, List<dynamic> that, String address) =>
      wasmModule.wire_get_latest_block__method__GqlTransportImpl(
          port_, that, address);

  void wire_get_block__method__GqlTransportImpl(
          NativePortType port_, List<dynamic> that, String id) =>
      wasmModule.wire_get_block__method__GqlTransportImpl(port_, that, id);

  void wire_wait_for_next_block__method__GqlTransportImpl(
          NativePortType port_,
          List<dynamic> that,
          String current_block_id,
          String address,
          Object timeout) =>
      wasmModule.wire_wait_for_next_block__method__GqlTransportImpl(
          port_, that, current_block_id, address, timeout);

  void wire_new__static_method__JrpcTransportImpl(
          NativePortType port_, List<dynamic> jrpc_connection) =>
      wasmModule.wire_new__static_method__JrpcTransportImpl(
          port_, jrpc_connection);

  void wire_get_contract_state__method__JrpcTransportImpl(
          NativePortType port_, List<dynamic> that, String address) =>
      wasmModule.wire_get_contract_state__method__JrpcTransportImpl(
          port_, that, address);

  void wire_get_full_contract_state__method__JrpcTransportImpl(
          NativePortType port_, List<dynamic> that, String address) =>
      wasmModule.wire_get_full_contract_state__method__JrpcTransportImpl(
          port_, that, address);

  void wire_get_accounts_by_code_hash__method__JrpcTransportImpl(
          NativePortType port_,
          List<dynamic> that,
          String code_hash,
          int limit,
          String? continuation) =>
      wasmModule.wire_get_accounts_by_code_hash__method__JrpcTransportImpl(
          port_, that, code_hash, limit, continuation);

  void wire_get_transactions__method__JrpcTransportImpl(NativePortType port_,
          List<dynamic> that, String address, Object? from_lt, int count) =>
      wasmModule.wire_get_transactions__method__JrpcTransportImpl(
          port_, that, address, from_lt, count);

  void wire_get_transaction__method__JrpcTransportImpl(
          NativePortType port_, List<dynamic> that, String hash) =>
      wasmModule.wire_get_transaction__method__JrpcTransportImpl(
          port_, that, hash);

  void wire_get_signature_id__method__JrpcTransportImpl(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_get_signature_id__method__JrpcTransportImpl(port_, that);

  void wire_new__static_method__JrpcConnectionDartWrapper(
          NativePortType port_, String instance_hash) =>
      wasmModule.wire_new__static_method__JrpcConnectionDartWrapper(
          port_, instance_hash);

  void wire_new__static_method__GqlConnectionDartWrapper(
          NativePortType port_, bool is_local, String instance_hash) =>
      wasmModule.wire_new__static_method__GqlConnectionDartWrapper(
          port_, is_local, instance_hash);

  void wire_new__static_method__LedgerConnectionImpl(
          NativePortType port_, String instance_hash) =>
      wasmModule.wire_new__static_method__LedgerConnectionImpl(
          port_, instance_hash);

  void wire_new__static_method__StorageImpl(
          NativePortType port_, String instance_hash) =>
      wasmModule.wire_new__static_method__StorageImpl(port_, instance_hash);

  void wire_new__static_method__MyClass(NativePortType port_, int a) =>
      wasmModule.wire_new__static_method__MyClass(port_, a);

  void wire_my_format__method__MyClass(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_my_format__method__MyClass(port_, that);

  void wire_new__static_method__CallerTestClass(
          NativePortType port_, String instance_hash, int value) =>
      wasmModule.wire_new__static_method__CallerTestClass(
          port_, instance_hash, value);

  void wire_call_some_func__method__CallerTestClass(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_call_some_func__method__CallerTestClass(port_, that);

  dynamic /*  */ drop_opaque_ArcGqlConnectionBoxTrait(ptr) =>
      wasmModule.drop_opaque_ArcGqlConnectionBoxTrait(ptr);

  int /* *const c_void */ share_opaque_ArcGqlConnectionBoxTrait(ptr) =>
      wasmModule.share_opaque_ArcGqlConnectionBoxTrait(ptr);

  dynamic /*  */ drop_opaque_ArcJrpcConnectionBoxTrait(ptr) =>
      wasmModule.drop_opaque_ArcJrpcConnectionBoxTrait(ptr);

  int /* *const c_void */ share_opaque_ArcJrpcConnectionBoxTrait(ptr) =>
      wasmModule.share_opaque_ArcJrpcConnectionBoxTrait(ptr);

  dynamic /*  */ drop_opaque_ArcJrpcTransportBoxTrait(ptr) =>
      wasmModule.drop_opaque_ArcJrpcTransportBoxTrait(ptr);

  int /* *const c_void */ share_opaque_ArcJrpcTransportBoxTrait(ptr) =>
      wasmModule.share_opaque_ArcJrpcTransportBoxTrait(ptr);

  dynamic /*  */ drop_opaque_BoxGqlTransportBoxTrait(ptr) =>
      wasmModule.drop_opaque_BoxGqlTransportBoxTrait(ptr);

  int /* *const c_void */ share_opaque_BoxGqlTransportBoxTrait(ptr) =>
      wasmModule.share_opaque_BoxGqlTransportBoxTrait(ptr);

  dynamic /*  */ drop_opaque_BoxUnsignedMessageBoxTrait(ptr) =>
      wasmModule.drop_opaque_BoxUnsignedMessageBoxTrait(ptr);

  int /* *const c_void */ share_opaque_BoxUnsignedMessageBoxTrait(ptr) =>
      wasmModule.share_opaque_BoxUnsignedMessageBoxTrait(ptr);
}
