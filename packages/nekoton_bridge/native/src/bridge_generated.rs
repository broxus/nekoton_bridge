#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.69.0.

use crate::merged::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::utils::caller::DartCallStub;
use crate::utils::caller::DartCallStubRegistred;
use crate::utils::caller::DynamicNamedValue;
use crate::utils::caller::DynamicValue;
use crate::utils::caller::ErrorCode;
use crate::utils::logger::LogEntry;
use crate::utils::logger::LogLevel;

// Section: wire functions

fn wire_nt_generate_key_impl(
    port_: MessagePort,
    account_type: impl Wire2Api<MnemonicType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nt_generate_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_account_type = account_type.wire2api();
            move |task_callback| Ok(nt_generate_key(api_account_type))
        },
    )
}
fn wire_nt_get_hints_impl(port_: MessagePort, input: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nt_get_hints",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Ok(nt_get_hints(api_input))
        },
    )
}
fn wire_nt_derive_from_phrase_impl(
    port_: MessagePort,
    phrase: impl Wire2Api<String> + UnwindSafe,
    mnemonic_type: impl Wire2Api<MnemonicType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nt_derive_from_phrase",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_phrase = phrase.wire2api();
            let api_mnemonic_type = mnemonic_type.wire2api();
            move |task_callback| Ok(nt_derive_from_phrase(api_phrase, api_mnemonic_type))
        },
    )
}
fn wire_test_logger_info_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_logger_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(test_logger_info(api_string))
        },
    )
}
fn wire_test_logger_debug_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_logger_debug",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(test_logger_debug(api_string))
        },
    )
}
fn wire_test_logger_warn_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_logger_warn",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(test_logger_warn(api_string))
        },
    )
}
fn wire_test_logger_error_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_logger_error",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(test_logger_error(api_string))
        },
    )
}
fn wire_test_logger_panic_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_logger_panic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(test_logger_panic(api_string))
        },
    )
}
fn wire_test_caller_call_test0_async_impl(
    port_: MessagePort,
    string: impl Wire2Api<String> + UnwindSafe,
    need_result: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_caller_call_test0_async",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            let api_need_result = need_result.wire2api();
            move |task_callback| Ok(test_caller_call_test0_async(api_string, api_need_result))
        },
    )
}
fn wire_test_caller_call_test0_sync_impl(
    string: impl Wire2Api<String> + UnwindSafe,
    need_result: impl Wire2Api<bool> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "test_caller_call_test0_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_string = string.wire2api();
            let api_need_result = need_result.wire2api();
            Ok(test_caller_call_test0_sync(api_string, api_need_result))
        },
    )
}
fn wire_init_logger_impl(
    port_: MessagePort,
    level: impl Wire2Api<LogLevel> + UnwindSafe,
    mobile_logger: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_logger",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_level = level.wire2api();
            let api_mobile_logger = mobile_logger.wire2api();
            move |task_callback| Ok(init_logger(api_level, api_mobile_logger))
        },
    )
}
fn wire_create_log_stream_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_log_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| Ok(create_log_stream(task_callback.stream_sink())),
    )
}
fn wire_init_caller_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_caller",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| Ok(init_caller(task_callback.stream_sink())),
    )
}
fn wire_call_send_result_impl(
    port_: MessagePort,
    id: impl Wire2Api<String> + UnwindSafe,
    value: impl Wire2Api<DynamicValue> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "call_send_result",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            let api_value = value.wire2api();
            move |task_callback| Ok(call_send_result(api_id, api_value))
        },
    )
}
fn wire_simple_log_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_log",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(simple_log(api_string))
        },
    )
}
fn wire_simple_panic_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_panic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(simple_panic()),
    )
}
fn wire_simple_adder_sync_impl(
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "simple_adder_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            Ok(simple_adder_sync(api_a, api_b))
        },
    )
}
fn wire_simple_adder_impl(
    port_: MessagePort,
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_adder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Ok(simple_adder(api_a, api_b))
        },
    )
}
fn wire_stub_dv_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stub_dv",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(stub_dv()),
    )
}
fn wire_stub_dcs_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stub_dcs",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(stub_dcs()),
    )
}
fn wire_simple_call_dart_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_call_dart",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(simple_call_dart()),
    )
}
fn wire_stub_call_dart_impl(port_: MessagePort, stub: impl Wire2Api<DartCallStub> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stub_call_dart",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_stub = stub.wire2api();
            move |task_callback| Ok(stub_call_dart(api_stub))
        },
    )
}
fn wire_simple_call_func0_impl(port_: MessagePort, need_result: impl Wire2Api<bool> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_call_func0",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_need_result = need_result.wire2api();
            move |task_callback| Ok(simple_call_func0(api_need_result))
        },
    )
}
fn wire_simple_call_func1_impl(port_: MessagePort, need_result: impl Wire2Api<bool> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_call_func1",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_need_result = need_result.wire2api();
            move |task_callback| Ok(simple_call_func1(api_need_result))
        },
    )
}
fn wire_simple_call_func2_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_call_func2",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(simple_call_func2()),
    )
}
fn wire_new__static_method__JrpcConnectionImpl_impl(
    port_: MessagePort,
    instance_hash: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__JrpcConnectionImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_instance_hash = instance_hash.wire2api();
            move |task_callback| Ok(JrpcConnectionImpl::new(api_instance_hash))
        },
    )
}
fn wire_new__static_method__GqlConnectionImpl_impl(
    port_: MessagePort,
    is_local: impl Wire2Api<bool> + UnwindSafe,
    instance_hash: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__GqlConnectionImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_is_local = is_local.wire2api();
            let api_instance_hash = instance_hash.wire2api();
            move |task_callback| Ok(GqlConnectionImpl::new(api_is_local, api_instance_hash))
        },
    )
}
fn wire_new__static_method__LedgerConnectionImpl_impl(
    port_: MessagePort,
    instance_hash: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__LedgerConnectionImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_instance_hash = instance_hash.wire2api();
            move |task_callback| Ok(LedgerConnectionImpl::new(api_instance_hash))
        },
    )
}
fn wire_new__static_method__StorageImpl_impl(
    port_: MessagePort,
    instance_hash: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__StorageImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_instance_hash = instance_hash.wire2api();
            move |task_callback| Ok(StorageImpl::new(api_instance_hash))
        },
    )
}
fn wire_new__static_method__MyClass_impl(port_: MessagePort, a: impl Wire2Api<i32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__MyClass",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            move |task_callback| Ok(MyClass::new(api_a))
        },
    )
}
fn wire_my_format__method__MyClass_impl(
    port_: MessagePort,
    that: impl Wire2Api<MyClass> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "my_format__method__MyClass",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(MyClass::my_format(&api_that))
        },
    )
}
fn wire_new__static_method__CallerTestClass_impl(
    port_: MessagePort,
    instance_hash: impl Wire2Api<String> + UnwindSafe,
    value: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__CallerTestClass",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_instance_hash = instance_hash.wire2api();
            let api_value = value.wire2api();
            move |task_callback| Ok(CallerTestClass::new(api_instance_hash, api_value))
        },
    )
}
fn wire_call_some_func__method__CallerTestClass_impl(
    port_: MessagePort,
    that: impl Wire2Api<CallerTestClass> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "call_some_func__method__CallerTestClass",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(CallerTestClass::call_some_func(&api_that))
        },
    )
}
// Section: wrapper structs

#[derive(Clone)]
struct mirror_MnemonicType(MnemonicType);

// Section: static checks

const _: fn() = || match None::<MnemonicType>.unwrap() {
    MnemonicType::Legacy => {}
    MnemonicType::Labs(field0) => {
        let _: u16 = field0;
    }
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<ErrorCode> for i32 {
    fn wire2api(self) -> ErrorCode {
        match self {
            0 => ErrorCode::Ok,
            1 => ErrorCode::Network,
            2 => ErrorCode::Generic,
            3 => ErrorCode::InvokeException,
            _ => unreachable!("Invalid variant for ErrorCode: {}", self),
        }
    }
}
impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<LogLevel> for i32 {
    fn wire2api(self) -> LogLevel {
        match self {
            0 => LogLevel::Trace,
            1 => LogLevel::Debug,
            2 => LogLevel::Info,
            3 => LogLevel::Warn,
            4 => LogLevel::Error,
            _ => unreachable!("Invalid variant for LogLevel: {}", self),
        }
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for CallerTestClass {
    fn into_dart(self) -> support::DartAbi {
        vec![self.instance_hash.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CallerTestClass {}

impl support::IntoDart for DartCallStub {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.instance_hash.into_dart(),
            self.fn_name.into_dart(),
            self.args.into_dart(),
            self.named_args.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DartCallStub {}

impl support::IntoDart for DartCallStubRegistred {
    fn into_dart(self) -> support::DartAbi {
        vec![self.id.into_dart(), self.stub.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DartCallStubRegistred {}

impl support::IntoDart for DynamicNamedValue {
    fn into_dart(self) -> support::DartAbi {
        vec![self.name.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DynamicNamedValue {}

impl support::IntoDart for DynamicValue {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::U16(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::U32(field0) => vec![1.into_dart(), field0.into_dart()],
            Self::I32(field0) => vec![2.into_dart(), field0.into_dart()],
            Self::U64(field0) => vec![3.into_dart(), field0.into_dart()],
            Self::I64(field0) => vec![4.into_dart(), field0.into_dart()],
            Self::F32(field0) => vec![5.into_dart(), field0.into_dart()],
            Self::F64(field0) => vec![6.into_dart(), field0.into_dart()],
            Self::String(field0) => vec![7.into_dart(), field0.into_dart()],
            Self::MegaStruct(field0) => vec![8.into_dart(), field0.into_dart()],
            Self::Error(field0) => vec![9.into_dart(), field0.into_dart()],
            Self::None => vec![10.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DynamicValue {}
impl support::IntoDart for ErrorCode {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Ok => 0,
            Self::Network => 1,
            Self::Generic => 2,
            Self::InvokeException => 3,
        }
        .into_dart()
    }
}

impl support::IntoDart for GeneratedKeyG {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.words.into_dart(),
            mirror_MnemonicType(self.account_type).into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GeneratedKeyG {}

impl support::IntoDart for GqlConnectionImpl {
    fn into_dart(self) -> support::DartAbi {
        vec![self.is_local.into_dart(), self.instance_hash.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GqlConnectionImpl {}

impl support::IntoDart for JrpcConnectionImpl {
    fn into_dart(self) -> support::DartAbi {
        vec![self.instance_hash.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for JrpcConnectionImpl {}

impl support::IntoDart for LedgerConnectionImpl {
    fn into_dart(self) -> support::DartAbi {
        vec![self.instance_hash.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LedgerConnectionImpl {}

impl support::IntoDart for LogEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.time_millis.into_dart(),
            self.level.into_dart(),
            self.tag.into_dart(),
            self.msg.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LogEntry {}

impl support::IntoDart for LogLevel {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Trace => 0,
            Self::Debug => 1,
            Self::Info => 2,
            Self::Warn => 3,
            Self::Error => 4,
        }
        .into_dart()
    }
}
impl support::IntoDart for mirror_MnemonicType {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            MnemonicType::Legacy => vec![0.into_dart()],
            MnemonicType::Labs(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_MnemonicType {}
impl support::IntoDart for MyClass {
    fn into_dart(self) -> support::DartAbi {
        vec![self.val.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyClass {}

impl support::IntoDart for StorageImpl {
    fn into_dart(self) -> support::DartAbi {
        vec![self.instance_hash.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StorageImpl {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_nt_generate_key(port_: MessagePort, account_type: JsValue) {
        wire_nt_generate_key_impl(port_, account_type)
    }

    #[wasm_bindgen]
    pub fn wire_nt_get_hints(port_: MessagePort, input: String) {
        wire_nt_get_hints_impl(port_, input)
    }

    #[wasm_bindgen]
    pub fn wire_nt_derive_from_phrase(port_: MessagePort, phrase: String, mnemonic_type: JsValue) {
        wire_nt_derive_from_phrase_impl(port_, phrase, mnemonic_type)
    }

    #[wasm_bindgen]
    pub fn wire_test_logger_info(port_: MessagePort, string: String) {
        wire_test_logger_info_impl(port_, string)
    }

    #[wasm_bindgen]
    pub fn wire_test_logger_debug(port_: MessagePort, string: String) {
        wire_test_logger_debug_impl(port_, string)
    }

    #[wasm_bindgen]
    pub fn wire_test_logger_warn(port_: MessagePort, string: String) {
        wire_test_logger_warn_impl(port_, string)
    }

    #[wasm_bindgen]
    pub fn wire_test_logger_error(port_: MessagePort, string: String) {
        wire_test_logger_error_impl(port_, string)
    }

    #[wasm_bindgen]
    pub fn wire_test_logger_panic(port_: MessagePort, string: String) {
        wire_test_logger_panic_impl(port_, string)
    }

    #[wasm_bindgen]
    pub fn wire_test_caller_call_test0_async(
        port_: MessagePort,
        string: String,
        need_result: bool,
    ) {
        wire_test_caller_call_test0_async_impl(port_, string, need_result)
    }

    #[wasm_bindgen]
    pub fn wire_test_caller_call_test0_sync(
        string: String,
        need_result: bool,
    ) -> support::WireSyncReturn {
        wire_test_caller_call_test0_sync_impl(string, need_result)
    }

    #[wasm_bindgen]
    pub fn wire_init_logger(port_: MessagePort, level: i32, mobile_logger: bool) {
        wire_init_logger_impl(port_, level, mobile_logger)
    }

    #[wasm_bindgen]
    pub fn wire_create_log_stream(port_: MessagePort) {
        wire_create_log_stream_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_init_caller(port_: MessagePort) {
        wire_init_caller_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_call_send_result(port_: MessagePort, id: String, value: JsValue) {
        wire_call_send_result_impl(port_, id, value)
    }

    #[wasm_bindgen]
    pub fn wire_simple_log(port_: MessagePort, string: String) {
        wire_simple_log_impl(port_, string)
    }

    #[wasm_bindgen]
    pub fn wire_simple_panic(port_: MessagePort) {
        wire_simple_panic_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_simple_adder_sync(a: i32, b: i32) -> support::WireSyncReturn {
        wire_simple_adder_sync_impl(a, b)
    }

    #[wasm_bindgen]
    pub fn wire_simple_adder(port_: MessagePort, a: i32, b: i32) {
        wire_simple_adder_impl(port_, a, b)
    }

    #[wasm_bindgen]
    pub fn wire_stub_dv(port_: MessagePort) {
        wire_stub_dv_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_stub_dcs(port_: MessagePort) {
        wire_stub_dcs_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_simple_call_dart(port_: MessagePort) {
        wire_simple_call_dart_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_stub_call_dart(port_: MessagePort, stub: JsValue) {
        wire_stub_call_dart_impl(port_, stub)
    }

    #[wasm_bindgen]
    pub fn wire_simple_call_func0(port_: MessagePort, need_result: bool) {
        wire_simple_call_func0_impl(port_, need_result)
    }

    #[wasm_bindgen]
    pub fn wire_simple_call_func1(port_: MessagePort, need_result: bool) {
        wire_simple_call_func1_impl(port_, need_result)
    }

    #[wasm_bindgen]
    pub fn wire_simple_call_func2(port_: MessagePort) {
        wire_simple_call_func2_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__JrpcConnectionImpl(port_: MessagePort, instance_hash: String) {
        wire_new__static_method__JrpcConnectionImpl_impl(port_, instance_hash)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__GqlConnectionImpl(
        port_: MessagePort,
        is_local: bool,
        instance_hash: String,
    ) {
        wire_new__static_method__GqlConnectionImpl_impl(port_, is_local, instance_hash)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__LedgerConnectionImpl(
        port_: MessagePort,
        instance_hash: String,
    ) {
        wire_new__static_method__LedgerConnectionImpl_impl(port_, instance_hash)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__StorageImpl(port_: MessagePort, instance_hash: String) {
        wire_new__static_method__StorageImpl_impl(port_, instance_hash)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__MyClass(port_: MessagePort, a: i32) {
        wire_new__static_method__MyClass_impl(port_, a)
    }

    #[wasm_bindgen]
    pub fn wire_my_format__method__MyClass(port_: MessagePort, that: JsValue) {
        wire_my_format__method__MyClass_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__CallerTestClass(
        port_: MessagePort,
        instance_hash: String,
        value: i32,
    ) {
        wire_new__static_method__CallerTestClass_impl(port_, instance_hash, value)
    }

    #[wasm_bindgen]
    pub fn wire_call_some_func__method__CallerTestClass(port_: MessagePort, that: JsValue) {
        wire_call_some_func__method__CallerTestClass_impl(port_, that)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }

    impl Wire2Api<CallerTestClass> for JsValue {
        fn wire2api(self) -> CallerTestClass {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            CallerTestClass {
                instance_hash: self_.get(0).wire2api(),
                value: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<DartCallStub> for JsValue {
        fn wire2api(self) -> DartCallStub {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                4,
                "Expected 4 elements, got {}",
                self_.length()
            );
            DartCallStub {
                instance_hash: self_.get(0).wire2api(),
                fn_name: self_.get(1).wire2api(),
                args: self_.get(2).wire2api(),
                named_args: self_.get(3).wire2api(),
            }
        }
    }
    impl Wire2Api<DynamicNamedValue> for JsValue {
        fn wire2api(self) -> DynamicNamedValue {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            DynamicNamedValue {
                name: self_.get(0).wire2api(),
                value: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<DynamicValue> for JsValue {
        fn wire2api(self) -> DynamicValue {
            let self_ = self.unchecked_into::<JsArray>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => DynamicValue::U16(self_.get(1).wire2api()),
                1 => DynamicValue::U32(self_.get(1).wire2api()),
                2 => DynamicValue::I32(self_.get(1).wire2api()),
                3 => DynamicValue::U64(self_.get(1).wire2api()),
                4 => DynamicValue::I64(self_.get(1).wire2api()),
                5 => DynamicValue::F32(self_.get(1).wire2api()),
                6 => DynamicValue::F64(self_.get(1).wire2api()),
                7 => DynamicValue::String(self_.get(1).wire2api()),
                8 => DynamicValue::MegaStruct(self_.get(1).wire2api()),
                9 => DynamicValue::Error(self_.get(1).wire2api()),
                10 => DynamicValue::None,
                _ => unreachable!(),
            }
        }
    }

    impl Wire2Api<Vec<DynamicNamedValue>> for JsValue {
        fn wire2api(self) -> Vec<DynamicNamedValue> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Vec<DynamicValue>> for JsValue {
        fn wire2api(self) -> Vec<DynamicValue> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }

    impl Wire2Api<MnemonicType> for JsValue {
        fn wire2api(self) -> MnemonicType {
            let self_ = self.unchecked_into::<JsArray>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => MnemonicType::Legacy,
                1 => MnemonicType::Labs(self_.get(1).wire2api()),
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<MyClass> for JsValue {
        fn wire2api(self) -> MyClass {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            MyClass {
                val: self_.get(0).wire2api(),
            }
        }
    }
    impl Wire2Api<Option<DynamicValue>> for JsValue {
        fn wire2api(self) -> Option<DynamicValue> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<bool> for JsValue {
        fn wire2api(self) -> bool {
            self.is_truthy()
        }
    }
    impl Wire2Api<ErrorCode> for JsValue {
        fn wire2api(self) -> ErrorCode {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
    impl Wire2Api<f32> for JsValue {
        fn wire2api(self) -> f32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<f64> for JsValue {
        fn wire2api(self) -> f64 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<i32> for JsValue {
        fn wire2api(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<i64> for JsValue {
        fn wire2api(self) -> i64 {
            ::std::convert::TryInto::try_into(self.dyn_into::<js_sys::BigInt>().unwrap()).unwrap()
        }
    }
    impl Wire2Api<LogLevel> for JsValue {
        fn wire2api(self) -> LogLevel {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
    impl Wire2Api<u16> for JsValue {
        fn wire2api(self) -> u16 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u32> for JsValue {
        fn wire2api(self) -> u32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u64> for JsValue {
        fn wire2api(self) -> u64 {
            ::std::convert::TryInto::try_into(self.dyn_into::<js_sys::BigInt>().unwrap()).unwrap()
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_nt_generate_key(port_: i64, account_type: *mut wire_MnemonicType) {
        wire_nt_generate_key_impl(port_, account_type)
    }

    #[no_mangle]
    pub extern "C" fn wire_nt_get_hints(port_: i64, input: *mut wire_uint_8_list) {
        wire_nt_get_hints_impl(port_, input)
    }

    #[no_mangle]
    pub extern "C" fn wire_nt_derive_from_phrase(
        port_: i64,
        phrase: *mut wire_uint_8_list,
        mnemonic_type: *mut wire_MnemonicType,
    ) {
        wire_nt_derive_from_phrase_impl(port_, phrase, mnemonic_type)
    }

    #[no_mangle]
    pub extern "C" fn wire_test_logger_info(port_: i64, string: *mut wire_uint_8_list) {
        wire_test_logger_info_impl(port_, string)
    }

    #[no_mangle]
    pub extern "C" fn wire_test_logger_debug(port_: i64, string: *mut wire_uint_8_list) {
        wire_test_logger_debug_impl(port_, string)
    }

    #[no_mangle]
    pub extern "C" fn wire_test_logger_warn(port_: i64, string: *mut wire_uint_8_list) {
        wire_test_logger_warn_impl(port_, string)
    }

    #[no_mangle]
    pub extern "C" fn wire_test_logger_error(port_: i64, string: *mut wire_uint_8_list) {
        wire_test_logger_error_impl(port_, string)
    }

    #[no_mangle]
    pub extern "C" fn wire_test_logger_panic(port_: i64, string: *mut wire_uint_8_list) {
        wire_test_logger_panic_impl(port_, string)
    }

    #[no_mangle]
    pub extern "C" fn wire_test_caller_call_test0_async(
        port_: i64,
        string: *mut wire_uint_8_list,
        need_result: bool,
    ) {
        wire_test_caller_call_test0_async_impl(port_, string, need_result)
    }

    #[no_mangle]
    pub extern "C" fn wire_test_caller_call_test0_sync(
        string: *mut wire_uint_8_list,
        need_result: bool,
    ) -> support::WireSyncReturn {
        wire_test_caller_call_test0_sync_impl(string, need_result)
    }

    #[no_mangle]
    pub extern "C" fn wire_init_logger(port_: i64, level: i32, mobile_logger: bool) {
        wire_init_logger_impl(port_, level, mobile_logger)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_log_stream(port_: i64) {
        wire_create_log_stream_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_init_caller(port_: i64) {
        wire_init_caller_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_call_send_result(
        port_: i64,
        id: *mut wire_uint_8_list,
        value: *mut wire_DynamicValue,
    ) {
        wire_call_send_result_impl(port_, id, value)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_log(port_: i64, string: *mut wire_uint_8_list) {
        wire_simple_log_impl(port_, string)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_panic(port_: i64) {
        wire_simple_panic_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_adder_sync(a: i32, b: i32) -> support::WireSyncReturn {
        wire_simple_adder_sync_impl(a, b)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_adder(port_: i64, a: i32, b: i32) {
        wire_simple_adder_impl(port_, a, b)
    }

    #[no_mangle]
    pub extern "C" fn wire_stub_dv(port_: i64) {
        wire_stub_dv_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_stub_dcs(port_: i64) {
        wire_stub_dcs_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_call_dart(port_: i64) {
        wire_simple_call_dart_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_stub_call_dart(port_: i64, stub: *mut wire_DartCallStub) {
        wire_stub_call_dart_impl(port_, stub)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_call_func0(port_: i64, need_result: bool) {
        wire_simple_call_func0_impl(port_, need_result)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_call_func1(port_: i64, need_result: bool) {
        wire_simple_call_func1_impl(port_, need_result)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_call_func2(port_: i64) {
        wire_simple_call_func2_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__JrpcConnectionImpl(
        port_: i64,
        instance_hash: *mut wire_uint_8_list,
    ) {
        wire_new__static_method__JrpcConnectionImpl_impl(port_, instance_hash)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__GqlConnectionImpl(
        port_: i64,
        is_local: bool,
        instance_hash: *mut wire_uint_8_list,
    ) {
        wire_new__static_method__GqlConnectionImpl_impl(port_, is_local, instance_hash)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__LedgerConnectionImpl(
        port_: i64,
        instance_hash: *mut wire_uint_8_list,
    ) {
        wire_new__static_method__LedgerConnectionImpl_impl(port_, instance_hash)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__StorageImpl(
        port_: i64,
        instance_hash: *mut wire_uint_8_list,
    ) {
        wire_new__static_method__StorageImpl_impl(port_, instance_hash)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__MyClass(port_: i64, a: i32) {
        wire_new__static_method__MyClass_impl(port_, a)
    }

    #[no_mangle]
    pub extern "C" fn wire_my_format__method__MyClass(port_: i64, that: *mut wire_MyClass) {
        wire_my_format__method__MyClass_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__CallerTestClass(
        port_: i64,
        instance_hash: *mut wire_uint_8_list,
        value: i32,
    ) {
        wire_new__static_method__CallerTestClass_impl(port_, instance_hash, value)
    }

    #[no_mangle]
    pub extern "C" fn wire_call_some_func__method__CallerTestClass(
        port_: i64,
        that: *mut wire_CallerTestClass,
    ) {
        wire_call_some_func__method__CallerTestClass_impl(port_, that)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_caller_test_class_0() -> *mut wire_CallerTestClass {
        support::new_leak_box_ptr(wire_CallerTestClass::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_dart_call_stub_0() -> *mut wire_DartCallStub {
        support::new_leak_box_ptr(wire_DartCallStub::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_dynamic_value_0() -> *mut wire_DynamicValue {
        support::new_leak_box_ptr(wire_DynamicValue::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_mnemonic_type_0() -> *mut wire_MnemonicType {
        support::new_leak_box_ptr(wire_MnemonicType::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_my_class_0() -> *mut wire_MyClass {
        support::new_leak_box_ptr(wire_MyClass::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_list_dynamic_named_value_0(
        len: i32,
    ) -> *mut wire_list_dynamic_named_value {
        let wrap = wire_list_dynamic_named_value {
            ptr: support::new_leak_vec_ptr(<wire_DynamicNamedValue>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_list_dynamic_value_0(len: i32) -> *mut wire_list_dynamic_value {
        let wrap = wire_list_dynamic_value {
            ptr: support::new_leak_vec_ptr(<wire_DynamicValue>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }

    impl Wire2Api<CallerTestClass> for *mut wire_CallerTestClass {
        fn wire2api(self) -> CallerTestClass {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<CallerTestClass>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<DartCallStub> for *mut wire_DartCallStub {
        fn wire2api(self) -> DartCallStub {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<DartCallStub>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<DynamicValue> for *mut wire_DynamicValue {
        fn wire2api(self) -> DynamicValue {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<DynamicValue>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<MnemonicType> for *mut wire_MnemonicType {
        fn wire2api(self) -> MnemonicType {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<MnemonicType>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<MyClass> for *mut wire_MyClass {
        fn wire2api(self) -> MyClass {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<MyClass>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<CallerTestClass> for wire_CallerTestClass {
        fn wire2api(self) -> CallerTestClass {
            CallerTestClass {
                instance_hash: self.instance_hash.wire2api(),
                value: self.value.wire2api(),
            }
        }
    }
    impl Wire2Api<DartCallStub> for wire_DartCallStub {
        fn wire2api(self) -> DartCallStub {
            DartCallStub {
                instance_hash: self.instance_hash.wire2api(),
                fn_name: self.fn_name.wire2api(),
                args: self.args.wire2api(),
                named_args: self.named_args.wire2api(),
            }
        }
    }
    impl Wire2Api<DynamicNamedValue> for wire_DynamicNamedValue {
        fn wire2api(self) -> DynamicNamedValue {
            DynamicNamedValue {
                name: self.name.wire2api(),
                value: self.value.wire2api(),
            }
        }
    }
    impl Wire2Api<DynamicValue> for wire_DynamicValue {
        fn wire2api(self) -> DynamicValue {
            match self.tag {
                0 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.U16);
                    DynamicValue::U16(ans.field0.wire2api())
                },
                1 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.U32);
                    DynamicValue::U32(ans.field0.wire2api())
                },
                2 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.I32);
                    DynamicValue::I32(ans.field0.wire2api())
                },
                3 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.U64);
                    DynamicValue::U64(ans.field0.wire2api())
                },
                4 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.I64);
                    DynamicValue::I64(ans.field0.wire2api())
                },
                5 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.F32);
                    DynamicValue::F32(ans.field0.wire2api())
                },
                6 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.F64);
                    DynamicValue::F64(ans.field0.wire2api())
                },
                7 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.String);
                    DynamicValue::String(ans.field0.wire2api())
                },
                8 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.MegaStruct);
                    DynamicValue::MegaStruct(ans.field0.wire2api())
                },
                9 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.Error);
                    DynamicValue::Error(ans.field0.wire2api())
                },
                10 => DynamicValue::None,
                _ => unreachable!(),
            }
        }
    }

    impl Wire2Api<Vec<DynamicNamedValue>> for *mut wire_list_dynamic_named_value {
        fn wire2api(self) -> Vec<DynamicNamedValue> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Vec<DynamicValue>> for *mut wire_list_dynamic_value {
        fn wire2api(self) -> Vec<DynamicValue> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }

    impl Wire2Api<MnemonicType> for wire_MnemonicType {
        fn wire2api(self) -> MnemonicType {
            match self.tag {
                0 => MnemonicType::Legacy,
                1 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.Labs);
                    MnemonicType::Labs(ans.field0.wire2api())
                },
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<MyClass> for wire_MyClass {
        fn wire2api(self) -> MyClass {
            MyClass {
                val: self.val.wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_CallerTestClass {
        instance_hash: *mut wire_uint_8_list,
        value: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DartCallStub {
        instance_hash: *mut wire_uint_8_list,
        fn_name: *mut wire_uint_8_list,
        args: *mut wire_list_dynamic_value,
        named_args: *mut wire_list_dynamic_named_value,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicNamedValue {
        name: *mut wire_uint_8_list,
        value: *mut wire_DynamicValue,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_dynamic_named_value {
        ptr: *mut wire_DynamicNamedValue,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_dynamic_value {
        ptr: *mut wire_DynamicValue,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MyClass {
        val: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue {
        tag: i32,
        kind: *mut DynamicValueKind,
    }

    #[repr(C)]
    pub union DynamicValueKind {
        U16: *mut wire_DynamicValue_U16,
        U32: *mut wire_DynamicValue_U32,
        I32: *mut wire_DynamicValue_I32,
        U64: *mut wire_DynamicValue_U64,
        I64: *mut wire_DynamicValue_I64,
        F32: *mut wire_DynamicValue_F32,
        F64: *mut wire_DynamicValue_F64,
        String: *mut wire_DynamicValue_String,
        MegaStruct: *mut wire_DynamicValue_MegaStruct,
        Error: *mut wire_DynamicValue_Error,
        None: *mut wire_DynamicValue_None,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_U16 {
        field0: u16,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_U32 {
        field0: u32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_I32 {
        field0: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_U64 {
        field0: u64,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_I64 {
        field0: i64,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_F32 {
        field0: f32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_F64 {
        field0: f64,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_String {
        field0: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_MegaStruct {
        field0: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_Error {
        field0: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_None {}

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MnemonicType {
        tag: i32,
        kind: *mut MnemonicTypeKind,
    }

    #[repr(C)]
    pub union MnemonicTypeKind {
        Legacy: *mut wire_MnemonicType_Legacy,
        Labs: *mut wire_MnemonicType_Labs,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MnemonicType_Legacy {}

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MnemonicType_Labs {
        field0: u16,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_CallerTestClass {
        fn new_with_null_ptr() -> Self {
            Self {
                instance_hash: core::ptr::null_mut(),
                value: Default::default(),
            }
        }
    }

    impl Default for wire_CallerTestClass {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_DartCallStub {
        fn new_with_null_ptr() -> Self {
            Self {
                instance_hash: core::ptr::null_mut(),
                fn_name: core::ptr::null_mut(),
                args: core::ptr::null_mut(),
                named_args: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_DartCallStub {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_DynamicNamedValue {
        fn new_with_null_ptr() -> Self {
            Self {
                name: core::ptr::null_mut(),
                value: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_DynamicNamedValue {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_DynamicValue {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: core::ptr::null_mut(),
            }
        }
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_U16() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            U16: support::new_leak_box_ptr(wire_DynamicValue_U16 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_U32() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            U32: support::new_leak_box_ptr(wire_DynamicValue_U32 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_I32() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            I32: support::new_leak_box_ptr(wire_DynamicValue_I32 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_U64() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            U64: support::new_leak_box_ptr(wire_DynamicValue_U64 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_I64() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            I64: support::new_leak_box_ptr(wire_DynamicValue_I64 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_F32() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            F32: support::new_leak_box_ptr(wire_DynamicValue_F32 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_F64() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            F64: support::new_leak_box_ptr(wire_DynamicValue_F64 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_String() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            String: support::new_leak_box_ptr(wire_DynamicValue_String {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_MegaStruct() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            MegaStruct: support::new_leak_box_ptr(wire_DynamicValue_MegaStruct {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_Error() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            Error: support::new_leak_box_ptr(wire_DynamicValue_Error {
                field0: Default::default(),
            }),
        })
    }

    impl NewWithNullPtr for wire_MnemonicType {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: core::ptr::null_mut(),
            }
        }
    }

    #[no_mangle]
    pub extern "C" fn inflate_MnemonicType_Labs() -> *mut MnemonicTypeKind {
        support::new_leak_box_ptr(MnemonicTypeKind {
            Labs: support::new_leak_box_ptr(wire_MnemonicType_Labs {
                field0: Default::default(),
            }),
        })
    }

    impl NewWithNullPtr for wire_MyClass {
        fn new_with_null_ptr() -> Self {
            Self {
                val: Default::default(),
            }
        }
    }

    impl Default for wire_MyClass {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
