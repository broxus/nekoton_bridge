#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.70.0.

use crate::merged::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::utils::caller::DartCallStub;
use crate::utils::caller::DartCallStubRegistred;
use crate::utils::caller::DynamicNamedValue;
use crate::utils::caller::DynamicValue;
use crate::utils::caller::ErrorCode;
use crate::utils::logger::LogEntry;
use crate::utils::logger::LogLevel;

// Section: wire functions

fn wire_verify_signature_impl(
    port_: MessagePort,
    public_key: impl Wire2Api<String> + UnwindSafe,
    data_hash: impl Wire2Api<String> + UnwindSafe,
    signature: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "verify_signature",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_public_key = public_key.wire2api();
            let api_data_hash = data_hash.wire2api();
            let api_signature = signature.wire2api();
            move |task_callback| verify_signature(api_public_key, api_data_hash, api_signature)
        },
    )
}
fn wire_nt_generate_key_impl(
    port_: MessagePort,
    account_type: impl Wire2Api<MnemonicType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nt_generate_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_account_type = account_type.wire2api();
            move |task_callback| Ok(nt_generate_key(api_account_type))
        },
    )
}
fn wire_nt_get_hints_impl(port_: MessagePort, input: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nt_get_hints",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Ok(nt_get_hints(api_input))
        },
    )
}
fn wire_nt_derive_from_phrase_impl(
    port_: MessagePort,
    phrase: impl Wire2Api<String> + UnwindSafe,
    mnemonic_type: impl Wire2Api<MnemonicType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nt_derive_from_phrase",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_phrase = phrase.wire2api();
            let api_mnemonic_type = mnemonic_type.wire2api();
            move |task_callback| nt_derive_from_phrase(api_phrase, api_mnemonic_type)
        },
    )
}
fn wire_check_public_key_impl(port_: MessagePort, public_key: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "check_public_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_public_key = public_key.wire2api();
            move |task_callback| check_public_key(api_public_key)
        },
    )
}
fn wire_run_local_impl(
    port_: MessagePort,
    account_stuff_boc: impl Wire2Api<String> + UnwindSafe,
    contract_abi: impl Wire2Api<String> + UnwindSafe,
    method: impl Wire2Api<String> + UnwindSafe,
    input: impl Wire2Api<String> + UnwindSafe,
    responsible: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "run_local",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_account_stuff_boc = account_stuff_boc.wire2api();
            let api_contract_abi = contract_abi.wire2api();
            let api_method = method.wire2api();
            let api_input = input.wire2api();
            let api_responsible = responsible.wire2api();
            move |task_callback| {
                run_local(
                    api_account_stuff_boc,
                    api_contract_abi,
                    api_method,
                    api_input,
                    api_responsible,
                )
            }
        },
    )
}
fn wire_get_expected_address_impl(
    port_: MessagePort,
    tvc: impl Wire2Api<String> + UnwindSafe,
    contract_abi: impl Wire2Api<String> + UnwindSafe,
    workchain_id: impl Wire2Api<i8> + UnwindSafe,
    public_key: impl Wire2Api<Option<String>> + UnwindSafe,
    init_data: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_expected_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_tvc = tvc.wire2api();
            let api_contract_abi = contract_abi.wire2api();
            let api_workchain_id = workchain_id.wire2api();
            let api_public_key = public_key.wire2api();
            let api_init_data = init_data.wire2api();
            move |task_callback| {
                get_expected_address(
                    api_tvc,
                    api_contract_abi,
                    api_workchain_id,
                    api_public_key,
                    api_init_data,
                )
            }
        },
    )
}
fn wire_encode_internal_input_impl(
    port_: MessagePort,
    contract_abi: impl Wire2Api<String> + UnwindSafe,
    method: impl Wire2Api<String> + UnwindSafe,
    input: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "encode_internal_input",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_contract_abi = contract_abi.wire2api();
            let api_method = method.wire2api();
            let api_input = input.wire2api();
            move |task_callback| encode_internal_input(api_contract_abi, api_method, api_input)
        },
    )
}
fn wire_create_external_message_without_signature_impl(
    port_: MessagePort,
    dst: impl Wire2Api<String> + UnwindSafe,
    contract_abi: impl Wire2Api<String> + UnwindSafe,
    method: impl Wire2Api<String> + UnwindSafe,
    state_init: impl Wire2Api<Option<String>> + UnwindSafe,
    input: impl Wire2Api<String> + UnwindSafe,
    timeout: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_external_message_without_signature",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_dst = dst.wire2api();
            let api_contract_abi = contract_abi.wire2api();
            let api_method = method.wire2api();
            let api_state_init = state_init.wire2api();
            let api_input = input.wire2api();
            let api_timeout = timeout.wire2api();
            move |task_callback| {
                create_external_message_without_signature(
                    api_dst,
                    api_contract_abi,
                    api_method,
                    api_state_init,
                    api_input,
                    api_timeout,
                )
            }
        },
    )
}
fn wire_create_external_message_impl(
    port_: MessagePort,
    dst: impl Wire2Api<String> + UnwindSafe,
    contract_abi: impl Wire2Api<String> + UnwindSafe,
    method: impl Wire2Api<String> + UnwindSafe,
    state_init: impl Wire2Api<Option<String>> + UnwindSafe,
    input: impl Wire2Api<String> + UnwindSafe,
    public_key: impl Wire2Api<String> + UnwindSafe,
    timeout: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_external_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_dst = dst.wire2api();
            let api_contract_abi = contract_abi.wire2api();
            let api_method = method.wire2api();
            let api_state_init = state_init.wire2api();
            let api_input = input.wire2api();
            let api_public_key = public_key.wire2api();
            let api_timeout = timeout.wire2api();
            move |task_callback| {
                create_external_message(
                    api_dst,
                    api_contract_abi,
                    api_method,
                    api_state_init,
                    api_input,
                    api_public_key,
                    api_timeout,
                )
            }
        },
    )
}
fn wire_parse_known_payload_impl(port_: MessagePort, payload: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "parse_known_payload",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_payload = payload.wire2api();
            move |task_callback| parse_known_payload(api_payload)
        },
    )
}
fn wire_decode_input_impl(
    port_: MessagePort,
    message_body: impl Wire2Api<String> + UnwindSafe,
    contract_abi: impl Wire2Api<String> + UnwindSafe,
    method: impl Wire2Api<Option<String>> + UnwindSafe,
    internal: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "decode_input",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_message_body = message_body.wire2api();
            let api_contract_abi = contract_abi.wire2api();
            let api_method = method.wire2api();
            let api_internal = internal.wire2api();
            move |task_callback| {
                decode_input(api_message_body, api_contract_abi, api_method, api_internal)
            }
        },
    )
}
fn wire_decode_event_impl(
    port_: MessagePort,
    message_body: impl Wire2Api<String> + UnwindSafe,
    contract_abi: impl Wire2Api<String> + UnwindSafe,
    event: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "decode_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_message_body = message_body.wire2api();
            let api_contract_abi = contract_abi.wire2api();
            let api_event = event.wire2api();
            move |task_callback| decode_event(api_message_body, api_contract_abi, api_event)
        },
    )
}
fn wire_decode_output_impl(
    port_: MessagePort,
    message_body: impl Wire2Api<String> + UnwindSafe,
    contract_abi: impl Wire2Api<String> + UnwindSafe,
    method: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "decode_output",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_message_body = message_body.wire2api();
            let api_contract_abi = contract_abi.wire2api();
            let api_method = method.wire2api();
            move |task_callback| decode_output(api_message_body, api_contract_abi, api_method)
        },
    )
}
fn wire_decode_transaction_impl(
    port_: MessagePort,
    transaction: impl Wire2Api<String> + UnwindSafe,
    contract_abi: impl Wire2Api<String> + UnwindSafe,
    method: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "decode_transaction",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_transaction = transaction.wire2api();
            let api_contract_abi = contract_abi.wire2api();
            let api_method = method.wire2api();
            move |task_callback| decode_transaction(api_transaction, api_contract_abi, api_method)
        },
    )
}
fn wire_decode_transaction_events_impl(
    port_: MessagePort,
    transaction: impl Wire2Api<String> + UnwindSafe,
    contract_abi: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "decode_transaction_events",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_transaction = transaction.wire2api();
            let api_contract_abi = contract_abi.wire2api();
            move |task_callback| decode_transaction_events(api_transaction, api_contract_abi)
        },
    )
}
fn wire_get_boc_hash_impl(port_: MessagePort, boc: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_boc_hash",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_boc = boc.wire2api();
            move |task_callback| get_boc_hash(api_boc)
        },
    )
}
fn wire_pack_into_cell_impl(
    port_: MessagePort,
    params: impl Wire2Api<String> + UnwindSafe,
    tokens: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pack_into_cell",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_params = params.wire2api();
            let api_tokens = tokens.wire2api();
            move |task_callback| pack_into_cell(api_params, api_tokens)
        },
    )
}
fn wire_unpack_from_cell_impl(
    port_: MessagePort,
    params: impl Wire2Api<String> + UnwindSafe,
    boc: impl Wire2Api<String> + UnwindSafe,
    allow_partial: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "unpack_from_cell",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_params = params.wire2api();
            let api_boc = boc.wire2api();
            let api_allow_partial = allow_partial.wire2api();
            move |task_callback| unpack_from_cell(api_params, api_boc, api_allow_partial)
        },
    )
}
fn wire_pack_std_smc_addr_impl(
    port_: MessagePort,
    addr: impl Wire2Api<String> + UnwindSafe,
    base64_url: impl Wire2Api<bool> + UnwindSafe,
    bounceable: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "pack_std_smc_addr",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_addr = addr.wire2api();
            let api_base64_url = base64_url.wire2api();
            let api_bounceable = bounceable.wire2api();
            move |task_callback| pack_std_smc_addr(api_addr, api_base64_url, api_bounceable)
        },
    )
}
fn wire_unpack_std_smc_addr_impl(
    port_: MessagePort,
    packed: impl Wire2Api<String> + UnwindSafe,
    base64_url: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "unpack_std_smc_addr",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_packed = packed.wire2api();
            let api_base64_url = base64_url.wire2api();
            move |task_callback| unpack_std_smc_addr(api_packed, api_base64_url)
        },
    )
}
fn wire_validate_address_impl(port_: MessagePort, address: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "validate_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_address = address.wire2api();
            move |task_callback| Ok(validate_address(api_address))
        },
    )
}
fn wire_repack_address_impl(port_: MessagePort, address: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "repack_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_address = address.wire2api();
            move |task_callback| repack_address(api_address)
        },
    )
}
fn wire_extract_public_key_impl(port_: MessagePort, boc: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "extract_public_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_boc = boc.wire2api();
            move |task_callback| extract_public_key(api_boc)
        },
    )
}
fn wire_code_to_tvc_impl(port_: MessagePort, code: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "code_to_tvc",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_code = code.wire2api();
            move |task_callback| code_to_tvc(api_code)
        },
    )
}
fn wire_merge_tvc_impl(
    port_: MessagePort,
    code: impl Wire2Api<String> + UnwindSafe,
    data: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "merge_tvc",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_code = code.wire2api();
            let api_data = data.wire2api();
            move |task_callback| merge_tvc(api_code, api_data)
        },
    )
}
fn wire_split_tvc_impl(port_: MessagePort, tvc: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "split_tvc",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_tvc = tvc.wire2api();
            move |task_callback| split_tvc(api_tvc)
        },
    )
}
fn wire_set_code_salt_impl(
    port_: MessagePort,
    code: impl Wire2Api<String> + UnwindSafe,
    salt: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_code_salt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_code = code.wire2api();
            let api_salt = salt.wire2api();
            move |task_callback| set_code_salt(api_code, api_salt)
        },
    )
}
fn wire_get_code_salt_impl(port_: MessagePort, code: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_code_salt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_code = code.wire2api();
            move |task_callback| get_code_salt(api_code)
        },
    )
}
fn wire_test_logger_info_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_logger_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(test_logger_info(api_string))
        },
    )
}
fn wire_test_logger_debug_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_logger_debug",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(test_logger_debug(api_string))
        },
    )
}
fn wire_test_logger_warn_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_logger_warn",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(test_logger_warn(api_string))
        },
    )
}
fn wire_test_logger_error_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_logger_error",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(test_logger_error(api_string))
        },
    )
}
fn wire_test_logger_panic_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_logger_panic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(test_logger_panic(api_string))
        },
    )
}
fn wire_init_logger_impl(
    port_: MessagePort,
    level: impl Wire2Api<LogLevel> + UnwindSafe,
    mobile_logger: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_logger",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_level = level.wire2api();
            let api_mobile_logger = mobile_logger.wire2api();
            move |task_callback| Ok(init_logger(api_level, api_mobile_logger))
        },
    )
}
fn wire_create_log_stream_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_log_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| Ok(create_log_stream(task_callback.stream_sink())),
    )
}
fn wire_init_caller_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_caller",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| Ok(init_caller(task_callback.stream_sink())),
    )
}
fn wire_call_send_result_impl(
    port_: MessagePort,
    id: impl Wire2Api<String> + UnwindSafe,
    value: impl Wire2Api<DynamicValue> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "call_send_result",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            let api_value = value.wire2api();
            move |task_callback| Ok(call_send_result(api_id, api_value))
        },
    )
}
fn wire_simple_log_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_log",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(simple_log(api_string))
        },
    )
}
fn wire_simple_panic_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_panic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(simple_panic()),
    )
}
fn wire_simple_adder_sync_impl(
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "simple_adder_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            Ok(simple_adder_sync(api_a, api_b))
        },
    )
}
fn wire_simple_adder_impl(
    port_: MessagePort,
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_adder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Ok(simple_adder(api_a, api_b))
        },
    )
}
fn wire_stub_dv_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stub_dv",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(stub_dv()),
    )
}
fn wire_stub_dcs_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stub_dcs",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(stub_dcs()),
    )
}
fn wire_simple_call_dart_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_call_dart",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(simple_call_dart()),
    )
}
fn wire_stub_call_dart_impl(port_: MessagePort, stub: impl Wire2Api<DartCallStub> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stub_call_dart",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_stub = stub.wire2api();
            move |task_callback| Ok(stub_call_dart(api_stub))
        },
    )
}
fn wire_simple_call_func0_impl(port_: MessagePort, need_result: impl Wire2Api<bool> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_call_func0",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_need_result = need_result.wire2api();
            move |task_callback| Ok(simple_call_func0(api_need_result))
        },
    )
}
fn wire_simple_call_func1_impl(port_: MessagePort, need_result: impl Wire2Api<bool> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_call_func1",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_need_result = need_result.wire2api();
            move |task_callback| Ok(simple_call_func1(api_need_result))
        },
    )
}
fn wire_simple_call_func2_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_call_func2",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(simple_call_func2()),
    )
}
fn wire_refresh_timeout__method__UnsignedMessageImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<UnsignedMessageImpl> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "refresh_timeout__method__UnsignedMessageImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(UnsignedMessageImpl::refresh_timeout(&api_that))
        },
    )
}
fn wire_expire_at__method__UnsignedMessageImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<UnsignedMessageImpl> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "expire_at__method__UnsignedMessageImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(UnsignedMessageImpl::expire_at(&api_that))
        },
    )
}
fn wire_hash__method__UnsignedMessageImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<UnsignedMessageImpl> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "hash__method__UnsignedMessageImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(UnsignedMessageImpl::hash(&api_that))
        },
    )
}
fn wire_sign__method__UnsignedMessageImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<UnsignedMessageImpl> + UnwindSafe,
    signature: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sign__method__UnsignedMessageImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_signature = signature.wire2api();
            move |task_callback| UnsignedMessageImpl::sign(&api_that, api_signature)
        },
    )
}
fn wire_new__static_method__GqlTransportImpl_impl(
    port_: MessagePort,
    gql_connection: impl Wire2Api<GqlConnectionDartWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__GqlTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_gql_connection = gql_connection.wire2api();
            move |task_callback| Ok(GqlTransportImpl::new(api_gql_connection))
        },
    )
}
fn wire_get_contract_state__method__GqlTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<GqlTransportImpl> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_contract_state__method__GqlTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_address = address.wire2api();
            move |task_callback| GqlTransportImpl::get_contract_state(&api_that, api_address)
        },
    )
}
fn wire_get_full_contract_state__method__GqlTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<GqlTransportImpl> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_full_contract_state__method__GqlTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_address = address.wire2api();
            move |task_callback| GqlTransportImpl::get_full_contract_state(&api_that, api_address)
        },
    )
}
fn wire_get_accounts_by_code_hash__method__GqlTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<GqlTransportImpl> + UnwindSafe,
    code_hash: impl Wire2Api<String> + UnwindSafe,
    limit: impl Wire2Api<u8> + UnwindSafe,
    continuation: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_accounts_by_code_hash__method__GqlTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_code_hash = code_hash.wire2api();
            let api_limit = limit.wire2api();
            let api_continuation = continuation.wire2api();
            move |task_callback| {
                GqlTransportImpl::get_accounts_by_code_hash(
                    &api_that,
                    api_code_hash,
                    api_limit,
                    api_continuation,
                )
            }
        },
    )
}
fn wire_get_transactions__method__GqlTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<GqlTransportImpl> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
    from_lt: impl Wire2Api<Option<u64>> + UnwindSafe,
    count: impl Wire2Api<u8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_transactions__method__GqlTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_address = address.wire2api();
            let api_from_lt = from_lt.wire2api();
            let api_count = count.wire2api();
            move |task_callback| {
                GqlTransportImpl::get_transactions(&api_that, api_address, api_from_lt, api_count)
            }
        },
    )
}
fn wire_get_transaction__method__GqlTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<GqlTransportImpl> + UnwindSafe,
    hash: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_transaction__method__GqlTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_hash = hash.wire2api();
            move |task_callback| GqlTransportImpl::get_transaction(&api_that, api_hash)
        },
    )
}
fn wire_get_signature_id__method__GqlTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<GqlTransportImpl> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_signature_id__method__GqlTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| GqlTransportImpl::get_signature_id(&api_that)
        },
    )
}
fn wire_get_latest_block__method__GqlTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<GqlTransportImpl> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_latest_block__method__GqlTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_address = address.wire2api();
            move |task_callback| {
                Ok(mirror_LatestBlock(GqlTransportImpl::get_latest_block(
                    &api_that,
                    api_address,
                )?))
            }
        },
    )
}
fn wire_get_block__method__GqlTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<GqlTransportImpl> + UnwindSafe,
    id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_block__method__GqlTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_id = id.wire2api();
            move |task_callback| GqlTransportImpl::get_block(&api_that, api_id)
        },
    )
}
fn wire_wait_for_next_block__method__GqlTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<GqlTransportImpl> + UnwindSafe,
    current_block_id: impl Wire2Api<String> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
    timeout: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "wait_for_next_block__method__GqlTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_current_block_id = current_block_id.wire2api();
            let api_address = address.wire2api();
            let api_timeout = timeout.wire2api();
            move |task_callback| {
                GqlTransportImpl::wait_for_next_block(
                    &api_that,
                    api_current_block_id,
                    api_address,
                    api_timeout,
                )
            }
        },
    )
}
fn wire_new__static_method__JrpcTransportImpl_impl(
    port_: MessagePort,
    jrpc_connection: impl Wire2Api<JrpcConnectionDartWrapper> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__JrpcTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_jrpc_connection = jrpc_connection.wire2api();
            move |task_callback| Ok(JrpcTransportImpl::new(api_jrpc_connection))
        },
    )
}
fn wire_get_contract_state__method__JrpcTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<JrpcTransportImpl> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_contract_state__method__JrpcTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_address = address.wire2api();
            move |task_callback| JrpcTransportImpl::get_contract_state(&api_that, api_address)
        },
    )
}
fn wire_get_full_contract_state__method__JrpcTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<JrpcTransportImpl> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_full_contract_state__method__JrpcTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_address = address.wire2api();
            move |task_callback| JrpcTransportImpl::get_full_contract_state(&api_that, api_address)
        },
    )
}
fn wire_get_accounts_by_code_hash__method__JrpcTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<JrpcTransportImpl> + UnwindSafe,
    code_hash: impl Wire2Api<String> + UnwindSafe,
    limit: impl Wire2Api<u8> + UnwindSafe,
    continuation: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_accounts_by_code_hash__method__JrpcTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_code_hash = code_hash.wire2api();
            let api_limit = limit.wire2api();
            let api_continuation = continuation.wire2api();
            move |task_callback| {
                JrpcTransportImpl::get_accounts_by_code_hash(
                    &api_that,
                    api_code_hash,
                    api_limit,
                    api_continuation,
                )
            }
        },
    )
}
fn wire_get_transactions__method__JrpcTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<JrpcTransportImpl> + UnwindSafe,
    address: impl Wire2Api<String> + UnwindSafe,
    from_lt: impl Wire2Api<Option<u64>> + UnwindSafe,
    count: impl Wire2Api<u8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_transactions__method__JrpcTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_address = address.wire2api();
            let api_from_lt = from_lt.wire2api();
            let api_count = count.wire2api();
            move |task_callback| {
                JrpcTransportImpl::get_transactions(&api_that, api_address, api_from_lt, api_count)
            }
        },
    )
}
fn wire_get_transaction__method__JrpcTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<JrpcTransportImpl> + UnwindSafe,
    hash: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_transaction__method__JrpcTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_hash = hash.wire2api();
            move |task_callback| JrpcTransportImpl::get_transaction(&api_that, api_hash)
        },
    )
}
fn wire_get_signature_id__method__JrpcTransportImpl_impl(
    port_: MessagePort,
    that: impl Wire2Api<JrpcTransportImpl> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_signature_id__method__JrpcTransportImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| JrpcTransportImpl::get_signature_id(&api_that)
        },
    )
}
fn wire_new__static_method__JrpcConnectionDartWrapper_impl(
    port_: MessagePort,
    instance_hash: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__JrpcConnectionDartWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_instance_hash = instance_hash.wire2api();
            move |task_callback| Ok(JrpcConnectionDartWrapper::new(api_instance_hash))
        },
    )
}
fn wire_new__static_method__GqlConnectionDartWrapper_impl(
    port_: MessagePort,
    is_local: impl Wire2Api<bool> + UnwindSafe,
    instance_hash: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__GqlConnectionDartWrapper",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_is_local = is_local.wire2api();
            let api_instance_hash = instance_hash.wire2api();
            move |task_callback| {
                Ok(GqlConnectionDartWrapper::new(
                    api_is_local,
                    api_instance_hash,
                ))
            }
        },
    )
}
fn wire_new__static_method__LedgerConnectionImpl_impl(
    port_: MessagePort,
    instance_hash: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__LedgerConnectionImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_instance_hash = instance_hash.wire2api();
            move |task_callback| Ok(LedgerConnectionImpl::new(api_instance_hash))
        },
    )
}
fn wire_new__static_method__StorageImpl_impl(
    port_: MessagePort,
    instance_hash: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__StorageImpl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_instance_hash = instance_hash.wire2api();
            move |task_callback| Ok(StorageImpl::new(api_instance_hash))
        },
    )
}
fn wire_new__static_method__MyClass_impl(port_: MessagePort, a: impl Wire2Api<i32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__MyClass",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            move |task_callback| Ok(MyClass::new(api_a))
        },
    )
}
fn wire_my_format__method__MyClass_impl(
    port_: MessagePort,
    that: impl Wire2Api<MyClass> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "my_format__method__MyClass",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(MyClass::my_format(&api_that))
        },
    )
}
fn wire_new__static_method__CallerTestClass_impl(
    port_: MessagePort,
    instance_hash: impl Wire2Api<String> + UnwindSafe,
    value: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__CallerTestClass",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_instance_hash = instance_hash.wire2api();
            let api_value = value.wire2api();
            move |task_callback| Ok(CallerTestClass::new(api_instance_hash, api_value))
        },
    )
}
fn wire_call_some_func__method__CallerTestClass_impl(
    port_: MessagePort,
    that: impl Wire2Api<CallerTestClass> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "call_some_func__method__CallerTestClass",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(CallerTestClass::call_some_func(&api_that))
        },
    )
}
// Section: wrapper structs

#[derive(Clone)]
struct mirror_LatestBlock(LatestBlock);

#[derive(Clone)]
struct mirror_MnemonicType(MnemonicType);

// Section: static checks

const _: fn() = || {
    {
        let LatestBlock = None::<LatestBlock>.unwrap();
        let _: String = LatestBlock.id;
        let _: u64 = LatestBlock.end_lt;
        let _: u32 = LatestBlock.gen_utime;
    }
    match None::<MnemonicType>.unwrap() {
        MnemonicType::Legacy => {}
        MnemonicType::Labs(field0) => {
            let _: u16 = field0;
        }
    }
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<ErrorCode> for i32 {
    fn wire2api(self) -> ErrorCode {
        match self {
            0 => ErrorCode::Ok,
            1 => ErrorCode::Network,
            2 => ErrorCode::Generic,
            3 => ErrorCode::InvokeException,
            _ => unreachable!("Invalid variant for ErrorCode: {}", self),
        }
    }
}
impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}
impl Wire2Api<i8> for i8 {
    fn wire2api(self) -> i8 {
        self
    }
}

impl Wire2Api<LogLevel> for i32 {
    fn wire2api(self) -> LogLevel {
        match self {
            0 => LogLevel::Trace,
            1 => LogLevel::Debug,
            2 => LogLevel::Info,
            3 => LogLevel::Warn,
            4 => LogLevel::Error,
            _ => unreachable!("Invalid variant for LogLevel: {}", self),
        }
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for CallerTestClass {
    fn into_dart(self) -> support::DartAbi {
        vec![self.instance_hash.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CallerTestClass {}

impl support::IntoDart for DartCallStub {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.instance_hash.into_dart(),
            self.fn_name.into_dart(),
            self.args.into_dart(),
            self.named_args.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DartCallStub {}

impl support::IntoDart for DartCallStubRegistred {
    fn into_dart(self) -> support::DartAbi {
        vec![self.id.into_dart(), self.stub.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DartCallStubRegistred {}

impl support::IntoDart for DynamicNamedValue {
    fn into_dart(self) -> support::DartAbi {
        vec![self.name.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DynamicNamedValue {}

impl support::IntoDart for DynamicValue {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::U16(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::U32(field0) => vec![1.into_dart(), field0.into_dart()],
            Self::I32(field0) => vec![2.into_dart(), field0.into_dart()],
            Self::U64(field0) => vec![3.into_dart(), field0.into_dart()],
            Self::I64(field0) => vec![4.into_dart(), field0.into_dart()],
            Self::F32(field0) => vec![5.into_dart(), field0.into_dart()],
            Self::F64(field0) => vec![6.into_dart(), field0.into_dart()],
            Self::String(field0) => vec![7.into_dart(), field0.into_dart()],
            Self::MegaStruct(field0) => vec![8.into_dart(), field0.into_dart()],
            Self::Error(field0) => vec![9.into_dart(), field0.into_dart()],
            Self::None => vec![10.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DynamicValue {}
impl support::IntoDart for ErrorCode {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Ok => 0,
            Self::Network => 1,
            Self::Generic => 2,
            Self::InvokeException => 3,
        }
        .into_dart()
    }
}

impl support::IntoDart for GeneratedKeyG {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.words.into_dart(),
            mirror_MnemonicType(self.account_type).into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GeneratedKeyG {}

impl support::IntoDart for GqlConnectionDartWrapper {
    fn into_dart(self) -> support::DartAbi {
        vec![self.inner_connection.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GqlConnectionDartWrapper {}

impl support::IntoDart for GqlTransportImpl {
    fn into_dart(self) -> support::DartAbi {
        vec![self.inner_transport.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GqlTransportImpl {}

impl support::IntoDart for JrpcConnectionDartWrapper {
    fn into_dart(self) -> support::DartAbi {
        vec![self.inner_connection.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for JrpcConnectionDartWrapper {}

impl support::IntoDart for JrpcTransportImpl {
    fn into_dart(self) -> support::DartAbi {
        vec![self.inner_transport.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for JrpcTransportImpl {}

impl support::IntoDart for mirror_LatestBlock {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.id.into_dart(),
            self.0.end_lt.into_dart(),
            self.0.gen_utime.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_LatestBlock {}

impl support::IntoDart for LedgerConnectionImpl {
    fn into_dart(self) -> support::DartAbi {
        vec![self.instance_hash.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LedgerConnectionImpl {}

impl support::IntoDart for LogEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.time_millis.into_dart(),
            self.level.into_dart(),
            self.tag.into_dart(),
            self.msg.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LogEntry {}

impl support::IntoDart for LogLevel {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Trace => 0,
            Self::Debug => 1,
            Self::Info => 2,
            Self::Warn => 3,
            Self::Error => 4,
        }
        .into_dart()
    }
}
impl support::IntoDart for mirror_MnemonicType {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            MnemonicType::Legacy => vec![0.into_dart()],
            MnemonicType::Labs(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_MnemonicType {}
impl support::IntoDart for MyClass {
    fn into_dart(self) -> support::DartAbi {
        vec![self.val.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyClass {}

impl support::IntoDart for StorageImpl {
    fn into_dart(self) -> support::DartAbi {
        vec![self.instance_hash.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StorageImpl {}

impl support::IntoDart for UnsignedMessageImpl {
    fn into_dart(self) -> support::DartAbi {
        vec![self.inner_message.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for UnsignedMessageImpl {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_verify_signature(
        port_: MessagePort,
        public_key: String,
        data_hash: String,
        signature: String,
    ) {
        wire_verify_signature_impl(port_, public_key, data_hash, signature)
    }

    #[wasm_bindgen]
    pub fn wire_nt_generate_key(port_: MessagePort, account_type: JsValue) {
        wire_nt_generate_key_impl(port_, account_type)
    }

    #[wasm_bindgen]
    pub fn wire_nt_get_hints(port_: MessagePort, input: String) {
        wire_nt_get_hints_impl(port_, input)
    }

    #[wasm_bindgen]
    pub fn wire_nt_derive_from_phrase(port_: MessagePort, phrase: String, mnemonic_type: JsValue) {
        wire_nt_derive_from_phrase_impl(port_, phrase, mnemonic_type)
    }

    #[wasm_bindgen]
    pub fn wire_check_public_key(port_: MessagePort, public_key: String) {
        wire_check_public_key_impl(port_, public_key)
    }

    #[wasm_bindgen]
    pub fn wire_run_local(
        port_: MessagePort,
        account_stuff_boc: String,
        contract_abi: String,
        method: String,
        input: String,
        responsible: bool,
    ) {
        wire_run_local_impl(
            port_,
            account_stuff_boc,
            contract_abi,
            method,
            input,
            responsible,
        )
    }

    #[wasm_bindgen]
    pub fn wire_get_expected_address(
        port_: MessagePort,
        tvc: String,
        contract_abi: String,
        workchain_id: i8,
        public_key: Option<String>,
        init_data: String,
    ) {
        wire_get_expected_address_impl(
            port_,
            tvc,
            contract_abi,
            workchain_id,
            public_key,
            init_data,
        )
    }

    #[wasm_bindgen]
    pub fn wire_encode_internal_input(
        port_: MessagePort,
        contract_abi: String,
        method: String,
        input: String,
    ) {
        wire_encode_internal_input_impl(port_, contract_abi, method, input)
    }

    #[wasm_bindgen]
    pub fn wire_create_external_message_without_signature(
        port_: MessagePort,
        dst: String,
        contract_abi: String,
        method: String,
        state_init: Option<String>,
        input: String,
        timeout: u32,
    ) {
        wire_create_external_message_without_signature_impl(
            port_,
            dst,
            contract_abi,
            method,
            state_init,
            input,
            timeout,
        )
    }

    #[wasm_bindgen]
    pub fn wire_create_external_message(
        port_: MessagePort,
        dst: String,
        contract_abi: String,
        method: String,
        state_init: Option<String>,
        input: String,
        public_key: String,
        timeout: u32,
    ) {
        wire_create_external_message_impl(
            port_,
            dst,
            contract_abi,
            method,
            state_init,
            input,
            public_key,
            timeout,
        )
    }

    #[wasm_bindgen]
    pub fn wire_parse_known_payload(port_: MessagePort, payload: String) {
        wire_parse_known_payload_impl(port_, payload)
    }

    #[wasm_bindgen]
    pub fn wire_decode_input(
        port_: MessagePort,
        message_body: String,
        contract_abi: String,
        method: Option<String>,
        internal: bool,
    ) {
        wire_decode_input_impl(port_, message_body, contract_abi, method, internal)
    }

    #[wasm_bindgen]
    pub fn wire_decode_event(
        port_: MessagePort,
        message_body: String,
        contract_abi: String,
        event: Option<String>,
    ) {
        wire_decode_event_impl(port_, message_body, contract_abi, event)
    }

    #[wasm_bindgen]
    pub fn wire_decode_output(
        port_: MessagePort,
        message_body: String,
        contract_abi: String,
        method: Option<String>,
    ) {
        wire_decode_output_impl(port_, message_body, contract_abi, method)
    }

    #[wasm_bindgen]
    pub fn wire_decode_transaction(
        port_: MessagePort,
        transaction: String,
        contract_abi: String,
        method: Option<String>,
    ) {
        wire_decode_transaction_impl(port_, transaction, contract_abi, method)
    }

    #[wasm_bindgen]
    pub fn wire_decode_transaction_events(
        port_: MessagePort,
        transaction: String,
        contract_abi: String,
    ) {
        wire_decode_transaction_events_impl(port_, transaction, contract_abi)
    }

    #[wasm_bindgen]
    pub fn wire_get_boc_hash(port_: MessagePort, boc: String) {
        wire_get_boc_hash_impl(port_, boc)
    }

    #[wasm_bindgen]
    pub fn wire_pack_into_cell(port_: MessagePort, params: String, tokens: String) {
        wire_pack_into_cell_impl(port_, params, tokens)
    }

    #[wasm_bindgen]
    pub fn wire_unpack_from_cell(
        port_: MessagePort,
        params: String,
        boc: String,
        allow_partial: bool,
    ) {
        wire_unpack_from_cell_impl(port_, params, boc, allow_partial)
    }

    #[wasm_bindgen]
    pub fn wire_pack_std_smc_addr(
        port_: MessagePort,
        addr: String,
        base64_url: bool,
        bounceable: bool,
    ) {
        wire_pack_std_smc_addr_impl(port_, addr, base64_url, bounceable)
    }

    #[wasm_bindgen]
    pub fn wire_unpack_std_smc_addr(port_: MessagePort, packed: String, base64_url: bool) {
        wire_unpack_std_smc_addr_impl(port_, packed, base64_url)
    }

    #[wasm_bindgen]
    pub fn wire_validate_address(port_: MessagePort, address: String) {
        wire_validate_address_impl(port_, address)
    }

    #[wasm_bindgen]
    pub fn wire_repack_address(port_: MessagePort, address: String) {
        wire_repack_address_impl(port_, address)
    }

    #[wasm_bindgen]
    pub fn wire_extract_public_key(port_: MessagePort, boc: String) {
        wire_extract_public_key_impl(port_, boc)
    }

    #[wasm_bindgen]
    pub fn wire_code_to_tvc(port_: MessagePort, code: String) {
        wire_code_to_tvc_impl(port_, code)
    }

    #[wasm_bindgen]
    pub fn wire_merge_tvc(port_: MessagePort, code: String, data: String) {
        wire_merge_tvc_impl(port_, code, data)
    }

    #[wasm_bindgen]
    pub fn wire_split_tvc(port_: MessagePort, tvc: String) {
        wire_split_tvc_impl(port_, tvc)
    }

    #[wasm_bindgen]
    pub fn wire_set_code_salt(port_: MessagePort, code: String, salt: String) {
        wire_set_code_salt_impl(port_, code, salt)
    }

    #[wasm_bindgen]
    pub fn wire_get_code_salt(port_: MessagePort, code: String) {
        wire_get_code_salt_impl(port_, code)
    }

    #[wasm_bindgen]
    pub fn wire_test_logger_info(port_: MessagePort, string: String) {
        wire_test_logger_info_impl(port_, string)
    }

    #[wasm_bindgen]
    pub fn wire_test_logger_debug(port_: MessagePort, string: String) {
        wire_test_logger_debug_impl(port_, string)
    }

    #[wasm_bindgen]
    pub fn wire_test_logger_warn(port_: MessagePort, string: String) {
        wire_test_logger_warn_impl(port_, string)
    }

    #[wasm_bindgen]
    pub fn wire_test_logger_error(port_: MessagePort, string: String) {
        wire_test_logger_error_impl(port_, string)
    }

    #[wasm_bindgen]
    pub fn wire_test_logger_panic(port_: MessagePort, string: String) {
        wire_test_logger_panic_impl(port_, string)
    }

    #[wasm_bindgen]
    pub fn wire_init_logger(port_: MessagePort, level: i32, mobile_logger: bool) {
        wire_init_logger_impl(port_, level, mobile_logger)
    }

    #[wasm_bindgen]
    pub fn wire_create_log_stream(port_: MessagePort) {
        wire_create_log_stream_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_init_caller(port_: MessagePort) {
        wire_init_caller_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_call_send_result(port_: MessagePort, id: String, value: JsValue) {
        wire_call_send_result_impl(port_, id, value)
    }

    #[wasm_bindgen]
    pub fn wire_simple_log(port_: MessagePort, string: String) {
        wire_simple_log_impl(port_, string)
    }

    #[wasm_bindgen]
    pub fn wire_simple_panic(port_: MessagePort) {
        wire_simple_panic_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_simple_adder_sync(a: i32, b: i32) -> support::WireSyncReturn {
        wire_simple_adder_sync_impl(a, b)
    }

    #[wasm_bindgen]
    pub fn wire_simple_adder(port_: MessagePort, a: i32, b: i32) {
        wire_simple_adder_impl(port_, a, b)
    }

    #[wasm_bindgen]
    pub fn wire_stub_dv(port_: MessagePort) {
        wire_stub_dv_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_stub_dcs(port_: MessagePort) {
        wire_stub_dcs_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_simple_call_dart(port_: MessagePort) {
        wire_simple_call_dart_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_stub_call_dart(port_: MessagePort, stub: JsValue) {
        wire_stub_call_dart_impl(port_, stub)
    }

    #[wasm_bindgen]
    pub fn wire_simple_call_func0(port_: MessagePort, need_result: bool) {
        wire_simple_call_func0_impl(port_, need_result)
    }

    #[wasm_bindgen]
    pub fn wire_simple_call_func1(port_: MessagePort, need_result: bool) {
        wire_simple_call_func1_impl(port_, need_result)
    }

    #[wasm_bindgen]
    pub fn wire_simple_call_func2(port_: MessagePort) {
        wire_simple_call_func2_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_refresh_timeout__method__UnsignedMessageImpl(port_: MessagePort, that: JsValue) {
        wire_refresh_timeout__method__UnsignedMessageImpl_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_expire_at__method__UnsignedMessageImpl(port_: MessagePort, that: JsValue) {
        wire_expire_at__method__UnsignedMessageImpl_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_hash__method__UnsignedMessageImpl(port_: MessagePort, that: JsValue) {
        wire_hash__method__UnsignedMessageImpl_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_sign__method__UnsignedMessageImpl(
        port_: MessagePort,
        that: JsValue,
        signature: String,
    ) {
        wire_sign__method__UnsignedMessageImpl_impl(port_, that, signature)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__GqlTransportImpl(port_: MessagePort, gql_connection: JsValue) {
        wire_new__static_method__GqlTransportImpl_impl(port_, gql_connection)
    }

    #[wasm_bindgen]
    pub fn wire_get_contract_state__method__GqlTransportImpl(
        port_: MessagePort,
        that: JsValue,
        address: String,
    ) {
        wire_get_contract_state__method__GqlTransportImpl_impl(port_, that, address)
    }

    #[wasm_bindgen]
    pub fn wire_get_full_contract_state__method__GqlTransportImpl(
        port_: MessagePort,
        that: JsValue,
        address: String,
    ) {
        wire_get_full_contract_state__method__GqlTransportImpl_impl(port_, that, address)
    }

    #[wasm_bindgen]
    pub fn wire_get_accounts_by_code_hash__method__GqlTransportImpl(
        port_: MessagePort,
        that: JsValue,
        code_hash: String,
        limit: u8,
        continuation: Option<String>,
    ) {
        wire_get_accounts_by_code_hash__method__GqlTransportImpl_impl(
            port_,
            that,
            code_hash,
            limit,
            continuation,
        )
    }

    #[wasm_bindgen]
    pub fn wire_get_transactions__method__GqlTransportImpl(
        port_: MessagePort,
        that: JsValue,
        address: String,
        from_lt: JsValue,
        count: u8,
    ) {
        wire_get_transactions__method__GqlTransportImpl_impl(port_, that, address, from_lt, count)
    }

    #[wasm_bindgen]
    pub fn wire_get_transaction__method__GqlTransportImpl(
        port_: MessagePort,
        that: JsValue,
        hash: String,
    ) {
        wire_get_transaction__method__GqlTransportImpl_impl(port_, that, hash)
    }

    #[wasm_bindgen]
    pub fn wire_get_signature_id__method__GqlTransportImpl(port_: MessagePort, that: JsValue) {
        wire_get_signature_id__method__GqlTransportImpl_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_get_latest_block__method__GqlTransportImpl(
        port_: MessagePort,
        that: JsValue,
        address: String,
    ) {
        wire_get_latest_block__method__GqlTransportImpl_impl(port_, that, address)
    }

    #[wasm_bindgen]
    pub fn wire_get_block__method__GqlTransportImpl(port_: MessagePort, that: JsValue, id: String) {
        wire_get_block__method__GqlTransportImpl_impl(port_, that, id)
    }

    #[wasm_bindgen]
    pub fn wire_wait_for_next_block__method__GqlTransportImpl(
        port_: MessagePort,
        that: JsValue,
        current_block_id: String,
        address: String,
        timeout: u64,
    ) {
        wire_wait_for_next_block__method__GqlTransportImpl_impl(
            port_,
            that,
            current_block_id,
            address,
            timeout,
        )
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__JrpcTransportImpl(
        port_: MessagePort,
        jrpc_connection: JsValue,
    ) {
        wire_new__static_method__JrpcTransportImpl_impl(port_, jrpc_connection)
    }

    #[wasm_bindgen]
    pub fn wire_get_contract_state__method__JrpcTransportImpl(
        port_: MessagePort,
        that: JsValue,
        address: String,
    ) {
        wire_get_contract_state__method__JrpcTransportImpl_impl(port_, that, address)
    }

    #[wasm_bindgen]
    pub fn wire_get_full_contract_state__method__JrpcTransportImpl(
        port_: MessagePort,
        that: JsValue,
        address: String,
    ) {
        wire_get_full_contract_state__method__JrpcTransportImpl_impl(port_, that, address)
    }

    #[wasm_bindgen]
    pub fn wire_get_accounts_by_code_hash__method__JrpcTransportImpl(
        port_: MessagePort,
        that: JsValue,
        code_hash: String,
        limit: u8,
        continuation: Option<String>,
    ) {
        wire_get_accounts_by_code_hash__method__JrpcTransportImpl_impl(
            port_,
            that,
            code_hash,
            limit,
            continuation,
        )
    }

    #[wasm_bindgen]
    pub fn wire_get_transactions__method__JrpcTransportImpl(
        port_: MessagePort,
        that: JsValue,
        address: String,
        from_lt: JsValue,
        count: u8,
    ) {
        wire_get_transactions__method__JrpcTransportImpl_impl(port_, that, address, from_lt, count)
    }

    #[wasm_bindgen]
    pub fn wire_get_transaction__method__JrpcTransportImpl(
        port_: MessagePort,
        that: JsValue,
        hash: String,
    ) {
        wire_get_transaction__method__JrpcTransportImpl_impl(port_, that, hash)
    }

    #[wasm_bindgen]
    pub fn wire_get_signature_id__method__JrpcTransportImpl(port_: MessagePort, that: JsValue) {
        wire_get_signature_id__method__JrpcTransportImpl_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__JrpcConnectionDartWrapper(
        port_: MessagePort,
        instance_hash: String,
    ) {
        wire_new__static_method__JrpcConnectionDartWrapper_impl(port_, instance_hash)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__GqlConnectionDartWrapper(
        port_: MessagePort,
        is_local: bool,
        instance_hash: String,
    ) {
        wire_new__static_method__GqlConnectionDartWrapper_impl(port_, is_local, instance_hash)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__LedgerConnectionImpl(
        port_: MessagePort,
        instance_hash: String,
    ) {
        wire_new__static_method__LedgerConnectionImpl_impl(port_, instance_hash)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__StorageImpl(port_: MessagePort, instance_hash: String) {
        wire_new__static_method__StorageImpl_impl(port_, instance_hash)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__MyClass(port_: MessagePort, a: i32) {
        wire_new__static_method__MyClass_impl(port_, a)
    }

    #[wasm_bindgen]
    pub fn wire_my_format__method__MyClass(port_: MessagePort, that: JsValue) {
        wire_my_format__method__MyClass_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_new__static_method__CallerTestClass(
        port_: MessagePort,
        instance_hash: String,
        value: i32,
    ) {
        wire_new__static_method__CallerTestClass_impl(port_, instance_hash, value)
    }

    #[wasm_bindgen]
    pub fn wire_call_some_func__method__CallerTestClass(port_: MessagePort, that: JsValue) {
        wire_call_some_func__method__CallerTestClass_impl(port_, that)
    }

    // Section: allocate functions

    // Section: related functions

    #[wasm_bindgen]
    pub fn drop_opaque_ArcGqlConnectionBoxTrait(ptr: *const c_void) {
        unsafe {
            Arc::<Arc<dyn GqlConnectionBoxTrait>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn share_opaque_ArcGqlConnectionBoxTrait(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Arc<dyn GqlConnectionBoxTrait>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[wasm_bindgen]
    pub fn drop_opaque_ArcJrpcConnectionBoxTrait(ptr: *const c_void) {
        unsafe {
            Arc::<Arc<dyn JrpcConnectionBoxTrait>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn share_opaque_ArcJrpcConnectionBoxTrait(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Arc<dyn JrpcConnectionBoxTrait>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[wasm_bindgen]
    pub fn drop_opaque_ArcJrpcTransportBoxTrait(ptr: *const c_void) {
        unsafe {
            Arc::<Arc<dyn JrpcTransportBoxTrait>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn share_opaque_ArcJrpcTransportBoxTrait(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Arc<dyn JrpcTransportBoxTrait>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[wasm_bindgen]
    pub fn drop_opaque_BoxGqlTransportBoxTrait(ptr: *const c_void) {
        unsafe {
            Arc::<Box<dyn GqlTransportBoxTrait>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn share_opaque_BoxGqlTransportBoxTrait(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Box<dyn GqlTransportBoxTrait>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[wasm_bindgen]
    pub fn drop_opaque_BoxUnsignedMessageBoxTrait(ptr: *const c_void) {
        unsafe {
            Arc::<Box<dyn UnsignedMessageBoxTrait>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn share_opaque_BoxUnsignedMessageBoxTrait(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Box<dyn UnsignedMessageBoxTrait>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }

    impl Wire2Api<CallerTestClass> for JsValue {
        fn wire2api(self) -> CallerTestClass {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            CallerTestClass {
                instance_hash: self_.get(0).wire2api(),
                value: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<DartCallStub> for JsValue {
        fn wire2api(self) -> DartCallStub {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                4,
                "Expected 4 elements, got {}",
                self_.length()
            );
            DartCallStub {
                instance_hash: self_.get(0).wire2api(),
                fn_name: self_.get(1).wire2api(),
                args: self_.get(2).wire2api(),
                named_args: self_.get(3).wire2api(),
            }
        }
    }
    impl Wire2Api<DynamicNamedValue> for JsValue {
        fn wire2api(self) -> DynamicNamedValue {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            DynamicNamedValue {
                name: self_.get(0).wire2api(),
                value: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<DynamicValue> for JsValue {
        fn wire2api(self) -> DynamicValue {
            let self_ = self.unchecked_into::<JsArray>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => DynamicValue::U16(self_.get(1).wire2api()),
                1 => DynamicValue::U32(self_.get(1).wire2api()),
                2 => DynamicValue::I32(self_.get(1).wire2api()),
                3 => DynamicValue::U64(self_.get(1).wire2api()),
                4 => DynamicValue::I64(self_.get(1).wire2api()),
                5 => DynamicValue::F32(self_.get(1).wire2api()),
                6 => DynamicValue::F64(self_.get(1).wire2api()),
                7 => DynamicValue::String(self_.get(1).wire2api()),
                8 => DynamicValue::MegaStruct(self_.get(1).wire2api()),
                9 => DynamicValue::Error(self_.get(1).wire2api()),
                10 => DynamicValue::None,
                _ => unreachable!(),
            }
        }
    }

    impl Wire2Api<GqlConnectionDartWrapper> for JsValue {
        fn wire2api(self) -> GqlConnectionDartWrapper {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            GqlConnectionDartWrapper {
                inner_connection: self_.get(0).wire2api(),
            }
        }
    }
    impl Wire2Api<GqlTransportImpl> for JsValue {
        fn wire2api(self) -> GqlTransportImpl {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            GqlTransportImpl {
                inner_transport: self_.get(0).wire2api(),
            }
        }
    }

    impl Wire2Api<JrpcConnectionDartWrapper> for JsValue {
        fn wire2api(self) -> JrpcConnectionDartWrapper {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            JrpcConnectionDartWrapper {
                inner_connection: self_.get(0).wire2api(),
            }
        }
    }
    impl Wire2Api<JrpcTransportImpl> for JsValue {
        fn wire2api(self) -> JrpcTransportImpl {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            JrpcTransportImpl {
                inner_transport: self_.get(0).wire2api(),
            }
        }
    }
    impl Wire2Api<Vec<DynamicNamedValue>> for JsValue {
        fn wire2api(self) -> Vec<DynamicNamedValue> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Vec<DynamicValue>> for JsValue {
        fn wire2api(self) -> Vec<DynamicValue> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }

    impl Wire2Api<MnemonicType> for JsValue {
        fn wire2api(self) -> MnemonicType {
            let self_ = self.unchecked_into::<JsArray>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => MnemonicType::Legacy,
                1 => MnemonicType::Labs(self_.get(1).wire2api()),
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<MyClass> for JsValue {
        fn wire2api(self) -> MyClass {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            MyClass {
                val: self_.get(0).wire2api(),
            }
        }
    }
    impl Wire2Api<Option<String>> for Option<String> {
        fn wire2api(self) -> Option<String> {
            self.map(Wire2Api::wire2api)
        }
    }
    impl Wire2Api<Option<DynamicValue>> for JsValue {
        fn wire2api(self) -> Option<DynamicValue> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    impl Wire2Api<UnsignedMessageImpl> for JsValue {
        fn wire2api(self) -> UnsignedMessageImpl {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            UnsignedMessageImpl {
                inner_message: self_.get(0).wire2api(),
            }
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<RustOpaque<Arc<dyn GqlConnectionBoxTrait>>> for JsValue {
        fn wire2api(self) -> RustOpaque<Arc<dyn GqlConnectionBoxTrait>> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }

            unsafe { support::opaque_from_dart((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl Wire2Api<RustOpaque<Arc<dyn JrpcConnectionBoxTrait>>> for JsValue {
        fn wire2api(self) -> RustOpaque<Arc<dyn JrpcConnectionBoxTrait>> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }

            unsafe { support::opaque_from_dart((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl Wire2Api<RustOpaque<Arc<dyn JrpcTransportBoxTrait>>> for JsValue {
        fn wire2api(self) -> RustOpaque<Arc<dyn JrpcTransportBoxTrait>> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }

            unsafe { support::opaque_from_dart((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl Wire2Api<RustOpaque<Box<dyn GqlTransportBoxTrait>>> for JsValue {
        fn wire2api(self) -> RustOpaque<Box<dyn GqlTransportBoxTrait>> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }

            unsafe { support::opaque_from_dart((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl Wire2Api<RustOpaque<Box<dyn UnsignedMessageBoxTrait>>> for JsValue {
        fn wire2api(self) -> RustOpaque<Box<dyn UnsignedMessageBoxTrait>> {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }

            unsafe { support::opaque_from_dart((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<bool> for JsValue {
        fn wire2api(self) -> bool {
            self.is_truthy()
        }
    }
    impl Wire2Api<ErrorCode> for JsValue {
        fn wire2api(self) -> ErrorCode {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
    impl Wire2Api<f32> for JsValue {
        fn wire2api(self) -> f32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<f64> for JsValue {
        fn wire2api(self) -> f64 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<i32> for JsValue {
        fn wire2api(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<i64> for JsValue {
        fn wire2api(self) -> i64 {
            ::std::convert::TryInto::try_into(self.dyn_into::<js_sys::BigInt>().unwrap()).unwrap()
        }
    }
    impl Wire2Api<i8> for JsValue {
        fn wire2api(self) -> i8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<LogLevel> for JsValue {
        fn wire2api(self) -> LogLevel {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
    impl Wire2Api<Option<String>> for JsValue {
        fn wire2api(self) -> Option<String> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<Option<u64>> for JsValue {
        fn wire2api(self) -> Option<u64> {
            (!self.is_undefined() && !self.is_null()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<u16> for JsValue {
        fn wire2api(self) -> u16 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u32> for JsValue {
        fn wire2api(self) -> u32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u64> for JsValue {
        fn wire2api(self) -> u64 {
            ::std::convert::TryInto::try_into(self.dyn_into::<js_sys::BigInt>().unwrap()).unwrap()
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_verify_signature(
        port_: i64,
        public_key: *mut wire_uint_8_list,
        data_hash: *mut wire_uint_8_list,
        signature: *mut wire_uint_8_list,
    ) {
        wire_verify_signature_impl(port_, public_key, data_hash, signature)
    }

    #[no_mangle]
    pub extern "C" fn wire_nt_generate_key(port_: i64, account_type: *mut wire_MnemonicType) {
        wire_nt_generate_key_impl(port_, account_type)
    }

    #[no_mangle]
    pub extern "C" fn wire_nt_get_hints(port_: i64, input: *mut wire_uint_8_list) {
        wire_nt_get_hints_impl(port_, input)
    }

    #[no_mangle]
    pub extern "C" fn wire_nt_derive_from_phrase(
        port_: i64,
        phrase: *mut wire_uint_8_list,
        mnemonic_type: *mut wire_MnemonicType,
    ) {
        wire_nt_derive_from_phrase_impl(port_, phrase, mnemonic_type)
    }

    #[no_mangle]
    pub extern "C" fn wire_check_public_key(port_: i64, public_key: *mut wire_uint_8_list) {
        wire_check_public_key_impl(port_, public_key)
    }

    #[no_mangle]
    pub extern "C" fn wire_run_local(
        port_: i64,
        account_stuff_boc: *mut wire_uint_8_list,
        contract_abi: *mut wire_uint_8_list,
        method: *mut wire_uint_8_list,
        input: *mut wire_uint_8_list,
        responsible: bool,
    ) {
        wire_run_local_impl(
            port_,
            account_stuff_boc,
            contract_abi,
            method,
            input,
            responsible,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_get_expected_address(
        port_: i64,
        tvc: *mut wire_uint_8_list,
        contract_abi: *mut wire_uint_8_list,
        workchain_id: i8,
        public_key: *mut wire_uint_8_list,
        init_data: *mut wire_uint_8_list,
    ) {
        wire_get_expected_address_impl(
            port_,
            tvc,
            contract_abi,
            workchain_id,
            public_key,
            init_data,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_encode_internal_input(
        port_: i64,
        contract_abi: *mut wire_uint_8_list,
        method: *mut wire_uint_8_list,
        input: *mut wire_uint_8_list,
    ) {
        wire_encode_internal_input_impl(port_, contract_abi, method, input)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_external_message_without_signature(
        port_: i64,
        dst: *mut wire_uint_8_list,
        contract_abi: *mut wire_uint_8_list,
        method: *mut wire_uint_8_list,
        state_init: *mut wire_uint_8_list,
        input: *mut wire_uint_8_list,
        timeout: u32,
    ) {
        wire_create_external_message_without_signature_impl(
            port_,
            dst,
            contract_abi,
            method,
            state_init,
            input,
            timeout,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_create_external_message(
        port_: i64,
        dst: *mut wire_uint_8_list,
        contract_abi: *mut wire_uint_8_list,
        method: *mut wire_uint_8_list,
        state_init: *mut wire_uint_8_list,
        input: *mut wire_uint_8_list,
        public_key: *mut wire_uint_8_list,
        timeout: u32,
    ) {
        wire_create_external_message_impl(
            port_,
            dst,
            contract_abi,
            method,
            state_init,
            input,
            public_key,
            timeout,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_parse_known_payload(port_: i64, payload: *mut wire_uint_8_list) {
        wire_parse_known_payload_impl(port_, payload)
    }

    #[no_mangle]
    pub extern "C" fn wire_decode_input(
        port_: i64,
        message_body: *mut wire_uint_8_list,
        contract_abi: *mut wire_uint_8_list,
        method: *mut wire_uint_8_list,
        internal: bool,
    ) {
        wire_decode_input_impl(port_, message_body, contract_abi, method, internal)
    }

    #[no_mangle]
    pub extern "C" fn wire_decode_event(
        port_: i64,
        message_body: *mut wire_uint_8_list,
        contract_abi: *mut wire_uint_8_list,
        event: *mut wire_uint_8_list,
    ) {
        wire_decode_event_impl(port_, message_body, contract_abi, event)
    }

    #[no_mangle]
    pub extern "C" fn wire_decode_output(
        port_: i64,
        message_body: *mut wire_uint_8_list,
        contract_abi: *mut wire_uint_8_list,
        method: *mut wire_uint_8_list,
    ) {
        wire_decode_output_impl(port_, message_body, contract_abi, method)
    }

    #[no_mangle]
    pub extern "C" fn wire_decode_transaction(
        port_: i64,
        transaction: *mut wire_uint_8_list,
        contract_abi: *mut wire_uint_8_list,
        method: *mut wire_uint_8_list,
    ) {
        wire_decode_transaction_impl(port_, transaction, contract_abi, method)
    }

    #[no_mangle]
    pub extern "C" fn wire_decode_transaction_events(
        port_: i64,
        transaction: *mut wire_uint_8_list,
        contract_abi: *mut wire_uint_8_list,
    ) {
        wire_decode_transaction_events_impl(port_, transaction, contract_abi)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_boc_hash(port_: i64, boc: *mut wire_uint_8_list) {
        wire_get_boc_hash_impl(port_, boc)
    }

    #[no_mangle]
    pub extern "C" fn wire_pack_into_cell(
        port_: i64,
        params: *mut wire_uint_8_list,
        tokens: *mut wire_uint_8_list,
    ) {
        wire_pack_into_cell_impl(port_, params, tokens)
    }

    #[no_mangle]
    pub extern "C" fn wire_unpack_from_cell(
        port_: i64,
        params: *mut wire_uint_8_list,
        boc: *mut wire_uint_8_list,
        allow_partial: bool,
    ) {
        wire_unpack_from_cell_impl(port_, params, boc, allow_partial)
    }

    #[no_mangle]
    pub extern "C" fn wire_pack_std_smc_addr(
        port_: i64,
        addr: *mut wire_uint_8_list,
        base64_url: bool,
        bounceable: bool,
    ) {
        wire_pack_std_smc_addr_impl(port_, addr, base64_url, bounceable)
    }

    #[no_mangle]
    pub extern "C" fn wire_unpack_std_smc_addr(
        port_: i64,
        packed: *mut wire_uint_8_list,
        base64_url: bool,
    ) {
        wire_unpack_std_smc_addr_impl(port_, packed, base64_url)
    }

    #[no_mangle]
    pub extern "C" fn wire_validate_address(port_: i64, address: *mut wire_uint_8_list) {
        wire_validate_address_impl(port_, address)
    }

    #[no_mangle]
    pub extern "C" fn wire_repack_address(port_: i64, address: *mut wire_uint_8_list) {
        wire_repack_address_impl(port_, address)
    }

    #[no_mangle]
    pub extern "C" fn wire_extract_public_key(port_: i64, boc: *mut wire_uint_8_list) {
        wire_extract_public_key_impl(port_, boc)
    }

    #[no_mangle]
    pub extern "C" fn wire_code_to_tvc(port_: i64, code: *mut wire_uint_8_list) {
        wire_code_to_tvc_impl(port_, code)
    }

    #[no_mangle]
    pub extern "C" fn wire_merge_tvc(
        port_: i64,
        code: *mut wire_uint_8_list,
        data: *mut wire_uint_8_list,
    ) {
        wire_merge_tvc_impl(port_, code, data)
    }

    #[no_mangle]
    pub extern "C" fn wire_split_tvc(port_: i64, tvc: *mut wire_uint_8_list) {
        wire_split_tvc_impl(port_, tvc)
    }

    #[no_mangle]
    pub extern "C" fn wire_set_code_salt(
        port_: i64,
        code: *mut wire_uint_8_list,
        salt: *mut wire_uint_8_list,
    ) {
        wire_set_code_salt_impl(port_, code, salt)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_code_salt(port_: i64, code: *mut wire_uint_8_list) {
        wire_get_code_salt_impl(port_, code)
    }

    #[no_mangle]
    pub extern "C" fn wire_test_logger_info(port_: i64, string: *mut wire_uint_8_list) {
        wire_test_logger_info_impl(port_, string)
    }

    #[no_mangle]
    pub extern "C" fn wire_test_logger_debug(port_: i64, string: *mut wire_uint_8_list) {
        wire_test_logger_debug_impl(port_, string)
    }

    #[no_mangle]
    pub extern "C" fn wire_test_logger_warn(port_: i64, string: *mut wire_uint_8_list) {
        wire_test_logger_warn_impl(port_, string)
    }

    #[no_mangle]
    pub extern "C" fn wire_test_logger_error(port_: i64, string: *mut wire_uint_8_list) {
        wire_test_logger_error_impl(port_, string)
    }

    #[no_mangle]
    pub extern "C" fn wire_test_logger_panic(port_: i64, string: *mut wire_uint_8_list) {
        wire_test_logger_panic_impl(port_, string)
    }

    #[no_mangle]
    pub extern "C" fn wire_init_logger(port_: i64, level: i32, mobile_logger: bool) {
        wire_init_logger_impl(port_, level, mobile_logger)
    }

    #[no_mangle]
    pub extern "C" fn wire_create_log_stream(port_: i64) {
        wire_create_log_stream_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_init_caller(port_: i64) {
        wire_init_caller_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_call_send_result(
        port_: i64,
        id: *mut wire_uint_8_list,
        value: *mut wire_DynamicValue,
    ) {
        wire_call_send_result_impl(port_, id, value)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_log(port_: i64, string: *mut wire_uint_8_list) {
        wire_simple_log_impl(port_, string)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_panic(port_: i64) {
        wire_simple_panic_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_adder_sync(a: i32, b: i32) -> support::WireSyncReturn {
        wire_simple_adder_sync_impl(a, b)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_adder(port_: i64, a: i32, b: i32) {
        wire_simple_adder_impl(port_, a, b)
    }

    #[no_mangle]
    pub extern "C" fn wire_stub_dv(port_: i64) {
        wire_stub_dv_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_stub_dcs(port_: i64) {
        wire_stub_dcs_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_call_dart(port_: i64) {
        wire_simple_call_dart_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_stub_call_dart(port_: i64, stub: *mut wire_DartCallStub) {
        wire_stub_call_dart_impl(port_, stub)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_call_func0(port_: i64, need_result: bool) {
        wire_simple_call_func0_impl(port_, need_result)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_call_func1(port_: i64, need_result: bool) {
        wire_simple_call_func1_impl(port_, need_result)
    }

    #[no_mangle]
    pub extern "C" fn wire_simple_call_func2(port_: i64) {
        wire_simple_call_func2_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_refresh_timeout__method__UnsignedMessageImpl(
        port_: i64,
        that: *mut wire_UnsignedMessageImpl,
    ) {
        wire_refresh_timeout__method__UnsignedMessageImpl_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_expire_at__method__UnsignedMessageImpl(
        port_: i64,
        that: *mut wire_UnsignedMessageImpl,
    ) {
        wire_expire_at__method__UnsignedMessageImpl_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_hash__method__UnsignedMessageImpl(
        port_: i64,
        that: *mut wire_UnsignedMessageImpl,
    ) {
        wire_hash__method__UnsignedMessageImpl_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_sign__method__UnsignedMessageImpl(
        port_: i64,
        that: *mut wire_UnsignedMessageImpl,
        signature: *mut wire_uint_8_list,
    ) {
        wire_sign__method__UnsignedMessageImpl_impl(port_, that, signature)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__GqlTransportImpl(
        port_: i64,
        gql_connection: *mut wire_GqlConnectionDartWrapper,
    ) {
        wire_new__static_method__GqlTransportImpl_impl(port_, gql_connection)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_contract_state__method__GqlTransportImpl(
        port_: i64,
        that: *mut wire_GqlTransportImpl,
        address: *mut wire_uint_8_list,
    ) {
        wire_get_contract_state__method__GqlTransportImpl_impl(port_, that, address)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_full_contract_state__method__GqlTransportImpl(
        port_: i64,
        that: *mut wire_GqlTransportImpl,
        address: *mut wire_uint_8_list,
    ) {
        wire_get_full_contract_state__method__GqlTransportImpl_impl(port_, that, address)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_accounts_by_code_hash__method__GqlTransportImpl(
        port_: i64,
        that: *mut wire_GqlTransportImpl,
        code_hash: *mut wire_uint_8_list,
        limit: u8,
        continuation: *mut wire_uint_8_list,
    ) {
        wire_get_accounts_by_code_hash__method__GqlTransportImpl_impl(
            port_,
            that,
            code_hash,
            limit,
            continuation,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_get_transactions__method__GqlTransportImpl(
        port_: i64,
        that: *mut wire_GqlTransportImpl,
        address: *mut wire_uint_8_list,
        from_lt: *mut u64,
        count: u8,
    ) {
        wire_get_transactions__method__GqlTransportImpl_impl(port_, that, address, from_lt, count)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_transaction__method__GqlTransportImpl(
        port_: i64,
        that: *mut wire_GqlTransportImpl,
        hash: *mut wire_uint_8_list,
    ) {
        wire_get_transaction__method__GqlTransportImpl_impl(port_, that, hash)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_signature_id__method__GqlTransportImpl(
        port_: i64,
        that: *mut wire_GqlTransportImpl,
    ) {
        wire_get_signature_id__method__GqlTransportImpl_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_latest_block__method__GqlTransportImpl(
        port_: i64,
        that: *mut wire_GqlTransportImpl,
        address: *mut wire_uint_8_list,
    ) {
        wire_get_latest_block__method__GqlTransportImpl_impl(port_, that, address)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_block__method__GqlTransportImpl(
        port_: i64,
        that: *mut wire_GqlTransportImpl,
        id: *mut wire_uint_8_list,
    ) {
        wire_get_block__method__GqlTransportImpl_impl(port_, that, id)
    }

    #[no_mangle]
    pub extern "C" fn wire_wait_for_next_block__method__GqlTransportImpl(
        port_: i64,
        that: *mut wire_GqlTransportImpl,
        current_block_id: *mut wire_uint_8_list,
        address: *mut wire_uint_8_list,
        timeout: u64,
    ) {
        wire_wait_for_next_block__method__GqlTransportImpl_impl(
            port_,
            that,
            current_block_id,
            address,
            timeout,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__JrpcTransportImpl(
        port_: i64,
        jrpc_connection: *mut wire_JrpcConnectionDartWrapper,
    ) {
        wire_new__static_method__JrpcTransportImpl_impl(port_, jrpc_connection)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_contract_state__method__JrpcTransportImpl(
        port_: i64,
        that: *mut wire_JrpcTransportImpl,
        address: *mut wire_uint_8_list,
    ) {
        wire_get_contract_state__method__JrpcTransportImpl_impl(port_, that, address)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_full_contract_state__method__JrpcTransportImpl(
        port_: i64,
        that: *mut wire_JrpcTransportImpl,
        address: *mut wire_uint_8_list,
    ) {
        wire_get_full_contract_state__method__JrpcTransportImpl_impl(port_, that, address)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_accounts_by_code_hash__method__JrpcTransportImpl(
        port_: i64,
        that: *mut wire_JrpcTransportImpl,
        code_hash: *mut wire_uint_8_list,
        limit: u8,
        continuation: *mut wire_uint_8_list,
    ) {
        wire_get_accounts_by_code_hash__method__JrpcTransportImpl_impl(
            port_,
            that,
            code_hash,
            limit,
            continuation,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_get_transactions__method__JrpcTransportImpl(
        port_: i64,
        that: *mut wire_JrpcTransportImpl,
        address: *mut wire_uint_8_list,
        from_lt: *mut u64,
        count: u8,
    ) {
        wire_get_transactions__method__JrpcTransportImpl_impl(port_, that, address, from_lt, count)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_transaction__method__JrpcTransportImpl(
        port_: i64,
        that: *mut wire_JrpcTransportImpl,
        hash: *mut wire_uint_8_list,
    ) {
        wire_get_transaction__method__JrpcTransportImpl_impl(port_, that, hash)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_signature_id__method__JrpcTransportImpl(
        port_: i64,
        that: *mut wire_JrpcTransportImpl,
    ) {
        wire_get_signature_id__method__JrpcTransportImpl_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__JrpcConnectionDartWrapper(
        port_: i64,
        instance_hash: *mut wire_uint_8_list,
    ) {
        wire_new__static_method__JrpcConnectionDartWrapper_impl(port_, instance_hash)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__GqlConnectionDartWrapper(
        port_: i64,
        is_local: bool,
        instance_hash: *mut wire_uint_8_list,
    ) {
        wire_new__static_method__GqlConnectionDartWrapper_impl(port_, is_local, instance_hash)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__LedgerConnectionImpl(
        port_: i64,
        instance_hash: *mut wire_uint_8_list,
    ) {
        wire_new__static_method__LedgerConnectionImpl_impl(port_, instance_hash)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__StorageImpl(
        port_: i64,
        instance_hash: *mut wire_uint_8_list,
    ) {
        wire_new__static_method__StorageImpl_impl(port_, instance_hash)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__MyClass(port_: i64, a: i32) {
        wire_new__static_method__MyClass_impl(port_, a)
    }

    #[no_mangle]
    pub extern "C" fn wire_my_format__method__MyClass(port_: i64, that: *mut wire_MyClass) {
        wire_my_format__method__MyClass_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_new__static_method__CallerTestClass(
        port_: i64,
        instance_hash: *mut wire_uint_8_list,
        value: i32,
    ) {
        wire_new__static_method__CallerTestClass_impl(port_, instance_hash, value)
    }

    #[no_mangle]
    pub extern "C" fn wire_call_some_func__method__CallerTestClass(
        port_: i64,
        that: *mut wire_CallerTestClass,
    ) {
        wire_call_some_func__method__CallerTestClass_impl(port_, that)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_ArcGqlConnectionBoxTrait() -> wire_ArcGqlConnectionBoxTrait {
        wire_ArcGqlConnectionBoxTrait::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_ArcJrpcConnectionBoxTrait() -> wire_ArcJrpcConnectionBoxTrait {
        wire_ArcJrpcConnectionBoxTrait::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_ArcJrpcTransportBoxTrait() -> wire_ArcJrpcTransportBoxTrait {
        wire_ArcJrpcTransportBoxTrait::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_BoxGqlTransportBoxTrait() -> wire_BoxGqlTransportBoxTrait {
        wire_BoxGqlTransportBoxTrait::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_BoxUnsignedMessageBoxTrait() -> wire_BoxUnsignedMessageBoxTrait {
        wire_BoxUnsignedMessageBoxTrait::new_with_null_ptr()
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_caller_test_class_0() -> *mut wire_CallerTestClass {
        support::new_leak_box_ptr(wire_CallerTestClass::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_dart_call_stub_0() -> *mut wire_DartCallStub {
        support::new_leak_box_ptr(wire_DartCallStub::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_dynamic_value_0() -> *mut wire_DynamicValue {
        support::new_leak_box_ptr(wire_DynamicValue::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_gql_connection_dart_wrapper_0(
    ) -> *mut wire_GqlConnectionDartWrapper {
        support::new_leak_box_ptr(wire_GqlConnectionDartWrapper::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_gql_transport_impl_0() -> *mut wire_GqlTransportImpl {
        support::new_leak_box_ptr(wire_GqlTransportImpl::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_jrpc_connection_dart_wrapper_0(
    ) -> *mut wire_JrpcConnectionDartWrapper {
        support::new_leak_box_ptr(wire_JrpcConnectionDartWrapper::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_jrpc_transport_impl_0() -> *mut wire_JrpcTransportImpl {
        support::new_leak_box_ptr(wire_JrpcTransportImpl::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_mnemonic_type_0() -> *mut wire_MnemonicType {
        support::new_leak_box_ptr(wire_MnemonicType::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_my_class_0() -> *mut wire_MyClass {
        support::new_leak_box_ptr(wire_MyClass::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_u64_0(value: u64) -> *mut u64 {
        support::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_unsigned_message_impl_0() -> *mut wire_UnsignedMessageImpl {
        support::new_leak_box_ptr(wire_UnsignedMessageImpl::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_list_dynamic_named_value_0(
        len: i32,
    ) -> *mut wire_list_dynamic_named_value {
        let wrap = wire_list_dynamic_named_value {
            ptr: support::new_leak_vec_ptr(<wire_DynamicNamedValue>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_list_dynamic_value_0(len: i32) -> *mut wire_list_dynamic_value {
        let wrap = wire_list_dynamic_value {
            ptr: support::new_leak_vec_ptr(<wire_DynamicValue>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    #[no_mangle]
    pub extern "C" fn drop_opaque_ArcGqlConnectionBoxTrait(ptr: *const c_void) {
        unsafe {
            Arc::<Arc<dyn GqlConnectionBoxTrait>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_ArcGqlConnectionBoxTrait(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Arc<dyn GqlConnectionBoxTrait>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_ArcJrpcConnectionBoxTrait(ptr: *const c_void) {
        unsafe {
            Arc::<Arc<dyn JrpcConnectionBoxTrait>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_ArcJrpcConnectionBoxTrait(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Arc<dyn JrpcConnectionBoxTrait>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_ArcJrpcTransportBoxTrait(ptr: *const c_void) {
        unsafe {
            Arc::<Arc<dyn JrpcTransportBoxTrait>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_ArcJrpcTransportBoxTrait(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Arc<dyn JrpcTransportBoxTrait>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_BoxGqlTransportBoxTrait(ptr: *const c_void) {
        unsafe {
            Arc::<Box<dyn GqlTransportBoxTrait>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_BoxGqlTransportBoxTrait(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Box<dyn GqlTransportBoxTrait>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    #[no_mangle]
    pub extern "C" fn drop_opaque_BoxUnsignedMessageBoxTrait(ptr: *const c_void) {
        unsafe {
            Arc::<Box<dyn UnsignedMessageBoxTrait>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn share_opaque_BoxUnsignedMessageBoxTrait(ptr: *const c_void) -> *const c_void {
        unsafe {
            Arc::<Box<dyn UnsignedMessageBoxTrait>>::increment_strong_count(ptr as _);
            ptr
        }
    }

    // Section: impl Wire2Api

    impl Wire2Api<RustOpaque<Arc<dyn GqlConnectionBoxTrait>>> for wire_ArcGqlConnectionBoxTrait {
        fn wire2api(self) -> RustOpaque<Arc<dyn GqlConnectionBoxTrait>> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<RustOpaque<Arc<dyn JrpcConnectionBoxTrait>>> for wire_ArcJrpcConnectionBoxTrait {
        fn wire2api(self) -> RustOpaque<Arc<dyn JrpcConnectionBoxTrait>> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<RustOpaque<Arc<dyn JrpcTransportBoxTrait>>> for wire_ArcJrpcTransportBoxTrait {
        fn wire2api(self) -> RustOpaque<Arc<dyn JrpcTransportBoxTrait>> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<RustOpaque<Box<dyn GqlTransportBoxTrait>>> for wire_BoxGqlTransportBoxTrait {
        fn wire2api(self) -> RustOpaque<Box<dyn GqlTransportBoxTrait>> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<RustOpaque<Box<dyn UnsignedMessageBoxTrait>>> for wire_BoxUnsignedMessageBoxTrait {
        fn wire2api(self) -> RustOpaque<Box<dyn UnsignedMessageBoxTrait>> {
            unsafe { support::opaque_from_dart(self.ptr as _) }
        }
    }
    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }

    impl Wire2Api<CallerTestClass> for *mut wire_CallerTestClass {
        fn wire2api(self) -> CallerTestClass {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<CallerTestClass>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<DartCallStub> for *mut wire_DartCallStub {
        fn wire2api(self) -> DartCallStub {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<DartCallStub>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<DynamicValue> for *mut wire_DynamicValue {
        fn wire2api(self) -> DynamicValue {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<DynamicValue>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<GqlConnectionDartWrapper> for *mut wire_GqlConnectionDartWrapper {
        fn wire2api(self) -> GqlConnectionDartWrapper {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<GqlConnectionDartWrapper>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<GqlTransportImpl> for *mut wire_GqlTransportImpl {
        fn wire2api(self) -> GqlTransportImpl {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<GqlTransportImpl>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<JrpcConnectionDartWrapper> for *mut wire_JrpcConnectionDartWrapper {
        fn wire2api(self) -> JrpcConnectionDartWrapper {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<JrpcConnectionDartWrapper>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<JrpcTransportImpl> for *mut wire_JrpcTransportImpl {
        fn wire2api(self) -> JrpcTransportImpl {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<JrpcTransportImpl>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<MnemonicType> for *mut wire_MnemonicType {
        fn wire2api(self) -> MnemonicType {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<MnemonicType>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<MyClass> for *mut wire_MyClass {
        fn wire2api(self) -> MyClass {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<MyClass>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<u64> for *mut u64 {
        fn wire2api(self) -> u64 {
            unsafe { *support::box_from_leak_ptr(self) }
        }
    }
    impl Wire2Api<UnsignedMessageImpl> for *mut wire_UnsignedMessageImpl {
        fn wire2api(self) -> UnsignedMessageImpl {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<UnsignedMessageImpl>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<CallerTestClass> for wire_CallerTestClass {
        fn wire2api(self) -> CallerTestClass {
            CallerTestClass {
                instance_hash: self.instance_hash.wire2api(),
                value: self.value.wire2api(),
            }
        }
    }
    impl Wire2Api<DartCallStub> for wire_DartCallStub {
        fn wire2api(self) -> DartCallStub {
            DartCallStub {
                instance_hash: self.instance_hash.wire2api(),
                fn_name: self.fn_name.wire2api(),
                args: self.args.wire2api(),
                named_args: self.named_args.wire2api(),
            }
        }
    }
    impl Wire2Api<DynamicNamedValue> for wire_DynamicNamedValue {
        fn wire2api(self) -> DynamicNamedValue {
            DynamicNamedValue {
                name: self.name.wire2api(),
                value: self.value.wire2api(),
            }
        }
    }
    impl Wire2Api<DynamicValue> for wire_DynamicValue {
        fn wire2api(self) -> DynamicValue {
            match self.tag {
                0 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.U16);
                    DynamicValue::U16(ans.field0.wire2api())
                },
                1 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.U32);
                    DynamicValue::U32(ans.field0.wire2api())
                },
                2 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.I32);
                    DynamicValue::I32(ans.field0.wire2api())
                },
                3 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.U64);
                    DynamicValue::U64(ans.field0.wire2api())
                },
                4 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.I64);
                    DynamicValue::I64(ans.field0.wire2api())
                },
                5 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.F32);
                    DynamicValue::F32(ans.field0.wire2api())
                },
                6 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.F64);
                    DynamicValue::F64(ans.field0.wire2api())
                },
                7 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.String);
                    DynamicValue::String(ans.field0.wire2api())
                },
                8 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.MegaStruct);
                    DynamicValue::MegaStruct(ans.field0.wire2api())
                },
                9 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.Error);
                    DynamicValue::Error(ans.field0.wire2api())
                },
                10 => DynamicValue::None,
                _ => unreachable!(),
            }
        }
    }

    impl Wire2Api<GqlConnectionDartWrapper> for wire_GqlConnectionDartWrapper {
        fn wire2api(self) -> GqlConnectionDartWrapper {
            GqlConnectionDartWrapper {
                inner_connection: self.inner_connection.wire2api(),
            }
        }
    }
    impl Wire2Api<GqlTransportImpl> for wire_GqlTransportImpl {
        fn wire2api(self) -> GqlTransportImpl {
            GqlTransportImpl {
                inner_transport: self.inner_transport.wire2api(),
            }
        }
    }

    impl Wire2Api<JrpcConnectionDartWrapper> for wire_JrpcConnectionDartWrapper {
        fn wire2api(self) -> JrpcConnectionDartWrapper {
            JrpcConnectionDartWrapper {
                inner_connection: self.inner_connection.wire2api(),
            }
        }
    }
    impl Wire2Api<JrpcTransportImpl> for wire_JrpcTransportImpl {
        fn wire2api(self) -> JrpcTransportImpl {
            JrpcTransportImpl {
                inner_transport: self.inner_transport.wire2api(),
            }
        }
    }
    impl Wire2Api<Vec<DynamicNamedValue>> for *mut wire_list_dynamic_named_value {
        fn wire2api(self) -> Vec<DynamicNamedValue> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Vec<DynamicValue>> for *mut wire_list_dynamic_value {
        fn wire2api(self) -> Vec<DynamicValue> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }

    impl Wire2Api<MnemonicType> for wire_MnemonicType {
        fn wire2api(self) -> MnemonicType {
            match self.tag {
                0 => MnemonicType::Legacy,
                1 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.Labs);
                    MnemonicType::Labs(ans.field0.wire2api())
                },
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<MyClass> for wire_MyClass {
        fn wire2api(self) -> MyClass {
            MyClass {
                val: self.val.wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl Wire2Api<UnsignedMessageImpl> for wire_UnsignedMessageImpl {
        fn wire2api(self) -> UnsignedMessageImpl {
            UnsignedMessageImpl {
                inner_message: self.inner_message.wire2api(),
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ArcGqlConnectionBoxTrait {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ArcJrpcConnectionBoxTrait {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_ArcJrpcTransportBoxTrait {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_BoxGqlTransportBoxTrait {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_BoxUnsignedMessageBoxTrait {
        ptr: *const core::ffi::c_void,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_CallerTestClass {
        instance_hash: *mut wire_uint_8_list,
        value: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DartCallStub {
        instance_hash: *mut wire_uint_8_list,
        fn_name: *mut wire_uint_8_list,
        args: *mut wire_list_dynamic_value,
        named_args: *mut wire_list_dynamic_named_value,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicNamedValue {
        name: *mut wire_uint_8_list,
        value: *mut wire_DynamicValue,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_GqlConnectionDartWrapper {
        inner_connection: wire_ArcGqlConnectionBoxTrait,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_GqlTransportImpl {
        inner_transport: wire_BoxGqlTransportBoxTrait,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_JrpcConnectionDartWrapper {
        inner_connection: wire_ArcJrpcConnectionBoxTrait,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_JrpcTransportImpl {
        inner_transport: wire_ArcJrpcTransportBoxTrait,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_dynamic_named_value {
        ptr: *mut wire_DynamicNamedValue,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_dynamic_value {
        ptr: *mut wire_DynamicValue,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MyClass {
        val: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_UnsignedMessageImpl {
        inner_message: wire_BoxUnsignedMessageBoxTrait,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue {
        tag: i32,
        kind: *mut DynamicValueKind,
    }

    #[repr(C)]
    pub union DynamicValueKind {
        U16: *mut wire_DynamicValue_U16,
        U32: *mut wire_DynamicValue_U32,
        I32: *mut wire_DynamicValue_I32,
        U64: *mut wire_DynamicValue_U64,
        I64: *mut wire_DynamicValue_I64,
        F32: *mut wire_DynamicValue_F32,
        F64: *mut wire_DynamicValue_F64,
        String: *mut wire_DynamicValue_String,
        MegaStruct: *mut wire_DynamicValue_MegaStruct,
        Error: *mut wire_DynamicValue_Error,
        None: *mut wire_DynamicValue_None,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_U16 {
        field0: u16,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_U32 {
        field0: u32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_I32 {
        field0: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_U64 {
        field0: u64,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_I64 {
        field0: i64,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_F32 {
        field0: f32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_F64 {
        field0: f64,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_String {
        field0: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_MegaStruct {
        field0: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_Error {
        field0: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_DynamicValue_None {}

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MnemonicType {
        tag: i32,
        kind: *mut MnemonicTypeKind,
    }

    #[repr(C)]
    pub union MnemonicTypeKind {
        Legacy: *mut wire_MnemonicType_Legacy,
        Labs: *mut wire_MnemonicType_Labs,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MnemonicType_Legacy {}

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MnemonicType_Labs {
        field0: u16,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_ArcGqlConnectionBoxTrait {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }
    impl NewWithNullPtr for wire_ArcJrpcConnectionBoxTrait {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }
    impl NewWithNullPtr for wire_ArcJrpcTransportBoxTrait {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }
    impl NewWithNullPtr for wire_BoxGqlTransportBoxTrait {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }
    impl NewWithNullPtr for wire_BoxUnsignedMessageBoxTrait {
        fn new_with_null_ptr() -> Self {
            Self {
                ptr: core::ptr::null(),
            }
        }
    }

    impl NewWithNullPtr for wire_CallerTestClass {
        fn new_with_null_ptr() -> Self {
            Self {
                instance_hash: core::ptr::null_mut(),
                value: Default::default(),
            }
        }
    }

    impl Default for wire_CallerTestClass {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_DartCallStub {
        fn new_with_null_ptr() -> Self {
            Self {
                instance_hash: core::ptr::null_mut(),
                fn_name: core::ptr::null_mut(),
                args: core::ptr::null_mut(),
                named_args: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_DartCallStub {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_DynamicNamedValue {
        fn new_with_null_ptr() -> Self {
            Self {
                name: core::ptr::null_mut(),
                value: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_DynamicNamedValue {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_DynamicValue {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: core::ptr::null_mut(),
            }
        }
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_U16() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            U16: support::new_leak_box_ptr(wire_DynamicValue_U16 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_U32() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            U32: support::new_leak_box_ptr(wire_DynamicValue_U32 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_I32() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            I32: support::new_leak_box_ptr(wire_DynamicValue_I32 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_U64() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            U64: support::new_leak_box_ptr(wire_DynamicValue_U64 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_I64() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            I64: support::new_leak_box_ptr(wire_DynamicValue_I64 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_F32() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            F32: support::new_leak_box_ptr(wire_DynamicValue_F32 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_F64() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            F64: support::new_leak_box_ptr(wire_DynamicValue_F64 {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_String() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            String: support::new_leak_box_ptr(wire_DynamicValue_String {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_MegaStruct() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            MegaStruct: support::new_leak_box_ptr(wire_DynamicValue_MegaStruct {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_DynamicValue_Error() -> *mut DynamicValueKind {
        support::new_leak_box_ptr(DynamicValueKind {
            Error: support::new_leak_box_ptr(wire_DynamicValue_Error {
                field0: Default::default(),
            }),
        })
    }

    impl NewWithNullPtr for wire_GqlConnectionDartWrapper {
        fn new_with_null_ptr() -> Self {
            Self {
                inner_connection: wire_ArcGqlConnectionBoxTrait::new_with_null_ptr(),
            }
        }
    }

    impl Default for wire_GqlConnectionDartWrapper {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_GqlTransportImpl {
        fn new_with_null_ptr() -> Self {
            Self {
                inner_transport: wire_BoxGqlTransportBoxTrait::new_with_null_ptr(),
            }
        }
    }

    impl Default for wire_GqlTransportImpl {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_JrpcConnectionDartWrapper {
        fn new_with_null_ptr() -> Self {
            Self {
                inner_connection: wire_ArcJrpcConnectionBoxTrait::new_with_null_ptr(),
            }
        }
    }

    impl Default for wire_JrpcConnectionDartWrapper {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_JrpcTransportImpl {
        fn new_with_null_ptr() -> Self {
            Self {
                inner_transport: wire_ArcJrpcTransportBoxTrait::new_with_null_ptr(),
            }
        }
    }

    impl Default for wire_JrpcTransportImpl {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_MnemonicType {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: core::ptr::null_mut(),
            }
        }
    }

    #[no_mangle]
    pub extern "C" fn inflate_MnemonicType_Labs() -> *mut MnemonicTypeKind {
        support::new_leak_box_ptr(MnemonicTypeKind {
            Labs: support::new_leak_box_ptr(wire_MnemonicType_Labs {
                field0: Default::default(),
            }),
        })
    }

    impl NewWithNullPtr for wire_MyClass {
        fn new_with_null_ptr() -> Self {
            Self {
                val: Default::default(),
            }
        }
    }

    impl Default for wire_MyClass {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_UnsignedMessageImpl {
        fn new_with_null_ptr() -> Self {
            Self {
                inner_message: wire_BoxUnsignedMessageBoxTrait::new_with_null_ptr(),
            }
        }
    }

    impl Default for wire_UnsignedMessageImpl {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
