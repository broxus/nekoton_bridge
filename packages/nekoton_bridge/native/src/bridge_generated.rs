#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.66.0.

use crate::merged::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::nekoton_wrapper::models_api::GeneratedKeyG;
use crate::nekoton_wrapper::models_api::MnemonicType;
use crate::utils::api::MyClass;
use crate::utils::caller::DartCallStub;
use crate::utils::caller::DynamicNamedValue;
use crate::utils::caller::DynamicValue;
use crate::utils::logger::LogEntry;
use crate::utils::logger::LogLevel;

// Section: wire functions

fn wire_resend_mnemonic_impl(
    port_: MessagePort,
    mnemonic: impl Wire2Api<MnemonicType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "resend_mnemonic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_mnemonic = mnemonic.wire2api();
            move |task_callback| Ok(mirror_MnemonicType(resend_mnemonic(api_mnemonic)))
        },
    )
}
fn wire_nt_generate_key_impl(
    port_: MessagePort,
    account_type: impl Wire2Api<MnemonicType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nt_generate_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_account_type = account_type.wire2api();
            move |task_callback| Ok(nt_generate_key(api_account_type))
        },
    )
}
fn wire_nt_get_hints_impl(port_: MessagePort, input: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nt_get_hints",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Ok(nt_get_hints(api_input))
        },
    )
}
fn wire_nt_derive_from_phrase_impl(
    port_: MessagePort,
    phrase: impl Wire2Api<String> + UnwindSafe,
    mnemonic_type: impl Wire2Api<MnemonicType> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nt_derive_from_phrase",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_phrase = phrase.wire2api();
            let api_mnemonic_type = mnemonic_type.wire2api();
            move |task_callback| Ok(nt_derive_from_phrase(api_phrase, api_mnemonic_type))
        },
    )
}
fn wire_init_logger_impl(
    port_: MessagePort,
    level: impl Wire2Api<LogLevel> + UnwindSafe,
    mobile_logger: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_logger",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_level = level.wire2api();
            let api_mobile_logger = mobile_logger.wire2api();
            move |task_callback| Ok(init_logger(api_level, api_mobile_logger))
        },
    )
}
fn wire_create_log_stream_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_log_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| Ok(create_log_stream(task_callback.stream_sink())),
    )
}
fn wire_init_caller_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_caller",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| Ok(init_caller(task_callback.stream_sink())),
    )
}
fn wire_simple_log_impl(port_: MessagePort, string: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_log",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_string = string.wire2api();
            move |task_callback| Ok(simple_log(api_string))
        },
    )
}
fn wire_simple_panic_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_panic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(simple_panic()),
    )
}
fn wire_simple_adder_sync_impl(
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "simple_adder_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            Ok(simple_adder_sync(api_a, api_b))
        },
    )
}
fn wire_simple_adder_impl(
    port_: MessagePort,
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_adder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Ok(simple_adder(api_a, api_b))
        },
    )
}
fn wire_stub_dv_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stub_dv",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(stub_dv()),
    )
}
fn wire_stub_dcs_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stub_dcs",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(stub_dcs()),
    )
}
fn wire_simple_call_dart_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_call_dart",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(simple_call_dart()),
    )
}
fn wire_stub_call_dart_impl(port_: MessagePort, stub: impl Wire2Api<DartCallStub> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stub_call_dart",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_stub = stub.wire2api();
            move |task_callback| Ok(stub_call_dart(api_stub))
        },
    )
}
fn wire_simple_call_func0_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_call_func0",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(simple_call_func0()),
    )
}
fn wire_new__static_method__MyClass_impl(port_: MessagePort, a: impl Wire2Api<i32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__MyClass",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            move |task_callback| Ok(MyClass::new(api_a))
        },
    )
}
fn wire_my_format__method__MyClass_impl(
    port_: MessagePort,
    that: impl Wire2Api<MyClass> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "my_format__method__MyClass",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(MyClass::my_format(&api_that))
        },
    )
}
// Section: wrapper structs

#[derive(Clone)]
struct mirror_MnemonicType(MnemonicType);

// Section: static checks

const _: fn() = || match None::<MnemonicType>.unwrap() {
    MnemonicType::Legacy => {}
    MnemonicType::Labs(field0) => {
        let _: u16 = field0;
    }
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<LogLevel> for i32 {
    fn wire2api(self) -> LogLevel {
        match self {
            0 => LogLevel::Trace,
            1 => LogLevel::Debug,
            2 => LogLevel::Info,
            3 => LogLevel::Warn,
            4 => LogLevel::Error,
            _ => unreachable!("Invalid variant for LogLevel: {}", self),
        }
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for DartCallStub {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.fn_name.into_dart(),
            self.args.into_dart(),
            self.named_args.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DartCallStub {}

impl support::IntoDart for DynamicNamedValue {
    fn into_dart(self) -> support::DartAbi {
        vec![self.name.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DynamicNamedValue {}

impl support::IntoDart for DynamicValue {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::U32(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::I32(field0) => vec![1.into_dart(), field0.into_dart()],
            Self::U64(field0) => vec![2.into_dart(), field0.into_dart()],
            Self::I64(field0) => vec![3.into_dart(), field0.into_dart()],
            Self::F32(field0) => vec![4.into_dart(), field0.into_dart()],
            Self::F64(field0) => vec![5.into_dart(), field0.into_dart()],
            Self::String(field0) => vec![6.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DynamicValue {}

impl support::IntoDart for GeneratedKeyG {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.words.into_dart(),
            mirror_MnemonicType(self.account_type).into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GeneratedKeyG {}

impl support::IntoDart for LogEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.time_millis.into_dart(),
            self.level.into_dart(),
            self.tag.into_dart(),
            self.msg.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LogEntry {}

impl support::IntoDart for LogLevel {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Trace => 0,
            Self::Debug => 1,
            Self::Info => 2,
            Self::Warn => 3,
            Self::Error => 4,
        }
        .into_dart()
    }
}
impl support::IntoDart for mirror_MnemonicType {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            MnemonicType::Legacy => vec![0.into_dart()],
            MnemonicType::Labs(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_MnemonicType {}
impl support::IntoDart for MyClass {
    fn into_dart(self) -> support::DartAbi {
        vec![self.val.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyClass {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
