#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.65.1.

use crate::nekoton::crypto::encrypted_key::encrypted_key_api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::nekoton::models_api::MnemonicTypeG;

// Section: wire functions

fn wire_resend_mnemonic_impl(
    port_: MessagePort,
    mnemonic: impl Wire2Api<MnemonicTypeG> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "resend_mnemonic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_mnemonic = mnemonic.wire2api();
            move |task_callback| Ok(resend_mnemonic(api_mnemonic))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
// Section: impl IntoDart

impl support::IntoDart for MnemonicTypeG {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Legacy => vec![0.into_dart()],
            Self::Labs(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MnemonicTypeG {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_resend_mnemonic(port_: i64, mnemonic: *mut wire_MnemonicTypeG) {
        wire_resend_mnemonic_impl(port_, mnemonic)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_mnemonic_type_g_2() -> *mut wire_MnemonicTypeG {
        support::new_leak_box_ptr(wire_MnemonicTypeG::new_with_null_ptr())
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<MnemonicTypeG> for *mut wire_MnemonicTypeG {
        fn wire2api(self) -> MnemonicTypeG {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<MnemonicTypeG>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<MnemonicTypeG> for wire_MnemonicTypeG {
        fn wire2api(self) -> MnemonicTypeG {
            match self.tag {
                0 => MnemonicTypeG::Legacy,
                1 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.Labs);
                    MnemonicTypeG::Labs(ans.field0.wire2api())
                },
                _ => unreachable!(),
            }
        }
    }

    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MnemonicTypeG {
        tag: i32,
        kind: *mut MnemonicTypeGKind,
    }

    #[repr(C)]
    pub union MnemonicTypeGKind {
        Legacy: *mut wire_MnemonicTypeG_Legacy,
        Labs: *mut wire_MnemonicTypeG_Labs,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MnemonicTypeG_Legacy {}

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_MnemonicTypeG_Labs {
        field0: u16,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_MnemonicTypeG {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: core::ptr::null_mut(),
            }
        }
    }

    #[no_mangle]
    pub extern "C" fn inflate_MnemonicTypeG_Labs() -> *mut MnemonicTypeGKind {
        support::new_leak_box_ptr(MnemonicTypeGKind {
            Labs: support::new_leak_box_ptr(wire_MnemonicTypeG_Labs {
                field0: Default::default(),
            }),
        })
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
